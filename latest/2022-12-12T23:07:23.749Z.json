[{"creator":"A. N. Palmer","title":"The Palmer Method of Business Writing: Lesson 103","link":"https://hackernoon.com/the-palmer-method-of-business-writing-lesson-103?source=rss","pubDate":"Mon, 12 Dec 2022 20:55:09 GMT","content:encoded":"<div class=\"paragraph\"><em>The Palmer Method of Business Writing, by A. N. Palmer is part of the HackerNoon Books series. You can jump to any chapter in this book </em><a href=\"https://hackernoon.com/the-palmer-method-of-business-writing-by-a-n-palmer-table-of-links\"><em>here</em></a><em>.\r Lesson 103</em>\r</div><h2>LESSON 103</h2><div class=\"paragraph\"><strong>Drill 125</strong></div><div class=\"image-container\"><img src=\"https://cdn.hackernoon.com/images/jvjajoMzXGenl6tjMR4f2EWBuIr1-t92a3f7x.jpeg\" alt=\"\" loading=\"auto\"/></div><div class=\"paragraph\">As explained in a former lesson, capital Q is simply a large figure two. It is a good movement drill. Practice it as such.</div><div class=\"paragraph\">In all your word practice a special effort should be made to space the letters evenly. Study your written lines with that in mind.</div><div class=\"Divider\"><i></i><i></i><i></i><i></i><i></i><i></i></div><div class=\"paragraph\"><em>About HackerNoon Book Series: We bring you the most important technical, scientific, and insightful public domain books. This book is part of the public domain.</em></div><div class=\"paragraph\"><em>Palmer, A. N. 2021.¬†The Palmer Method of Business Writing.¬†Urbana, Illinois: Project Gutenberg. Retrieved December 2022 from¬†</em><a href=\"https://www.gutenberg.org/files/66476/66476-h/66476-h.htm\"><em>https://www.gutenberg.org/files/66476/66476-h/66476-h.htm</em></a><em></em><a href=\"https://www.gutenberg.org/files/7370/7370-h/7370-h.htm\"><em></em></a><em></em></div><div class=\"paragraph\"><em>This eBook is for the use of anyone anywhere at no cost and with almost no restrictions whatsoever. You may copy it, give it away or re-use it under the terms of the Project Gutenberg License included with this eBook or online at¬†</em><a href=\"http://www.gutenberg.org/\"><em>www.gutenberg.org</em></a><em>, located at¬†</em><a href=\"https://www.gutenberg.org/policy/license.html\"><em>https://www.gutenberg.org/policy/license.html</em></a><em>.</em></div>","content:encodedSnippet":"The Palmer Method of Business Writing, by A. N. Palmer is part of the HackerNoon Books series. You can jump to any chapter in this book here.\r Lesson 103\r\nLESSON 103\nDrill 125\n\nAs explained in a former lesson, capital Q is simply a large figure two. It is a good movement drill. Practice it as such.\nIn all your word practice a special effort should be made to space the letters evenly. Study your written lines with that in mind.\n\nAbout HackerNoon Book Series: We bring you the most important technical, scientific, and insightful public domain books. This book is part of the public domain.\nPalmer, A. N. 2021.¬†The Palmer Method of Business Writing.¬†Urbana, Illinois: Project Gutenberg. Retrieved December 2022 from¬†https://www.gutenberg.org/files/66476/66476-h/66476-h.htm\nThis eBook is for the use of anyone anywhere at no cost and with almost no restrictions whatsoever. You may copy it, give it away or re-use it under the terms of the Project Gutenberg License included with this eBook or online at¬†www.gutenberg.org, located at¬†https://www.gutenberg.org/policy/license.html.","dc:creator":"A. N. Palmer","content":"Drill 125\n\nAs explained in a former lesson, capital Q is simply a large figure two. It is a good movement drill. Practice it as such.","contentSnippet":"Drill 125\n\nAs explained in a former lesson, capital Q is simply a large figure two. It is a good movement drill. Practice it as such.","guid":"https://hackernoon.com/the-palmer-method-of-business-writing-lesson-103?source=rss","categories":["self-teaching","educational","hackernoon-books","project-gutenberg","books","a.-n.-palmer","handwriting","the-palmer-method-of-business"],"isoDate":"2022-12-12T20:55:09.000Z","from":"https://hackernoon.com/feed"},{"creator":"Ruslan Rakhmedov","title":"Meet Noonies 2022 Winner Ruslan Rakhmedov of HackerNoon Contributor of the Year- CODING","link":"https://hackernoon.com/meet-noonies-2022-winner-ruslan-rakhmedov-of-hackernoon-contributor-of-the-year-coding?source=rss","pubDate":"Mon, 12 Dec 2022 21:06:19 GMT","content:encoded":"<p>\\</p>\n<blockquote>\n  <p>‚ÄúThings are only impossible until they‚Äôre not.‚Äù‚ÄìCaptain Jean-Luc Picard</p>\n</blockquote>\n<h2 id=\"congratulationscaptainyouhavewonthefollowingawardawards\">Congratulations Captain! üéâ üéâüéâ You have won the following award/awards:</h2>\n<p>:::tip\nshare links to your winning URL here, for example</p>\n<p><a href=\"https://www.noonies.tech/2022/programming/2022-hackernoon-contributor-of-the-year-coding/winner?embedable=true\">https://www.noonies.tech/2022/programming/2022-hackernoon-contributor-of-the-year-coding/winner?embedable=true</a></p>\n<p>:::</p>\n<h2 id=\"whatdoesitmeanforyoutowinthistitle\">What does it mean for you to win this title?</h2>\n<p>Additional way to know that I am moving in the right direction</p>\n<h2 id=\"howdoyouoryourcompanyintendtoembracetheresponsibilityofthistitlein2023\">How do you or your company intend to embrace the responsibility of this title in 2023?</h2>\n<p>I don‚Äôt know yet, we‚Äôll see.</p>\n<h2 id=\"whatgoalsareyoulookingforwardtoaccomplishingin2023whetheritbethroughcompanyinitiativesoryourpersonaljourney\">What goals are you looking forward to accomplishing in 2023 (whether it be through company initiatives or your personal journey)?</h2>\n<p>I want to successfully finish my current project and create even more awesome articles about it.</p>\n<h2 id=\"2022hadbeencrazyespeciallyintechwhatwithlayoffweb3fraudandaiwhichtrendareyoumostconcernedaboutwhatsolutionscanyouthinkofbeasbrieforasdetailedasyoulike\">2022 had been crazy, especially in Tech - what with layoff, web3 fraud, and AI! Which trend are you most concerned about? What solutions can you think of? Be as brief or as detailed as you like.</h2>\n<p>I‚Äôd say layoffs. Seems like we will see more changes in this field next year. I‚Äôm concerned of having this trend go in the wrong direction.</p>\n<h2 id=\"shareyourbiggestsuccesssofarandoryourbiggestfailuresofar\">Share your biggest success so far and/or your biggest failure so far.</h2>\n<p>I was laid off.</p>\n<h2 id=\"wewouldloveyourfeedbackonhackernoonasatechpublicationhowhasyourexperiencebeenwithus\">We would love your feedback on HackerNoon as a tech publication! How has your experience been with us?</h2>\n<p>Great!</p>\n<h2 id=\"anywordsofwisdomyoudliketosharewithus\">Any words of wisdom you‚Äôd like to share with us?</h2>\n<p>Keep pushing whatever you do!</p>\n<p>\\</p>\n<p>:::info\n<strong>The 2022 Noonies are sponsored by: <strong><a href=\"http://url9281.hackernoon.com/ls/click?upn=3sNI7gupUphjARNlO7AuGbOeHCeBkOG8GK1tMw1LgFI-3DsvcF_0a-2BzyH21wxrQtUhWPGr7WxyHCMpLcZjcuooy8BLWxFJ3jEXFiuPb6bDb2ACvjtcm2LfgdS3nIy7tqdg2NpgAq7JiP98Ntpz6FhNPb0rBB-2FBi7dKEg-2F-2FrxsA5yxsXhOhwwkn-2BHhjfgzpamjoDNSCXOQj3-2B-2FS2Rg5jE5yi25YzW4ZAM6vaSjNM6DnyKxfNcUvJ-2FEM4vKTbbrg7z8-2B0OSqrxdThhExCE5CL6g-2Bh61lncaeuFm-2BM45MTpOk1RH6yLNnusIQIlIfj5e8NnZyDstP2MvUqFQFT2P9koW3duN2EDjpZF3HAsNjzIKb8UkYwRzEaoaY0rjrAzgM0hcmirqhC5kOJ39OAljX-2B0C7Shl2epzwYKUrb-2Fo28fRcDZdPuEY-2F7dFK0creBw7qwGaZr-2BJH9O8RD0tOCoKIXtW7C06m5yavZWj6Lg3tGKeXd5KTWgCCaSdEjDPJrTi8EIpmQwPS6miHzn-2BNqLgLje-2F4oHHppHT58o0-2FUPfipCb-2FuQsRL8bniiC9bvIaLMNk34qsv0E-2FOE8nkZ49m5pjpmXieIod-2F5PiclTtyMKi9CeLr2NlbuYKwxLd9f0GC-2FcOezR0yCevEdxdIm6uTwC34lIeFDgiVbEXFtbML5428-2B6ibw1fxT7z9yf4O12LNvHQo2R03lMLi4zjM1DUFCp74tIlr-2Bnhqh5w-3D\">.Tech Domains by Radix</a></strong>, and <strong><a href=\"http://url9281.hackernoon.com/ls/click?upn=3sNI7gupUphjARNlO7AuGU3tkPcVmSwynnLaLMa5K4M-3D7Vjq_0a-2BzyH21wxrQtUhWPGr7WxyHCMpLcZjcuooy8BLWxFJ3jEXFiuPb6bDb2ACvjtcm2LfgdS3nIy7tqdg2NpgAq7JiP98Ntpz6FhNPb0rBB-2FBi7dKEg-2F-2FrxsA5yxsXhOhwwkn-2BHhjfgzpamjoDNSCXOQj3-2B-2FS2Rg5jE5yi25YzW4ZAM6vaSjNM6DnyKxfNcUvJ-2FEM4vKTbbrg7z8-2B0OSqrxdThhExCE5CL6g-2Bh61lncaeuFm-2BM45MTpOk1RH6yLNnusIQIlIfj5e8NnZyDstP2MvUqFQFT2P9koW3duN2EDjpZF3HAsNjzIKb8UkYwRzEaoaY0rjrAzgM0hcmirqhC5kOJ39OAljX-2B0C7Shl2epzwYKUrb-2Fo28fRcDZdPuEY-2F7dFK0creBw7qwGaZr-2BJH9O8RD0tOCoKIXtW7C06m5yavZWj6Lg3tGKeXd5KTWgCCaSdEjDPJrTi8EIpmQwPS6miHzn-2BNqLgLje-2F4oHHppHT58o0-2FUPfipCb-2FuQsRL8bnifENzhi-2Bulbz0RNjA9RlJlFYWehXKuyRi7UaERi7wNhdvjxaH6m98Em3cPmKnv7-2BJDUcnHLwz1aVU9P0s3FghjSjmZp4SIdJBccFP1P1uAvCEyVmBn1ypD8BJBo3jh7QAmhxFw3D25rVrVerJGl6psrR6VHBD0-2BPd-2FDrhiXfQWJ4-3D\">BingX</a>.</strong></strong></p>\n<p><strong>You will be receiving a .Tech Domain for life as well as an official HackerNoon NFT!</strong></p>\n<p>:::</p>\n<p>\\</p>","content:encodedSnippet":"\\\n‚ÄúThings are only impossible until they‚Äôre not.‚Äù‚ÄìCaptain Jean-Luc Picard\nCongratulations Captain! üéâ üéâüéâ You have won the following award/awards:\n:::tip\nshare links to your winning URL here, for example\nhttps://www.noonies.tech/2022/programming/2022-hackernoon-contributor-of-the-year-coding/winner?embedable=true\n:::\nWhat does it mean for you to win this title?\nAdditional way to know that I am moving in the right direction\nHow do you or your company intend to embrace the responsibility of this title in 2023?\nI don‚Äôt know yet, we‚Äôll see.\nWhat goals are you looking forward to accomplishing in 2023 (whether it be through company initiatives or your personal journey)?\nI want to successfully finish my current project and create even more awesome articles about it.\n2022 had been crazy, especially in Tech - what with layoff, web3 fraud, and AI! Which trend are you most concerned about? What solutions can you think of? Be as brief or as detailed as you like.\nI‚Äôd say layoffs. Seems like we will see more changes in this field next year. I‚Äôm concerned of having this trend go in the wrong direction.\nShare your biggest success so far and/or your biggest failure so far.\nI was laid off.\nWe would love your feedback on HackerNoon as a tech publication! How has your experience been with us?\nGreat!\nAny words of wisdom you‚Äôd like to share with us?\nKeep pushing whatever you do!\n\\\n:::info\nThe 2022 Noonies are sponsored by: .Tech Domains by Radix, and BingX.\nYou will be receiving a .Tech Domain for life as well as an official HackerNoon NFT!\n:::\n\\","dc:creator":"Ruslan Rakhmedov","content":"Ruslan Rakhmedov talks about winning a Noonie!","contentSnippet":"Ruslan Rakhmedov talks about winning a Noonie!","guid":"https://hackernoon.com/meet-noonies-2022-winner-ruslan-rakhmedov-of-hackernoon-contributor-of-the-year-coding?source=rss","categories":["noonies2022","noonies-winners-2022","noonies","hackernoon-writers","writers","meet-the-writer","interview","writer-interview"],"isoDate":"2022-12-12T21:06:19.000Z","from":"https://hackernoon.com/feed"},{"creator":"Zac Amos","title":"Treat Your Cybersecurity Drills Like Fire Drills","link":"https://hackernoon.com/treat-your-cybersecurity-drills-like-fire-drills?source=rss","pubDate":"Mon, 12 Dec 2022 21:16:10 GMT","content:encoded":"<p>When the smoke alarm goes off, most employees know exactly where to go and how to act ‚Äî after all, they‚Äôve practiced that scenario many times. </p>\n<p>\\\nBut in the case of network breaches, people tend to panic or overlook the issue entirely because they‚Äôve never had formal training. That‚Äôs why businesses must educate their workers by running cybersecurity drills.</p>\n<h2 id=\"cybercrimeisontherise\"><strong>Cybercrime Is on the Rise</strong></h2>\n<p>Hacking rates exploded in 2020 and have been rising steadily ever since. In 2020 alone, <strong><a href=\"https://www.ic3.gov/Media/PDF/AnnualReport/2020_IC3Report.pdf\">the FBI reported $4.2 billion</a></strong> in total corporate and personal losses due to cybercrime. That equates to $700 million more stolen than in the previous year.</p>\n<p>\\\nToday, more people are working from home than ever ‚Äî many of them using weak security measures ‚Äî and more people are online in general. </p>\n<p>\\\nThis opens the door for threat actors to use phishing attacks, social engineering, and other malicious strategies to exploit people. Hackers <strong><a href=\"https://omegasystemscorp.com/exploited-microsoft-vulnerability-is-an-important-reminder-about-preparing-for-zero-day-attacks\">may access computer systems</a></strong> at the network, endpoint, application, or server level.</p>\n<p>\\\nIt isn‚Äôt a matter of if a cyberattack will happen, but when. In 2021, <strong><a href=\"https://www.fbi.gov/news/speeches/fbi-partnering-with-private-sector-to-counter-the-cyber-threat-032222\">14 of 16 critical infrastructure sectors</a></strong> fell victim to ransomware attacks. Hackers targeting infrastructure can disrupt everything from individual HVAC systems to the entire country‚Äôs food supply chain. </p>\n<p>\\\nStrong network security is paramount for organizations that handle personal or financial data.</p>\n<p>\\\nBy educating their employees about protecting sensitive databases, companies can better prepare to handle a security breach and prevent it from incurring significant damage.</p>\n<h2 id=\"howtoruncybersecuritydrills\">How to Run Cybersecurity Drills</h2>\n<p>Here are some exercises to tackle different scenarios involving security breaches. Some of them work best if they‚Äôre scheduled, as employees will need plenty of time to work on them and they‚Äôll disrupt normal office functions. Others should be spontaneous to catch people off guard.</p>\n<p>\\\nEmployees can divide into two teams, with one playing the hackers and the other trying to fix or prevent the security breach. </p>\n<p>\\\nAfter completing the drills, employers should conduct a training session to get everyone up to speed on good cybersecurity practices. They should discuss what employees did well and what they could have done differently.</p>\n<h3 id=\"1denialofservicedosattack\"><strong>1. Denial of Service (DoS) Attack</strong></h3>\n<p>This exercise targets the IT department in particular. A DoS drill can simulate an attack on a website, network, or host without causing system damage or data loss. </p>\n<p>\\\nIt replicates the conditions that would happen <a href=\"https://hackernoon.com/denial-of-service-dos-attacks-nature-and-method-of-infection\">during an actual DoS attack</a> ‚Äî unbearably slow or inaccessible systems that massively impair performance.</p>\n<p>\\\nThe IT team should notice and respond to the drill quickly. Employers can monitor how fast they resolve the situation and provide helpful tools for future scenarios.</p>\n<h3 id=\"2physicalintrusion\"><strong>2. Physical Intrusion</strong></h3>\n<p>The hacker team has USB drives that upload a fake malicious code when inserted into a computer. When a member of the other team‚Äôs computer is left unattended, the hackers should try their best to upload the software onto it. </p>\n<p>\\\nThis will only work if the computer is left unlocked while the user is away, so it tests how well people guard their workstations.</p>\n<h3 id=\"3tabletopexercises\"><strong>3. Tabletop Exercises</strong></h3>\n<p>This drill is straightforward. Employees gather around a table and simply run through security drills on paper, explaining what they think they should do during a cyberattack. </p>\n<p>\\\nThen, their manager and IT department can present the best protocols and who to contact in an attack. Tabletop drills take very little time and don‚Äôt disrupt online services.</p>\n<h3 id=\"4addinganunauthorizeddevice\"><strong>4. Adding an Unauthorized Device</strong></h3>\n<p>The hacking team will bring in an external device ‚Äî such as a computer or tablet ‚Äî and add it to the network. The IT department should notice the unauthorized device quickly and work to remove it. They should also try to locate the physical device and unplug it. </p>\n<p>\\\nThe unauthorized device represents a malicious computer inconspicuously brought inside the building, which could threaten security.</p>\n<h3 id=\"5phishingexercises\"><strong>5. Phishing Exercises</strong></h3>\n<p>A phishing attack involves sending someone a malicious link. When the unsuspecting person clicks the link ‚Äî <a href=\"https://hackernoon.com/phishing-101-a-beginners-guide-on-phishing-attacks\">which usually looks harmless</a> or appears to be from somebody they know ‚Äî their computer may become infected. </p>\n<p>\\\nOr, the link leads to a legitimate-looking page asking for the person‚Äôs information, which the hacker can then steal.</p>\n<p>\\\nA cybersecurity drill could involve sending staff an email that contains a link, then seeing how many of them click on it ‚Äî or, worse yet, input their information on the landing page. The link will alert the testing team when someone opens it.</p>\n<h3 id=\"6spearphishingexercises\"><strong>6. Spearphishing Exercises</strong></h3>\n<p>This is a form of targeted phishing. The hacking team should tailor their messages to trick specific people, such as by pretending to be someone‚Äôs manager and using the employee‚Äôs name and personal details in the email. </p>\n<p>\\\nAs with the generic phishing exercise, the testing team will know who clicked the link and whether they input their credentials on the form.</p>\n<p>\\\nThis cybersecurity drill works best if the recipients don‚Äôt know about it. Perhaps quite obviously, an email arriving at a scheduled time isn‚Äôt likely to fool anybody.</p>\n<h2 id=\"goodsecuritypractices\"><strong>Good Security Practices</strong></h2>\n<p>In addition to running cybersecurity drills, businesses should use the following strategies to minimize their chances of being hacked:</p>\n<p>\\</p>\n<ul>\n<li>Back up data frequently and keep offline copies of the backups.</li>\n<li>Use unique, hard-to-guess passwords for every account.</li>\n<li>Change passwords frequently.</li>\n<li>Regularly audit administrative accounts.</li>\n<li>Use a password manager to generate encrypted passwords that have a mix of letters, numbers, symbols, and upper and lower case letters.</li>\n<li>Enable two-factor authentication.</li>\n<li>Disable remote access and unused RDP ports.</li>\n<li>Disable hyperlinks from email addresses outside the organization and add a banner to unknown senders.</li>\n<li>Use network segmentation.</li>\n<li>Use secure networks rather than public Wi-Fi.</li>\n<li>Install antivirus software on all devices and keep it up to date.</li>\n<li>Implement <strong><a href=\"https://news.mit.edu/2022/zero-trust-architecture-may-hold-answer-cybersecurity-insider-threats-0517\">a zero-trust security model</a></strong> with a least-privilege principle.</li>\n</ul>\n<p>\\\nThese methods aren‚Äôt foolproof but taken together, they pose a formidable challenge for threat actors.</p>\n<h2 id=\"preventingcyberattacks\">Preventing Cyberattacks</h2>\n<p>Preventing data breaches isn‚Äôt just the IT department‚Äôs job ‚Äî everyone has to be on guard. </p>\n<p>\\\nBy implementing robust cybersecurity methods and using practice drills, businesses can better prepare in case a cybercriminal tries to mount an attack, and employees will feel more confident in their IT skills.</p>","content:encodedSnippet":"When the smoke alarm goes off, most employees know exactly where to go and how to act ‚Äî after all, they‚Äôve practiced that scenario many times. \n\\\nBut in the case of network breaches, people tend to panic or overlook the issue entirely because they‚Äôve never had formal training. That‚Äôs why businesses must educate their workers by running cybersecurity drills.\nCybercrime Is on the Rise\nHacking rates exploded in 2020 and have been rising steadily ever since. In 2020 alone, the FBI reported $4.2 billion in total corporate and personal losses due to cybercrime. That equates to $700 million more stolen than in the previous year.\n\\\nToday, more people are working from home than ever ‚Äî many of them using weak security measures ‚Äî and more people are online in general. \n\\\nThis opens the door for threat actors to use phishing attacks, social engineering, and other malicious strategies to exploit people. Hackers may access computer systems at the network, endpoint, application, or server level.\n\\\nIt isn‚Äôt a matter of if a cyberattack will happen, but when. In 2021, 14 of 16 critical infrastructure sectors fell victim to ransomware attacks. Hackers targeting infrastructure can disrupt everything from individual HVAC systems to the entire country‚Äôs food supply chain. \n\\\nStrong network security is paramount for organizations that handle personal or financial data.\n\\\nBy educating their employees about protecting sensitive databases, companies can better prepare to handle a security breach and prevent it from incurring significant damage.\nHow to Run Cybersecurity Drills\nHere are some exercises to tackle different scenarios involving security breaches. Some of them work best if they‚Äôre scheduled, as employees will need plenty of time to work on them and they‚Äôll disrupt normal office functions. Others should be spontaneous to catch people off guard.\n\\\nEmployees can divide into two teams, with one playing the hackers and the other trying to fix or prevent the security breach. \n\\\nAfter completing the drills, employers should conduct a training session to get everyone up to speed on good cybersecurity practices. They should discuss what employees did well and what they could have done differently.\n1. Denial of Service (DoS) Attack\nThis exercise targets the IT department in particular. A DoS drill can simulate an attack on a website, network, or host without causing system damage or data loss. \n\\\nIt replicates the conditions that would happen during an actual DoS attack ‚Äî unbearably slow or inaccessible systems that massively impair performance.\n\\\nThe IT team should notice and respond to the drill quickly. Employers can monitor how fast they resolve the situation and provide helpful tools for future scenarios.\n2. Physical Intrusion\nThe hacker team has USB drives that upload a fake malicious code when inserted into a computer. When a member of the other team‚Äôs computer is left unattended, the hackers should try their best to upload the software onto it. \n\\\nThis will only work if the computer is left unlocked while the user is away, so it tests how well people guard their workstations.\n3. Tabletop Exercises\nThis drill is straightforward. Employees gather around a table and simply run through security drills on paper, explaining what they think they should do during a cyberattack. \n\\\nThen, their manager and IT department can present the best protocols and who to contact in an attack. Tabletop drills take very little time and don‚Äôt disrupt online services.\n4. Adding an Unauthorized Device\nThe hacking team will bring in an external device ‚Äî such as a computer or tablet ‚Äî and add it to the network. The IT department should notice the unauthorized device quickly and work to remove it. They should also try to locate the physical device and unplug it. \n\\\nThe unauthorized device represents a malicious computer inconspicuously brought inside the building, which could threaten security.\n5. Phishing Exercises\nA phishing attack involves sending someone a malicious link. When the unsuspecting person clicks the link ‚Äî which usually looks harmless or appears to be from somebody they know ‚Äî their computer may become infected. \n\\\nOr, the link leads to a legitimate-looking page asking for the person‚Äôs information, which the hacker can then steal.\n\\\nA cybersecurity drill could involve sending staff an email that contains a link, then seeing how many of them click on it ‚Äî or, worse yet, input their information on the landing page. The link will alert the testing team when someone opens it.\n6. Spearphishing Exercises\nThis is a form of targeted phishing. The hacking team should tailor their messages to trick specific people, such as by pretending to be someone‚Äôs manager and using the employee‚Äôs name and personal details in the email. \n\\\nAs with the generic phishing exercise, the testing team will know who clicked the link and whether they input their credentials on the form.\n\\\nThis cybersecurity drill works best if the recipients don‚Äôt know about it. Perhaps quite obviously, an email arriving at a scheduled time isn‚Äôt likely to fool anybody.\nGood Security Practices\nIn addition to running cybersecurity drills, businesses should use the following strategies to minimize their chances of being hacked:\n\\\n\nBack up data frequently and keep offline copies of the backups.\nUse unique, hard-to-guess passwords for every account.\nChange passwords frequently.\nRegularly audit administrative accounts.\nUse a password manager to generate encrypted passwords that have a mix of letters, numbers, symbols, and upper and lower case letters.\nEnable two-factor authentication.\nDisable remote access and unused RDP ports.\nDisable hyperlinks from email addresses outside the organization and add a banner to unknown senders.\nUse network segmentation.\nUse secure networks rather than public Wi-Fi.\nInstall antivirus software on all devices and keep it up to date.\nImplement a zero-trust security model with a least-privilege principle.\n\\\nThese methods aren‚Äôt foolproof but taken together, they pose a formidable challenge for threat actors.\nPreventing Cyberattacks\nPreventing data breaches isn‚Äôt just the IT department‚Äôs job ‚Äî everyone has to be on guard. \n\\\nBy implementing robust cybersecurity methods and using practice drills, businesses can better prepare in case a cybercriminal tries to mount an attack, and employees will feel more confident in their IT skills.","dc:creator":"Zac Amos","content":"Cybercrime is on the rise, and businesses must educate their workers by running cybersecurity drills. Employers can monitor how fast they resolve the situation and provide helpful tools for future scenarios. Drills can simulate an attack on a website, network or host without causing system damage or data loss. By educating their employees about protecting sensitive databases, companies can better prepare to handle a security breach.","contentSnippet":"Cybercrime is on the rise, and businesses must educate their workers by running cybersecurity drills. Employers can monitor how fast they resolve the situation and provide helpful tools for future scenarios. Drills can simulate an attack on a website, network or host without causing system damage or data loss. By educating their employees about protecting sensitive databases, companies can better prepare to handle a security breach.","guid":"https://hackernoon.com/treat-your-cybersecurity-drills-like-fire-drills?source=rss","categories":["cybersecurity","cybersecurity-drill","distributed-denial-of-service","phishing","prevent-phishing","spear-phishing","phishing-drill","hackernoon-top-story"],"isoDate":"2022-12-12T21:16:10.000Z","from":"https://hackernoon.com/feed"},{"creator":"Andrey Solovev","title":"Qt for Embedded Development: The Many Pros and the Few Cons","link":"https://hackernoon.com/qt-for-embedded-development-the-many-pros-and-the-few-cons?source=rss","pubDate":"Mon, 12 Dec 2022 21:32:20 GMT","content:encoded":"<div class=\"paragraph\">Cross-platform toolkits allow developers to create applications for multiple platforms. Programmers use software <strong>frameworks</strong> for quick application design. </div><div class=\"paragraph\">Toolkits may have compilers, code libraries, and APIs to create software.</div><div class=\"paragraph\">In this article, we look at solutions for embedded systems running on Linux/Unix, Windows, and Android.</div><h2>The Qt Framework</h2><div class=\"image-container\"><img src=\"https://cdn.hackernoon.com/images/LEymvvrtvURIHWScxGtFiYzJjRf2-5ud3ntv.jpeg\" alt=\"\" loading=\"auto\"/></div><div class=\"paragraph\"><em>Qt logo image </em></div><div class=\"paragraph\">The Qt framework is great for creating cross-platform applications for embedded systems. Embedded applications are most often written in C/C++.</div><div class=\"paragraph\">Qt supports various platforms:</div><ul><li>mobile (Android, iOS);</li></ul><ul><li>desktop (Windows, Linux, macOS);</li></ul><ul><li>embedded (Embedded Linux, Embedded Android, Windows Embedded, QNX, etc.).¬†</li></ul><div class=\"paragraph\">C++ is an object-oriented programming language (OOP). OOP makes the process of application engineering faster, easier, and safer.</div><div class=\"paragraph\">C++ supports the WOCA (Write Once, Compile Anywhere) principle.</div><h2>License</h2><div class=\"paragraph\">Qt can be used under <strong>commercial</strong> and <strong>open-source</strong> licenses. You can use Qt under an open-source license for projects with an open-source distribution or without ‚Äåan ‚Äåexternal distribution.</div><h2>Qt Instruments</h2><div class=\"paragraph\">Useful modules make this toolkit one of the most convenient for cross-platform application engineering.¬†</div><div class=\"paragraph\"><strong>Qt Creator</strong> is an IDE that eases GUI application design or modification. Qt Creator is applied to building software in C++, QML, and JavaScript.</div><div class=\"image-container\"><img src=\"https://cdn.hackernoon.com/images/LEymvvrtvURIHWScxGtFiYzJjRf2-50e3nri.jpeg\" alt=\"\" loading=\"auto\"/></div><div class=\"paragraph\"><em>The Qt Creator screenshot</em></div><div class=\"paragraph\">Qt Creator has a very efficient GUI constructor called <strong>Qt Designer</strong>. Qt Designer is characterized by support for the visual editing of signals and slots. It can also be used as an independent tool.</div><div class=\"paragraph\"><strong>Qt Design Studio</strong> is a stripped-down version of Qt Creator. It offers a set of 2D/3D instruments for building user interfaces, user experiences, and human-machine interfaces.¬†</div><div class=\"paragraph\">The Qt framework offers the <strong>QML</strong> language for UI application design.¬†</div><div class=\"paragraph\">Qt <strong>Automotive Suite</strong> modules and instruments are in charge of creating in-vehicle infotainment (IVI) systems. </div><div class=\"paragraph\">The Automotive Suite has the <strong>Qt Application Manager</strong> in its structure, with a high-level API for easy development of a UI system. </div><div class=\"paragraph\">The <strong>Qt GENIVI Extras</strong> module allows designers to combine the product with the structure of the GENIVI automotive platform. The <strong>Neptune 3 UI</strong> helps build the UI for Qt in automotive infotainment (IVI) systems.</div><div class=\"paragraph\">The <strong>Qt Interface Framework</strong> module contains the tools you need to develop middleware components (APIs, backends, services).</div><div class=\"paragraph\">The <strong>Qt Safe Renderer</strong> module, with its UI rendering element, allows developers to achieve the separation of important interpretations from the rest of the system. In the event of failures or emergencies, this makes it possible to display the most crucial elements of the system.</div><h2>Other Multi-Platform Frameworks</h2><div class=\"paragraph\">A lot of solutions can solve the same tasks as Qt. When choosing between frameworks, the developer takes into account his experience and the needs of the project.</div><div class=\"paragraph\">We&#x27;ll take a look at Qt-like solutions and highlight the features of each framework.</div><div class=\"image-container\"><img src=\"https://cdn.hackernoon.com/images/LEymvvrtvURIHWScxGtFiYzJjRf2-0vg3nsg.jpeg\" alt=\"\" loading=\"auto\"/></div><div class=\"paragraph\">Cross-platform toolkits are used for embedded software development.</div><div class=\"paragraph\"><strong>.NET, or dotNet</strong>, is a Microsoft-owned development platform.\r</div><div class=\"paragraph\">Key features of the platform:\r</div><ul><li>open-source;\r</li><li>compatible with Windows, Linux, and macOS;\r</li><li>C #, F #, or Visual Basic are supported.\r</li><li>Visual Studio IDE;\r</li><li>It has a large community.\r</li></ul><div class=\"paragraph\">This structure has a wide variety of compilers, libraries, and APIs to develop and compile mobile and game applications easily.\r</div><div class=\"paragraph\"><strong>Xamarin</strong> is an element of the .Net platform, but it can be used independently. Xamarin is a popular tool for mobile application engineering.\r</div><div class=\"paragraph\">The basic elements of Xamarin:\r</div><ul><li>open-source software;\r</li><li>uses C#;\r</li><li>tools that are natively compiled;\r</li><li>The Xamarin Universal Library and Planet Xamarin projects provide developers with important information and useful resources.\r</li></ul><div class=\"paragraph\"><strong>Flutter</strong> is a Google GUI framework. It supports the WORA (Write once, run anywhere) principle.\r</div><div class=\"paragraph\">The main features of the structure are\r</div><ul><li>Platforms such as Windows, Linux, Android, iOS, and others are all supported.\r</li><li>supports the Dart programming language;\r</li><li>design-specific widgets.\r</li></ul><div class=\"paragraph\">Frameworks based on <strong>Java</strong> are lightweight, extensible, and provide easy and quick application development. Java is one of the most popular programming languages.\r</div><div class=\"paragraph\">On the other hand, the Java language is complex and not very efficient in comparison to other languages.\r</div><div class=\"paragraph\">You can use <strong>GTK+</strong> for creating GUI programs. \r</div><div class=\"paragraph\">The main features of the widget toolkit:\r</div><ul><li>open-source;\r</li><li>multi-platform;\r</li><li>C is the language used;\r</li><li>There are C++, dotNet, and Python bindings available.\r</li><li>Good support for powerful themes;\r</li><li>compatible with Windows, Linux, and macOS.\r</li></ul><div class=\"paragraph\"><strong>The Simple DirectMedia Layer (SDL)</strong> is a cross-platform library. \r</div><div class=\"paragraph\">The main features of SDL:\r</div><ul><li>open-source (under the zlib license);\r</li><li>depending on the target platform, written in C, C++, or Objective-C;\r</li><li>There are bindings for other languages available, too.\r</li><li>Support for multiple windows;\r</li><li>2D graphics that are hardware-accelerated;\r</li><li>It is widely used for cross-platform multimedia programs (primarily games);\r</li><li>well-known for its incredible translation features.\r</li></ul><div class=\"paragraph\">C++ GUI toolkits\r</div><div class=\"image-container\"><img src=\"https://cdn.hackernoon.com/images/LEymvvrtvURIHWScxGtFiYzJjRf2-7hh3n65.jpeg\" alt=\"\" loading=\"auto\"/></div><div class=\"paragraph\">C++ is a programming language.<br/><br/>C++ developers also have a wide choice of C++ GUI frameworks:</div><ul><li><strong>wxWidgets</strong> is an open-source C++ toolkit. It is mature but rather fast. wxWidgets uses native widgets (where possible) to ensure a natural look and feel; it has a very convenient wxCrafter designer.</li><li><strong>FLTK</strong> supports 3D graphics. This framework has a lightweight and simple design.</li><li>Supported by Windows, Linux, iOS, macOS, and Android, <strong>JUCE</strong> has a large set of audio functionalities.</li><li><strong>Ultimate ++</strong> (<strong>U++</strong>, or <strong>Upp</strong>) contains GUI, SQL, and other libraries and focuses on efficiency.¬†</li></ul><div class=\"paragraph\">There are a lot of other C++ UI frameworks. Each of them serves different purposes and has advantages. The Qt benefit is the convenience of developing applications for embedded systems.</div><h2>Why Do We Choose Qt for Embedded Systems?</h2><div class=\"paragraph\">C++ is one of the most widely used languages for embedded devices.</div><div class=\"paragraph\">It is a highly stable programming language. That is why C++ applications can run for many years and are well suited to hardware. C++ is a processor-independent language. </div><div class=\"paragraph\">The C++ data structure is based on algorithms, so it can cope with the challenges that come with developing embedded systems.</div><div class=\"paragraph\">Based on C++, Qt provides everything you need to create software for embedded systems in different industries.¬†</div><div class=\"paragraph\">Having quite a lot of choices for cross-platform solutions, Integra Sources prefers Qt as a far more suitable framework for embedded systems. Here are some of the Qt qualities that made us choose it.</div><ul><li>The key benefit of Qt is the ability to use the same code for different desktop, mobile, and embedded platforms.</li><li>Qt uses a dual licensing model. Integra Sources usually selects an open-source license for projects. Yet, the application design is also available under a Qt commercial license at the client‚Äôs request.</li><li>Detailed API documentation, examples, technical support, and a large community make Qt easy to use.</li><li>There are many bindings to Qt for other programming languages.</li><li>The Qt Creator IDE is fast and responsive.</li></ul><div class=\"paragraph\">We can note some insignificant disadvantages of Qt and C++:</div><ul><li>The C++ language is complicated. It is hard for inexperienced designers to learn and use it.</li><li>C++ may have lacked flexibility for web technologies.</li><li>The speed of cross-platform applications can be slower than native ones.</li><li>Cross-compilation may require extra steps.</li></ul><h2>Qt in Our Projects</h2><div class=\"paragraph\">The number of projects in which we use Qt is increasing. Qt allows designers to solve many tasks fast and easily.</div><div class=\"image-container\"><img src=\"https://cdn.hackernoon.com/images/LEymvvrtvURIHWScxGtFiYzJjRf2-5ui3no9.jpeg\" alt=\"\" loading=\"auto\"/></div><div class=\"paragraph\"><em>Project discussion</em></div><div class=\"paragraph\">Our responsibility for one of the projects, related to the marketing and entertainment spheres, was to develop an Android application for debugging and configuring the customer&#x27;s device. </div><div class=\"paragraph\">The device had cylinder bottles and was equipped with a spray system. It was controlled via BLE. Our developers had to build an application for device management. Also, a video player had to be implemented. </div><div class=\"paragraph\">Once the player reached a certain timestamp, the application had to send a command to the device to spray a certain fragrance.\r</div><div class=\"paragraph\">For the application design, we have chosen the C++/Qt/Qml stack. Also, Java code was used. Qt allowed us to build an Android application in the short term. </div><div class=\"paragraph\">The Qt Connectivity module has accelerated the BLE part‚Äôs development with ready-made Bluetooth solutions. Using the Qt Multimedia module, our specialists have created a video player with different functions.\r</div><div class=\"paragraph\">Integra Sources is pleased with the experience of using the Qt framework and C/C++. It helps us save time, and customers save money by getting efficient cross-platform applications. </div><div class=\"paragraph\">Our portfolio consists of many projects for embedded systems. </div><div class=\"Divider\"><i></i><i></i><i></i><i></i><i></i><i></i></div><div class=\"paragraph\"><em>Also published </em><a href=\"https://www.integrasources.com/blog/qt-c-embedded-development-pros-cons-alternatives/\"><em>hereÔªø</em></a><em></em></div><div class=\"paragraph\">\r</div>","content:encodedSnippet":"Cross-platform toolkits allow developers to create applications for multiple platforms. Programmers use software frameworks for quick application design. \nToolkits may have compilers, code libraries, and APIs to create software.\nIn this article, we look at solutions for embedded systems running on Linux/Unix, Windows, and Android.\nThe Qt Framework\n\nQt logo image \nThe Qt framework is great for creating cross-platform applications for embedded systems. Embedded applications are most often written in C/C++.\nQt supports various platforms:\n\nmobile (Android, iOS);\n\ndesktop (Windows, Linux, macOS);\n\nembedded (Embedded Linux, Embedded Android, Windows Embedded, QNX, etc.).¬†\n\nC++ is an object-oriented programming language (OOP). OOP makes the process of application engineering faster, easier, and safer.\nC++ supports the WOCA (Write Once, Compile Anywhere) principle.\nLicense\nQt can be used under commercial and open-source licenses. You can use Qt under an open-source license for projects with an open-source distribution or without ‚Äåan ‚Äåexternal distribution.\nQt Instruments\nUseful modules make this toolkit one of the most convenient for cross-platform application engineering.¬†\nQt Creator is an IDE that eases GUI application design or modification. Qt Creator is applied to building software in C++, QML, and JavaScript.\n\nThe Qt Creator screenshot\nQt Creator has a very efficient GUI constructor called Qt Designer. Qt Designer is characterized by support for the visual editing of signals and slots. It can also be used as an independent tool.\nQt Design Studio is a stripped-down version of Qt Creator. It offers a set of 2D/3D instruments for building user interfaces, user experiences, and human-machine interfaces.¬†\nThe Qt framework offers the QML language for UI application design.¬†\nQt Automotive Suite modules and instruments are in charge of creating in-vehicle infotainment (IVI) systems. \nThe Automotive Suite has the Qt Application Manager in its structure, with a high-level API for easy development of a UI system. \nThe Qt GENIVI Extras module allows designers to combine the product with the structure of the GENIVI automotive platform. The Neptune 3 UI helps build the UI for Qt in automotive infotainment (IVI) systems.\nThe Qt Interface Framework module contains the tools you need to develop middleware components (APIs, backends, services).\nThe Qt Safe Renderer module, with its UI rendering element, allows developers to achieve the separation of important interpretations from the rest of the system. In the event of failures or emergencies, this makes it possible to display the most crucial elements of the system.\nOther Multi-Platform Frameworks\nA lot of solutions can solve the same tasks as Qt. When choosing between frameworks, the developer takes into account his experience and the needs of the project.\nWe'll take a look at Qt-like solutions and highlight the features of each framework.\n\nCross-platform toolkits are used for embedded software development.\n.NET, or dotNet, is a Microsoft-owned development platform.\r\nKey features of the platform:\r\n\nopen-source;\r\ncompatible with Windows, Linux, and macOS;\r\nC #, F #, or Visual Basic are supported.\r\nVisual Studio IDE;\r\nIt has a large community.\r\n\nThis structure has a wide variety of compilers, libraries, and APIs to develop and compile mobile and game applications easily.\r\nXamarin is an element of the .Net platform, but it can be used independently. Xamarin is a popular tool for mobile application engineering.\r\nThe basic elements of Xamarin:\r\n\nopen-source software;\r\nuses C#;\r\ntools that are natively compiled;\r\nThe Xamarin Universal Library and Planet Xamarin projects provide developers with important information and useful resources.\r\n\nFlutter is a Google GUI framework. It supports the WORA (Write once, run anywhere) principle.\r\nThe main features of the structure are\r\n\nPlatforms such as Windows, Linux, Android, iOS, and others are all supported.\r\nsupports the Dart programming language;\r\ndesign-specific widgets.\r\n\nFrameworks based on Java are lightweight, extensible, and provide easy and quick application development. Java is one of the most popular programming languages.\r\nOn the other hand, the Java language is complex and not very efficient in comparison to other languages.\r\nYou can use GTK+ for creating GUI programs. \r\nThe main features of the widget toolkit:\r\n\nopen-source;\r\nmulti-platform;\r\nC is the language used;\r\nThere are C++, dotNet, and Python bindings available.\r\nGood support for powerful themes;\r\ncompatible with Windows, Linux, and macOS.\r\n\nThe Simple DirectMedia Layer (SDL) is a cross-platform library. \r\nThe main features of SDL:\r\n\nopen-source (under the zlib license);\r\ndepending on the target platform, written in C, C++, or Objective-C;\r\nThere are bindings for other languages available, too.\r\nSupport for multiple windows;\r\n2D graphics that are hardware-accelerated;\r\nIt is widely used for cross-platform multimedia programs (primarily games);\r\nwell-known for its incredible translation features.\r\n\nC++ GUI toolkits\r\n\nC++ is a programming language.\nC++ developers also have a wide choice of C++ GUI frameworks:\n\nwxWidgets is an open-source C++ toolkit. It is mature but rather fast. wxWidgets uses native widgets (where possible) to ensure a natural look and feel; it has a very convenient wxCrafter designer.\nFLTK supports 3D graphics. This framework has a lightweight and simple design.\nSupported by Windows, Linux, iOS, macOS, and Android, JUCE has a large set of audio functionalities.\nUltimate ++ (U++, or Upp) contains GUI, SQL, and other libraries and focuses on efficiency.¬†\n\nThere are a lot of other C++ UI frameworks. Each of them serves different purposes and has advantages. The Qt benefit is the convenience of developing applications for embedded systems.\nWhy Do We Choose Qt for Embedded Systems?\nC++ is one of the most widely used languages for embedded devices.\nIt is a highly stable programming language. That is why C++ applications can run for many years and are well suited to hardware. C++ is a processor-independent language. \nThe C++ data structure is based on algorithms, so it can cope with the challenges that come with developing embedded systems.\nBased on C++, Qt provides everything you need to create software for embedded systems in different industries.¬†\nHaving quite a lot of choices for cross-platform solutions, Integra Sources prefers Qt as a far more suitable framework for embedded systems. Here are some of the Qt qualities that made us choose it.\n\nThe key benefit of Qt is the ability to use the same code for different desktop, mobile, and embedded platforms.\nQt uses a dual licensing model. Integra Sources usually selects an open-source license for projects. Yet, the application design is also available under a Qt commercial license at the client‚Äôs request.\nDetailed API documentation, examples, technical support, and a large community make Qt easy to use.\nThere are many bindings to Qt for other programming languages.\nThe Qt Creator IDE is fast and responsive.\n\nWe can note some insignificant disadvantages of Qt and C++:\n\nThe C++ language is complicated. It is hard for inexperienced designers to learn and use it.\nC++ may have lacked flexibility for web technologies.\nThe speed of cross-platform applications can be slower than native ones.\nCross-compilation may require extra steps.\n\nQt in Our Projects\nThe number of projects in which we use Qt is increasing. Qt allows designers to solve many tasks fast and easily.\n\nProject discussion\nOur responsibility for one of the projects, related to the marketing and entertainment spheres, was to develop an Android application for debugging and configuring the customer's device. \nThe device had cylinder bottles and was equipped with a spray system. It was controlled via BLE. Our developers had to build an application for device management. Also, a video player had to be implemented. \nOnce the player reached a certain timestamp, the application had to send a command to the device to spray a certain fragrance.\r\nFor the application design, we have chosen the C++/Qt/Qml stack. Also, Java code was used. Qt allowed us to build an Android application in the short term. \nThe Qt Connectivity module has accelerated the BLE part‚Äôs development with ready-made Bluetooth solutions. Using the Qt Multimedia module, our specialists have created a video player with different functions.\r\nIntegra Sources is pleased with the experience of using the Qt framework and C/C++. It helps us save time, and customers save money by getting efficient cross-platform applications. \nOur portfolio consists of many projects for embedded systems. \n\nAlso published here","dc:creator":"Andrey Solovev","content":"The Qt Connectivity module has accelerated the BLE part‚Äôs development with ready-made Bluetooth solutions. Using the Qt Multimedia module, our specialists have created a video player with different functions.\nIntegra Sources is pleased with the experience of using the Qt framework and C/C++. It helps us save time, and customers save money by getting efficient cross-platform applications. ","contentSnippet":"The Qt Connectivity module has accelerated the BLE part‚Äôs development with ready-made Bluetooth solutions. Using the Qt Multimedia module, our specialists have created a video player with different functions.\nIntegra Sources is pleased with the experience of using the Qt framework and C/C++. It helps us save time, and customers save money by getting efficient cross-platform applications.","guid":"https://hackernoon.com/qt-for-embedded-development-the-many-pros-and-the-few-cons?source=rss","categories":["qt","embedded-development","frameworks","c++","programming","hackernoon-top-story","coding","programming-languages","hackernoon-es","hackernoon-hi","hackernoon-zh","hackernoon-vi","hackernoon-fr","hackernoon-pt","hackernoon-ja"],"isoDate":"2022-12-12T21:32:20.000Z","from":"https://hackernoon.com/feed"},{"creator":"Daniel Jimenez","title":"Great Options for Generating Passive Income With Ethereum 2.0","link":"https://hackernoon.com/great-options-for-generating-passive-income-with-ethereum-20?source=rss","pubDate":"Mon, 12 Dec 2022 21:43:42 GMT","content:encoded":"<p><strong><em>In this article, we explore custodial, semi-custodial, and non-custodial staking services and review the industry's leading non-custodial protocols for ETH 2.0 staking.</em></strong></p>\n<p>\\\nEthereum (ETH) has enjoyed a remarkable run this past decade - making it one of the top-performing assets for investors. As Crypto enthusiasts and believers in ETH's potential remain steadfast, anticipation builds for continued success far into the future.</p>\n<p>\\\nInvestors looking for maximum returns in the ever-volatile crypto market have found their answer with decentralized finance, commonly referred to as DeFi in the industry. DeFi offers enticing yields and financial flexibility, allowing ETH holders to pursue the most lucrative opportunities.</p>\n<p>\\\nHowever, in light of recent industry developments with FTX, BlockFi, Celsius, and others, DeFi is no longer as appealing to the average investor. Consequently, many are now seeking profitable alternatives that offer a higher degree of security and peace of mind.</p>\n<p>\\\nEthereum 2.0 is spearheading a rapidly expanding industry estimated to be worth $40 billion in 2025, according to <strong><a href=\"https://cointelegraph.com/news/jpmorgan-report-eth2-could-kick-start-40b-staking-industry-by-2025\">JP Morgan data</a></strong>. This presents a golden opportunity for savvy investors seeking passive income streams by staking ETH tokens!</p>\n<p>\\\nFor that reason, Pooled Staking continues to be a top choice for ETH holders as it offers an attractive combination of convenience and accessibility.</p>\n<p>\\\nWith Liquid Staking, ETH holders are in complete control. They can exit their staked position anytime with the simplicity of a token swap.</p>\n<p>\\\nAnd despite the presence of custodial staking services (like Coinbase, for example), the recent events in the industry have propelled non-custodial ETH staking protocols (like SafeStake) to become a major force.</p>\n<h2 id=\"custodialvsnoncustodialethstaking\">Custodial vs Non-Custodial ETH Staking</h2>\n<p>ETH 2.0 staking is a great choice for anyone looking to turn their ETH assets into a passive income stream. As an Eth2 validator, you'll be rewarded with fractions of ETH every ~7 minutes for helping secure the network. These rewards can add up and lead to substantial profits over time!</p>\n<p>\\\nIn the most basic terms, the better a validator performs, the higher the staking yields.</p>\n<p>\\\nTherefore, when selecting a staking provider, it‚Äôs important to consider a number of factors in your decision such as shared rewards, fees, attestation and effectiveness rates, slashing protection and remediation measures, and perhaps most crucial, user private key management.</p>\n<p>\\\nAs ETH becomes increasingly popular, the importance of security for users and investors on all scales cannot be overstated. Protecting these valuable assets is now a priority like never before.</p>\n<p>\\\nWhen considering a third-party staking service, we recommend researching their level of security and examining their key management policy. These are the factors that ultimately determine the safety of your crypto coins.</p>\n<p>\\\n<strong>Types of Third-Party Staking Services</strong></p>\n<p>\\</p>\n<ul>\n<li><strong>Custodial:</strong> A centralized staking service that manages the entire ETH staking process on behalf of the user. They retain ‚Äòcustody‚Äô of their users' private validator keys and withdrawal keys. Risks: severe slashing penalties, reduced overall rewards, increased likelihood of an attack on user keys.</li>\n<li><strong>Semi-Custodial:</strong> Some staking services claim to be non-custodial but still retain custody of user validator keys, but not their withdrawal keys. Risks: severe slashing penalties and reduced overall rewards.</li>\n<li><strong>Non-Custodial:</strong> A staking service that provides streamlined Eth2 validator setup and management, but allows its users to retain both their private validator keys and withdrawal keys.</li>\n</ul>\n<p>\\\nStaking your assets with a custodial service can be risky, as trusting them to keep your private keys exposes you to potential threats. Make sure that the staking provider you select is the right fit for you.</p>\n<p>\\\nIn addition, in centralized custodial services, the risks of a cut-off are even greater, so that their rewards can be severely affected and therefore their capital staked.</p>\n<p>\\\nWhile DIY solutions may incur individual consequences for mistakes, escrow and semi-custodial services can deliver a more significant negative impact on the entire user base if they make errors.</p>\n<p>\\\n <img src=\"https://cdn.hackernoon.com/images/C7LGfLlZs3OY2w0N7r4ePehwKBI2-wv93tau.jpeg\" alt=\"\" /></p>\n<p>ETH 2.0 staking services can be especially vulnerable to security risks if they are centralized. This year, these risks have been highlighted as DeFi protocols experienced devastating losses due to hackers exploiting singular points of vulnerability and stealing users' funds intended for passive income generation.</p>\n<h2 id=\"noncustodialstakingservicesforeth20staking\">Non-Custodial Staking Services (for ETH 2.0 Staking)</h2>\n<p>Custodial and semi-custodial ETH 2.0 Staking options like Rocket Pool, Lido, Stake Fish, and those offered by CEXs (centralized exchanges) are capturing a large share of the market. However, their centralized nature creates an obstacle to true decentralization in this emerging industry.</p>\n<p>\\\nSolutions are now available that ensure the security and reliability of user funds without granting control to any third parties, while promoting decentralization at the same time. Let's explore some groundbreaking developments we are making in this space!</p>\n<h2 id=\"safestake\">SafeStake</h2>\n<p>SafeStake is a decentralized staking infrastructure and protocol that maximizes staker rewards by implementing DVT (Distributed Validator Technology).</p>\n<p>\\\nWith its unique non-custodial approach and commitment to security, this protocol is emerging as a groundbreaking solution in the ETH staking industry. It provides unparalleled levels of protection for users running validators by never taking control of their keys.</p>\n<p>\\\nInstead, SafeStake splits a validator key into shares and distributes them over several nodes run by independent operators to achieve high levels of security and fault tolerance.</p>\n<p>\\\nThe cutting-edge protocol's frameworks&nbsp;are written in Rust, a top programming language in the industry, and maintain optimal performance in the face of transactional demand by preventing memory-related bugs and vulnerabilities.</p>\n<p>\\\nCoupled with the use of HotStuff for underlying consensus, the protocol keeps validators secure and online to perform Ethereum's Proof-of-Stake consensus tasks while minimizing the likelihood of validator cutoff.</p>\n<p>\\\nSafeStake provides a powerful solution for ETH holders, allowing them to maximize rewards while keeping their funds secure. By reducing periods of inactivity and providing protection from malicious withdrawals, SafeStake safeguards your potential profits in the ETH2 staking ecosystem.</p>\n<p>\\\nAdditionally, SafeStake utilizes a threshold signature scheme <strong>without</strong> a trusted dealer. By eliminating the trusted dealer, SafeStake removes another potential point of failure present in some other staking protocols.</p>\n<p>\\\nThis effectively eliminates the possibility that a validator‚Äôs rewards can be stolen.</p>\n<p>\\\nBecause Ethereum‚Äôs Beacon Chain allows multiple deposits for a single validator public key, it does not verify that they all have the same withdrawal credentials.</p>\n<p>\\\nThis can allow a malicious actor that has access to the validator‚Äôs private key to specify the withdrawal credentials for the validator and steal its rewards.</p>\n<p>\\\nJoin the <strong><a href=\"https://parastate.io/safestake\">SafeStake Galileo testnet</a></strong> as a validator or operator to help us test while earning STATE tokens and entering to win ETH prizes!</p>\n<p>\\\n <img src=\"https://cdn.hackernoon.com/images/C7LGfLlZs3OY2w0N7r4ePehwKBI2-eta3txk.jpeg\" alt=\"\" /></p>\n<p>With Distributed Key Generation (DKG), SafeStake arranges the threshold signature scheme validation private key in a way that prevents any single entity from holding it or recreating it.</p>\n<p>\\\nCurrently, the protocol (running on Stage 1 of our testnet dubbed ‚ÄòGalileo‚Äô) allows any user to participate in Ethereum 2.0 staking by depositing 32 ETH and choosing a group of four operators (an Operator Committee) to manage their validator.</p>\n<p>\\\nIn the relatively near future (Q2 2023), we will introduce Stage 2 of the Galileo testnet that will drop the 32 ETH deposit requirement down to 8 ETH, enabling a lower threshold to kick off a Validator on the Beacon chain and the&nbsp;'Pooled Validators‚Äô with derivative tokens.</p>\n<p>\\\n <img src=\"https://cdn.hackernoon.com/images/C7LGfLlZs3OY2w0N7r4ePehwKBI2-pcb3t5z.jpeg\" alt=\"\" /></p>\n<p>An optional feature will allow users to receive sfETH liquid staking tokens in return. These tokens are fully liquid with all of the implied benefits, allowing users to trade or sell them whenever they want while generating passive income while they do hold them.</p>\n<p>\\\nIn addition, DVT technology bolsters the entire Ethereum Proof-of-Stake network by providing an extra layer of decentralization and security to ensure reliable transactions.</p>\n<h2 id=\"bloxstaking\"><strong>Blox Staking</strong></h2>\n<p>Blox Staking is an open-source, non-custodial staking platform for Ethereum 2.0.</p>\n<p>\\\n <img src=\"https://cdn.hackernoon.com/images/C7LGfLlZs3OY2w0N7r4ePehwKBI2-zwc3tt7.jpeg\" alt=\"\" /></p>\n<p>Staking with Blox doesn‚Äôt require key sharing. Blox has no control over their users‚Äô private keys as the protocol never stores validator private or withdrawal keys, ensuring no compromises on custody.</p>\n<p>\\\nInstead, a dedicated remote signer is stored on a cloud account, like AWS. The remote signer, KeyVault, holds the private validator key and executes duties sent from the blockchain via a Blox node.</p>\n<p>\\\nUsers can manage their validators and check a performance monitoring dashboard with the Blox Live desktop app.</p>\n<p>\\\nThe Blox infrastructure ensures relatively consistent connectivity to the blockchain and manages signing requests for each user‚Äôs personal KeyVault instance. This configuration empowers validators to optimize staking returns, minimize risks, and keep complete control over their assets.</p>\n<p>\\\nOne of the major limitations of the protocol is that it only supports a 32 ETH deposit to participate in ETH 2.0 staking.</p>\n<p><img src=\"https://cdn.hackernoon.com/images/C7LGfLlZs3OY2w0N7r4ePehwKBI2-mqd3tp6.jpeg\" alt=\"\" /></p>\n<h2 id=\"oboltech\">Obol Tech</h2>\n<p>Obol is a trust-minimized staking protocol for public blockchain networks based on Distributed Validator Technology (DVT). DVT enables validators to configure clusters with active-active redundancy, an improvement on the widely used configuration of active-passive redundancy.</p>\n<p>\\\nThis is achieved by being able to split a validator key across multiple independently operating instances and utilizing threshold signing to perform consensus duties. You can think of this as enabling your validator to operate like a multi-sig, removing single points of technical failure including:</p>\n<p>\\</p>\n<ul>\n<li>Availability Failure</li>\n<li>Validator Key Compromise</li>\n</ul>\n<p>\\\nDistributed Validator nodes operate together as ‚Äòclusters‚Äô through the inclusion of a distributed validator middleware client called Charon. Charon's job is to coordinate what each validator signs, and reconstitutes the partial signatures into an aggregate signature for the Distributed Validator.</p>\n<p>\\\nDistributed Validator Clusters are multi-operator, fault-tolerant clusters of servers running Ethereum Execution clients, Consensus clients, Distributed Validator clients, and Validator clients.</p>\n<p>\\\nCombined, they enable a subset of servers to fail and recover, without a Distributed Validator on the cluster going offline.</p>\n<p><img src=\"https://cdn.hackernoon.com/images/C7LGfLlZs3OY2w0N7r4ePehwKBI2-18e3tzn.jpeg\" alt=\"\" /></p>\n<p>Obol‚Äôs mission is to evolve DVT by offering a protocol that enables a sustainable public good by increasing the security and resilience of public blockchain networks.</p>\n<p>\\\nThe network is designed to offer developers, institutions and individuals, including, custodians, DeFi protocols, DAOs, financial institutions, and home-based validators, a scalable layer to configure, monitor, and deploy their own multi-carrier participation clusters without the need to coordinate multiple carriers or manage complex infrastructure configurations.</p>\n<h2 id=\"conclusion\"><strong>Conclusion</strong></h2>\n<p>Ethereum 2.0 staking services offer a variety of different approaches depending on how their developers have integrated users into the product experience when building out ideas and offering support.</p>\n<p>\\\nSecurity is key when navigating today's billion-dollar ETH staking industry and its plethora of staking options. Cryptocurrency provides plenty of opportunities for financial freedom but also comes with its own unique set of risks.</p>\n<p>\\\nWithout taking the necessary precautions to protect your assets, it's easy to get left behind in this volatile market. Safeguard yourself by ensuring nobody else has access to those precious private keys!</p>","content:encodedSnippet":"In this article, we explore custodial, semi-custodial, and non-custodial staking services and review the industry's leading non-custodial protocols for ETH 2.0 staking.\n\\\nEthereum (ETH) has enjoyed a remarkable run this past decade - making it one of the top-performing assets for investors. As Crypto enthusiasts and believers in ETH's potential remain steadfast, anticipation builds for continued success far into the future.\n\\\nInvestors looking for maximum returns in the ever-volatile crypto market have found their answer with decentralized finance, commonly referred to as DeFi in the industry. DeFi offers enticing yields and financial flexibility, allowing ETH holders to pursue the most lucrative opportunities.\n\\\nHowever, in light of recent industry developments with FTX, BlockFi, Celsius, and others, DeFi is no longer as appealing to the average investor. Consequently, many are now seeking profitable alternatives that offer a higher degree of security and peace of mind.\n\\\nEthereum 2.0 is spearheading a rapidly expanding industry estimated to be worth $40 billion in 2025, according to JP Morgan data. This presents a golden opportunity for savvy investors seeking passive income streams by staking ETH tokens!\n\\\nFor that reason, Pooled Staking continues to be a top choice for ETH holders as it offers an attractive combination of convenience and accessibility.\n\\\nWith Liquid Staking, ETH holders are in complete control. They can exit their staked position anytime with the simplicity of a token swap.\n\\\nAnd despite the presence of custodial staking services (like Coinbase, for example), the recent events in the industry have propelled non-custodial ETH staking protocols (like SafeStake) to become a major force.\nCustodial vs Non-Custodial ETH Staking\nETH 2.0 staking is a great choice for anyone looking to turn their ETH assets into a passive income stream. As an Eth2 validator, you'll be rewarded with fractions of ETH every ~7 minutes for helping secure the network. These rewards can add up and lead to substantial profits over time!\n\\\nIn the most basic terms, the better a validator performs, the higher the staking yields.\n\\\nTherefore, when selecting a staking provider, it‚Äôs important to consider a number of factors in your decision such as shared rewards, fees, attestation and effectiveness rates, slashing protection and remediation measures, and perhaps most crucial, user private key management.\n\\\nAs ETH becomes increasingly popular, the importance of security for users and investors on all scales cannot be overstated. Protecting these valuable assets is now a priority like never before.\n\\\nWhen considering a third-party staking service, we recommend researching their level of security and examining their key management policy. These are the factors that ultimately determine the safety of your crypto coins.\n\\\nTypes of Third-Party Staking Services\n\\\n\nCustodial: A centralized staking service that manages the entire ETH staking process on behalf of the user. They retain ‚Äòcustody‚Äô of their users' private validator keys and withdrawal keys. Risks: severe slashing penalties, reduced overall rewards, increased likelihood of an attack on user keys.\nSemi-Custodial: Some staking services claim to be non-custodial but still retain custody of user validator keys, but not their withdrawal keys. Risks: severe slashing penalties and reduced overall rewards.\nNon-Custodial: A staking service that provides streamlined Eth2 validator setup and management, but allows its users to retain both their private validator keys and withdrawal keys.\n\\\nStaking your assets with a custodial service can be risky, as trusting them to keep your private keys exposes you to potential threats. Make sure that the staking provider you select is the right fit for you.\n\\\nIn addition, in centralized custodial services, the risks of a cut-off are even greater, so that their rewards can be severely affected and therefore their capital staked.\n\\\nWhile DIY solutions may incur individual consequences for mistakes, escrow and semi-custodial services can deliver a more significant negative impact on the entire user base if they make errors.\n\\\n \nETH 2.0 staking services can be especially vulnerable to security risks if they are centralized. This year, these risks have been highlighted as DeFi protocols experienced devastating losses due to hackers exploiting singular points of vulnerability and stealing users' funds intended for passive income generation.\nNon-Custodial Staking Services (for ETH 2.0 Staking)\nCustodial and semi-custodial ETH 2.0 Staking options like Rocket Pool, Lido, Stake Fish, and those offered by CEXs (centralized exchanges) are capturing a large share of the market. However, their centralized nature creates an obstacle to true decentralization in this emerging industry.\n\\\nSolutions are now available that ensure the security and reliability of user funds without granting control to any third parties, while promoting decentralization at the same time. Let's explore some groundbreaking developments we are making in this space!\nSafeStake\nSafeStake is a decentralized staking infrastructure and protocol that maximizes staker rewards by implementing DVT (Distributed Validator Technology).\n\\\nWith its unique non-custodial approach and commitment to security, this protocol is emerging as a groundbreaking solution in the ETH staking industry. It provides unparalleled levels of protection for users running validators by never taking control of their keys.\n\\\nInstead, SafeStake splits a validator key into shares and distributes them over several nodes run by independent operators to achieve high levels of security and fault tolerance.\n\\\nThe cutting-edge protocol's frameworks¬†are written in Rust, a top programming language in the industry, and maintain optimal performance in the face of transactional demand by preventing memory-related bugs and vulnerabilities.\n\\\nCoupled with the use of HotStuff for underlying consensus, the protocol keeps validators secure and online to perform Ethereum's Proof-of-Stake consensus tasks while minimizing the likelihood of validator cutoff.\n\\\nSafeStake provides a powerful solution for ETH holders, allowing them to maximize rewards while keeping their funds secure. By reducing periods of inactivity and providing protection from malicious withdrawals, SafeStake safeguards your potential profits in the ETH2 staking ecosystem.\n\\\nAdditionally, SafeStake utilizes a threshold signature scheme without a trusted dealer. By eliminating the trusted dealer, SafeStake removes another potential point of failure present in some other staking protocols.\n\\\nThis effectively eliminates the possibility that a validator‚Äôs rewards can be stolen.\n\\\nBecause Ethereum‚Äôs Beacon Chain allows multiple deposits for a single validator public key, it does not verify that they all have the same withdrawal credentials.\n\\\nThis can allow a malicious actor that has access to the validator‚Äôs private key to specify the withdrawal credentials for the validator and steal its rewards.\n\\\nJoin the SafeStake Galileo testnet as a validator or operator to help us test while earning STATE tokens and entering to win ETH prizes!\n\\\n \nWith Distributed Key Generation (DKG), SafeStake arranges the threshold signature scheme validation private key in a way that prevents any single entity from holding it or recreating it.\n\\\nCurrently, the protocol (running on Stage 1 of our testnet dubbed ‚ÄòGalileo‚Äô) allows any user to participate in Ethereum 2.0 staking by depositing 32 ETH and choosing a group of four operators (an Operator Committee) to manage their validator.\n\\\nIn the relatively near future (Q2 2023), we will introduce Stage 2 of the Galileo testnet that will drop the 32 ETH deposit requirement down to 8 ETH, enabling a lower threshold to kick off a Validator on the Beacon chain and the¬†'Pooled Validators‚Äô with derivative tokens.\n\\\n \nAn optional feature will allow users to receive sfETH liquid staking tokens in return. These tokens are fully liquid with all of the implied benefits, allowing users to trade or sell them whenever they want while generating passive income while they do hold them.\n\\\nIn addition, DVT technology bolsters the entire Ethereum Proof-of-Stake network by providing an extra layer of decentralization and security to ensure reliable transactions.\nBlox Staking\nBlox Staking is an open-source, non-custodial staking platform for Ethereum 2.0.\n\\\n \nStaking with Blox doesn‚Äôt require key sharing. Blox has no control over their users‚Äô private keys as the protocol never stores validator private or withdrawal keys, ensuring no compromises on custody.\n\\\nInstead, a dedicated remote signer is stored on a cloud account, like AWS. The remote signer, KeyVault, holds the private validator key and executes duties sent from the blockchain via a Blox node.\n\\\nUsers can manage their validators and check a performance monitoring dashboard with the Blox Live desktop app.\n\\\nThe Blox infrastructure ensures relatively consistent connectivity to the blockchain and manages signing requests for each user‚Äôs personal KeyVault instance. This configuration empowers validators to optimize staking returns, minimize risks, and keep complete control over their assets.\n\\\nOne of the major limitations of the protocol is that it only supports a 32 ETH deposit to participate in ETH 2.0 staking.\n\nObol Tech\nObol is a trust-minimized staking protocol for public blockchain networks based on Distributed Validator Technology (DVT). DVT enables validators to configure clusters with active-active redundancy, an improvement on the widely used configuration of active-passive redundancy.\n\\\nThis is achieved by being able to split a validator key across multiple independently operating instances and utilizing threshold signing to perform consensus duties. You can think of this as enabling your validator to operate like a multi-sig, removing single points of technical failure including:\n\\\n\nAvailability Failure\nValidator Key Compromise\n\\\nDistributed Validator nodes operate together as ‚Äòclusters‚Äô through the inclusion of a distributed validator middleware client called Charon. Charon's job is to coordinate what each validator signs, and reconstitutes the partial signatures into an aggregate signature for the Distributed Validator.\n\\\nDistributed Validator Clusters are multi-operator, fault-tolerant clusters of servers running Ethereum Execution clients, Consensus clients, Distributed Validator clients, and Validator clients.\n\\\nCombined, they enable a subset of servers to fail and recover, without a Distributed Validator on the cluster going offline.\n\nObol‚Äôs mission is to evolve DVT by offering a protocol that enables a sustainable public good by increasing the security and resilience of public blockchain networks.\n\\\nThe network is designed to offer developers, institutions and individuals, including, custodians, DeFi protocols, DAOs, financial institutions, and home-based validators, a scalable layer to configure, monitor, and deploy their own multi-carrier participation clusters without the need to coordinate multiple carriers or manage complex infrastructure configurations.\nConclusion\nEthereum 2.0 staking services offer a variety of different approaches depending on how their developers have integrated users into the product experience when building out ideas and offering support.\n\\\nSecurity is key when navigating today's billion-dollar ETH staking industry and its plethora of staking options. Cryptocurrency provides plenty of opportunities for financial freedom but also comes with its own unique set of risks.\n\\\nWithout taking the necessary precautions to protect your assets, it's easy to get left behind in this volatile market. Safeguard yourself by ensuring nobody else has access to those precious private keys!","dc:creator":"Daniel Jimenez","content":"ETH 2.0 is spearheading a rapidly expanding industry estimated to be worth $40 billion in 2025. Pooled Staking continues to be a top choice for ETH holders as it offers an attractive combination of convenience and accessibility. Liquid Staking is a great choice for anyone looking to turn their ETH assets into a passive income stream. When selecting a third-party staking provider, it‚Äôs important to consider a number of factors in your decision such as shared rewards, fees, attestation and effectiveness rates, slashing protection and remediation measures.","contentSnippet":"ETH 2.0 is spearheading a rapidly expanding industry estimated to be worth $40 billion in 2025. Pooled Staking continues to be a top choice for ETH holders as it offers an attractive combination of convenience and accessibility. Liquid Staking is a great choice for anyone looking to turn their ETH assets into a passive income stream. When selecting a third-party staking provider, it‚Äôs important to consider a number of factors in your decision such as shared rewards, fees, attestation and effectiveness rates, slashing protection and remediation measures.","guid":"https://hackernoon.com/great-options-for-generating-passive-income-with-ethereum-20?source=rss","categories":["ethereum","blockchain","safestake","parastate","distributed-systems","passive-income","secure-eth2-staking","staking-rewards"],"isoDate":"2022-12-12T21:43:42.000Z","from":"https://hackernoon.com/feed"},{"creator":"Olga Kiba","title":"Why It is Important to Monitor Code Quality ","link":"https://hackernoon.com/why-it-is-important-to-monitor-code-quality?source=rss","pubDate":"Mon, 12 Dec 2022 21:44:26 GMT","content:encoded":"<p>Usually, when we are working on a particular software product, the quality of the code is not our first concern. Performance, functionality, the stability of its operation, etc. are much more important to us.</p>\n<p>\\\nBut is the quality of the code a factor that positively impacts the above indicators? My answer is yes because such a code is directly connected with the following qualities:</p>\n<p>\\</p>\n<ul>\n<li><p>readability - the ability to look at the code and quickly understand the implemented algorithm, and evaluate how the program will behave in a particular case.</p>\n<p>\\</p></li>\n<li><p>controllability - the ability to make the required amendments to the code in the shortest possible time, while avoiding various unpleasant predictable and unpredictable consequences.</p>\n<p>\\</p></li>\n</ul>\n<p>Code is a book that is written by one author and is supplemented by other authors. It will be passed through different people and what the reader gets out of this book will depend on how the code is written. <strong>So it is pretty important, isn‚Äôt it?</strong></p>\n<h2 id=\"thingsthatdeterminecodequality\">Things that determine code quality</h2>\n<h3 id=\"writingsequence\">Writing sequence</h3>\n<p>As we illustrated above, code is a book and as such, it should be written in a linear style.</p>\n<p>\\</p>\n<blockquote>\n  <p>Linear code - code that can be read from top to bottom without having to go back to previously read code.</p>\n</blockquote>\n<p>\\\nFor example, a perfectly linear snippet:</p>\n<pre><code class=\"javascript language-javascript\">{\n  doFirst();\n  doSecond();\n  doThird();\n}\n</code></pre>\n<p>\\\nAnd not linear at all:</p>\n<pre><code class=\"javascript language-javascript\">{\n  if (something) {\n      doFirst();\n  } else {\n      doSecond();\n      if (whatever) {\n          if (a) {\n              if (b) {\n                doThird();\n              }\n          }\n      }\n  }\n}\n</code></pre>\n<p>\\\nLet‚Äôs try to fix it. Here we can move complex sub-scripts into separate functions:</p>\n<pre><code class=\"javascript language-javascript\">{\n  const doOnWhatever = () =&gt; {\n      if (a) {\n          if (b) {\n            doThird();\n          }\n      }\n  }\n\n  if (something) {\n      doFirst();\n  } else {\n      doSecond();\n      if (whatever) {\n          doOnWhatever();\n      }\n  }\n}\n</code></pre>\n<p>\\\nFirst of all, you need to present your logic as a flowchart as simply as possible:</p>\n<p><img src=\"https://cdn.hackernoon.com/images/-qn93paz.png\" alt=\"Image 1. Simple algorithm example\" /></p>\n<p>Carefully go through this scheme and try to transfer it to the code, avoiding very large nesting.</p>\n<p>There are some tips on how to handle large nesting:</p>\n<p>\\</p>\n<ol>\n<li>Using break, continue, return or throw to get rid of the else block:</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   {\n     doOnWhatever() {\n         if (a) {\n             if (b) {\n                 doThird();\n             }\n         }\n     }\n\n     if (something) {\n         doFirst();\n         return;\n     }\n\n     doSecond();\n\n     if (whatever) {\n         doOnWhatever();\n     }\n   }\n</code></pre>\n<p>\\\n   It would be incorrect to conclude that you should never use the else statement at all. Firstly, the context does not always allow you to put ‚Äòbreak, continue, return or throw‚Äô. Secondly, the value of this may not be as obvious as in the example above, and a simple ‚Äòelse‚Äô will look much simpler and clearer than anything else. And finally, there are certain costs when using multiple returns in functions, because of which many generally regard this approach as an anti-pattern.</p>\n<p>\\</p>\n<ol start=\"2\">\n<li>Combining nested if-s:</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   {\n     doOnWhatever() {\n         if (a &amp;&amp; b) { // here we combined \"a\" and \"b\" conditions\n            doThird();\n         }\n     }\n\n     if (something) {\n         doFirst();\n         return;\n     }\n\n     doSecond();\n\n     if (whatever) {\n         doOnWhatever();\n     }\n   }\n</code></pre>\n<p>\\</p>\n<ol start=\"3\">\n<li>Using the ternary operator (a? b: c) instead of if:</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   let something;\n   if (a) {\n       something = b;\n   } else {\n       something = c;\n   }\n\n   const something = a ? b : c;\n\n   const something = a ? b : aa ? c : d;\n</code></pre>\n<p>\\</p>\n<ol start=\"4\">\n<li>Eliminating code duplication:</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   const a = new Object();\n   doFirst(a);\n   doSecond(a);\n\n   const b = new Object();\n   doFirst(b);\n   doSecond(b);\n\n\n\n   const workWithObject(x) {\n     doFirst(x);\n     doSecond(x);\n   }\n\n   workWithObject(new Object());\n   workWithObject(new Object());\n</code></pre>\n<p>\\</p>\n<ol start=\"5\">\n<li>Simplifying code:</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   if (obj != null &amp;&amp; obj != undefined &amp;&amp; obj.something != null &amp;&amp; obj.something != undefined &amp;&amp; obj.something!= '') {\n       // do something\n   }\n\n\n   if (obj &amp;&amp; obj.something) {\n       // do something\n   }\n</code></pre>\n<p>The fact is that thanks to the implicit cast to boolean, the if (obj) {} check will filter out:  false, null, undefined, 0, ‚Äò‚Äò.</p>\n<p>\\</p>\n<ol start=\"6\">\n<li>Not creating variables that you can work without:</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   ...\n   const sum = getSum();\n   const increasedSum = sum + 1;\n   doSomething(increasedSum);\n   ...\n\n   doSomething(getSum() + 1);\n</code></pre>\n<p>\\\n   This situation is also called \"creating a variable to create a variable\". Variables should help readers understand code quickly and not slow them down forcing them to read unnecessary text.</p>\n<p>\\\n   Here are examples of necessary naming:</p>\n<pre><code class=\"javascript language-javascript\">   const PHONE_NUMBER_REGEX = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/\n   const str.match(phoneNumberRegex) // this helps us to understand that we are looking for a phone number\n\n   const LUCK_ERROR = 10%;\n   const result = luckPercent - LUCK_ERROR // this helps us to avoid working with magical numbers\n</code></pre>\n<p>\\</p>\n<ol start=\"7\">\n<li><p>Using encapsulation</p>\n<p>Creating private data through closure:</p></li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   const createCounter = () =&gt; { \n     let count = 0;\n     return ({\n       click: () =&gt; count += 1,\n       getCount: () =&gt; count\n     });\n   };\n   const counter = createCounter();\n   counter.click();\n   counter.click();\n   counter.click();\n   console.log(\n     counter.getCount()\n   );\n</code></pre>\n<p>Here we used a method that has access to private data inside the scope (lexical environment) of the function. These functions and methods have reference-based access to variables within the function, even after the function has been completed. These references are live, so if the state changes in the inner function, the changes are propagated to each privileged function. In other words, when we call counter.click(), it changes the value that counter.getCount() sees.</p>\n<p>\\\n   <strong>Creating private data through private fields:</strong></p>\n<pre><code class=\"javascript language-javascript\">   class Counter {\n     #count = 0\n\n     click () {\n       this.#count += 1;\n     }\n     getCount () {\n       return this.#count.toLocaleString()\n     }\n   }\n\n   const myCounter = new Counter();\n   myCounter.click();\n   myCounter.click();\n   myCounter.click();\n   console.log(\n     myCounter.getCount()\n   );\n</code></pre>\n<p>\\\n   New class fields are much better than underscores because they don't rely on convention but provide true encapsulation.</p>\n<h3 id=\"naming\">Naming</h3>\n<ol>\n<li>Using camelCase notation:</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   const getSomeValue = () =&gt; {};\n</code></pre>\n<ol start=\"2\">\n<li>Not using transliteration if your company/project language not English:</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   const tovar = {} // example from Russian: tovar = product\n</code></pre>\n<ol start=\"3\">\n<li>Avoiding of using abstract naming:</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   const getProductNames = products.map(item =&gt; item.name) // less readable code\n\n   const getProductNames = products.map(product =&gt; product.name) // more readable code\n</code></pre>\n<ol start=\"4\">\n<li>Naming constants in capital letters:</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   const BANNER_WIDTH = 300\n</code></pre>\n<p>Typically, uppercase letters for naming constants or variables are used when the value is known before the script is executed and is written directly to the code, for example:</p>\n<pre><code class=\"javascript language-javascript\">   const BIRTHDAY = '4/18/1982';\n</code></pre>\n<p>Use capital letters If the variable is evaluated during script execution, then lower case is used:</p>\n<pre><code class=\"javascript language-javascript\">   const age = someCode(BIRTHDAY);\n</code></pre>\n<ol start=\"5\">\n<li>Calling variables speaking names:</li>\n</ol>\n<pre><code class=\"javascript language-javascript\">   const getProducts = () =&gt; {};\n   const addProductToCart = () =&gt; {};\n</code></pre>\n<h3 id=\"declaratively\">Declaratively</h3>\n<p>The declarative coding style has a number of advantages over the imperative style:</p>\n<ul>\n<li>code is easier to read</li>\n<li>code is easier to maintain</li>\n<li>complex constructs are hidden behind methods and abstractions</li>\n</ul>\n<p>Example of comparing imperative code and declarative:</p>\n<pre><code class=\"javascript language-javascript\">for(let i = 0; i &lt; textArr.length; i++) {\n  if(arr[i] === 'Text to console log') {\n    console.log(arr[i])\n  }\n} // imperative code\n\ntextArr.filter(text =&gt; text === 'Text to console log').map(text =&gt; console.log(text)); // declarative code\n</code></pre>\n<h3 id=\"modularity\">Modularity</h3>\n<p>A good practice is to split code into modules. Such code increases readability by separating the code into abstractions so it helps to hide hard-to-read code. Also, code is easier to test and easier to find errors accordingly.</p>\n<p>\\\nSo let‚Äôs see how to implement it by using the previous code:</p>\n<pre><code class=\"javascript language-javascript\">const createCounter = () =&gt; { \n  let count = 0;\n  return ({\n    click: () =&gt; count += 1,\n    getCount: () =&gt; count\n  });\n}; // this part of code can be moved into separated file such as helper.ts\n\nconst counter = createCounter(); // this can be used inplace where it's needed because it's not nesessary to see how counter was actually created\n</code></pre>\n<p>\\\nPeople don‚Äôt really need to see the whole code controlling a porcess and it‚Äôs quite fine to hide it behind a speaking name. Of course, sometimes you might have to supplement a functionality or see how it works. To do this you can freely go to the exact file to investigate it, but it happens not that often so no needs to keep it right in place of usage.</p>\n<h3 id=\"codestyle\">Code style</h3>\n<p>It is a set of rules/projects/conventions that developers must follow. It can be described somewhere, for example, wiki section in Gitlab with examples of what to do and not to do.</p>\n<p>\\\nHere is an example of how I implement it in the project:</p>\n<p><img src=\"https://cdn.hackernoon.com/images/-kp93ngi.png\" alt=\"\" /></p>\n<p><img src=\"https://cdn.hackernoon.com/images/-vja3ny3.png\" alt=\"Image 2. Wiki example\" /></p>\n<p>\\\nMoreover, you can take a ready-made style code and implement it in your project, for example, the Airbnb code style.</p>\n<h3 id=\"repository\">Repository</h3>\n<p>It is a successful repository management model when there are two main branches: develop, master and the rest are temporary branches. </p>\n<p>\\\nTemporary branches should contain a type of change such as release, feature, bugfix, or hotfix and task ticket number:</p>\n<pre><code class=\"javascript language-javascript\">fetaure/123\nbugfix/321\n</code></pre>\n<p>\\\nWhen we start a new task, we go off a develop-branch. After passing the code review, we merge it back into the develop. Then, we collect releases from the develop branch link it to the release branch, and release it all to the master.</p>\n<p>\\\nWhat message should be sent when we commit some changes? ‚Äòfixed a bug‚Äò, ‚Äòadded a feature‚Äò - are not good examples of messages. </p>\n<p>\\\nA quality message is when it contains a capacious statement of the essence of change.</p>\n<pre><code class=\"javascript language-javascript\">\"added a banner component\" // - commit message example\n</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Summing up the article, here are the following tips that you should follow for writing quality code:</p>\n<ul>\n<li>keep your code linear</li>\n<li>reduce nesting</li>\n<li>use speaking names</li>\n<li>strive for declaratively and modularity</li>\n<li>get code style</li>\n<li>pay attention to git flow and commit messages</li>\n<li>use linters, formatters as helpers in your project</li>\n</ul>\n<p>\\\n\\</p>","content:encodedSnippet":"Usually, when we are working on a particular software product, the quality of the code is not our first concern. Performance, functionality, the stability of its operation, etc. are much more important to us.\n\\\nBut is the quality of the code a factor that positively impacts the above indicators? My answer is yes because such a code is directly connected with the following qualities:\n\\\n\n\nreadability - the ability to look at the code and quickly understand the implemented algorithm, and evaluate how the program will behave in a particular case.\n\\\ncontrollability - the ability to make the required amendments to the code in the shortest possible time, while avoiding various unpleasant predictable and unpredictable consequences.\n\\\nCode is a book that is written by one author and is supplemented by other authors. It will be passed through different people and what the reader gets out of this book will depend on how the code is written. So it is pretty important, isn‚Äôt it?\nThings that determine code quality\nWriting sequence\nAs we illustrated above, code is a book and as such, it should be written in a linear style.\n\\\n\n  \nLinear code - code that can be read from top to bottom without having to go back to previously read code.\n\\\nFor example, a perfectly linear snippet:\n{\n  doFirst();\n  doSecond();\n  doThird();\n}\n\n\\\nAnd not linear at all:\n{\n  if (something) {\n      doFirst();\n  } else {\n      doSecond();\n      if (whatever) {\n          if (a) {\n              if (b) {\n                doThird();\n              }\n          }\n      }\n  }\n}\n\n\\\nLet‚Äôs try to fix it. Here we can move complex sub-scripts into separate functions:\n{\n  const doOnWhatever = () => {\n      if (a) {\n          if (b) {\n            doThird();\n          }\n      }\n  }\n\n  if (something) {\n      doFirst();\n  } else {\n      doSecond();\n      if (whatever) {\n          doOnWhatever();\n      }\n  }\n}\n\n\\\nFirst of all, you need to present your logic as a flowchart as simply as possible:\n\nCarefully go through this scheme and try to transfer it to the code, avoiding very large nesting.\nThere are some tips on how to handle large nesting:\n\\\n\nUsing break, continue, return or throw to get rid of the else block:\n   {\n     doOnWhatever() {\n         if (a) {\n             if (b) {\n                 doThird();\n             }\n         }\n     }\n\n     if (something) {\n         doFirst();\n         return;\n     }\n\n     doSecond();\n\n     if (whatever) {\n         doOnWhatever();\n     }\n   }\n\n\\\n   It would be incorrect to conclude that you should never use the else statement at all. Firstly, the context does not always allow you to put ‚Äòbreak, continue, return or throw‚Äô. Secondly, the value of this may not be as obvious as in the example above, and a simple ‚Äòelse‚Äô will look much simpler and clearer than anything else. And finally, there are certain costs when using multiple returns in functions, because of which many generally regard this approach as an anti-pattern.\n\\\n\nCombining nested if-s:\n   {\n     doOnWhatever() {\n         if (a && b) { // here we combined \"a\" and \"b\" conditions\n            doThird();\n         }\n     }\n\n     if (something) {\n         doFirst();\n         return;\n     }\n\n     doSecond();\n\n     if (whatever) {\n         doOnWhatever();\n     }\n   }\n\n\\\n\nUsing the ternary operator (a? b: c) instead of if:\n   let something;\n   if (a) {\n       something = b;\n   } else {\n       something = c;\n   }\n\n   const something = a ? b : c;\n\n   const something = a ? b : aa ? c : d;\n\n\\\n\nEliminating code duplication:\n   const a = new Object();\n   doFirst(a);\n   doSecond(a);\n\n   const b = new Object();\n   doFirst(b);\n   doSecond(b);\n\n\n\n   const workWithObject(x) {\n     doFirst(x);\n     doSecond(x);\n   }\n\n   workWithObject(new Object());\n   workWithObject(new Object());\n\n\\\n\nSimplifying code:\n   if (obj != null && obj != undefined && obj.something != null && obj.something != undefined && obj.something!= '') {\n       // do something\n   }\n\n\n   if (obj && obj.something) {\n       // do something\n   }\n\nThe fact is that thanks to the implicit cast to boolean, the if (obj) {} check will filter out:  false, null, undefined, 0, ‚Äò‚Äò.\n\\\n\nNot creating variables that you can work without:\n   ...\n   const sum = getSum();\n   const increasedSum = sum + 1;\n   doSomething(increasedSum);\n   ...\n\n   doSomething(getSum() + 1);\n\n\\\n   This situation is also called \"creating a variable to create a variable\". Variables should help readers understand code quickly and not slow them down forcing them to read unnecessary text.\n\\\n   Here are examples of necessary naming:\n   const PHONE_NUMBER_REGEX = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/\n   const str.match(phoneNumberRegex) // this helps us to understand that we are looking for a phone number\n\n   const LUCK_ERROR = 10%;\n   const result = luckPercent - LUCK_ERROR // this helps us to avoid working with magical numbers\n\n\\\n\n\nUsing encapsulation\nCreating private data through closure:\n\n\n   const createCounter = () => { \n     let count = 0;\n     return ({\n       click: () => count += 1,\n       getCount: () => count\n     });\n   };\n   const counter = createCounter();\n   counter.click();\n   counter.click();\n   counter.click();\n   console.log(\n     counter.getCount()\n   );\n\nHere we used a method that has access to private data inside the scope (lexical environment) of the function. These functions and methods have reference-based access to variables within the function, even after the function has been completed. These references are live, so if the state changes in the inner function, the changes are propagated to each privileged function. In other words, when we call counter.click(), it changes the value that counter.getCount() sees.\n\\\n   Creating private data through private fields:\n   class Counter {\n     #count = 0\n\n     click () {\n       this.#count += 1;\n     }\n     getCount () {\n       return this.#count.toLocaleString()\n     }\n   }\n\n   const myCounter = new Counter();\n   myCounter.click();\n   myCounter.click();\n   myCounter.click();\n   console.log(\n     myCounter.getCount()\n   );\n\n\\\n   New class fields are much better than underscores because they don't rely on convention but provide true encapsulation.\nNaming\nUsing camelCase notation:\n   const getSomeValue = () => {};\n\nNot using transliteration if your company/project language not English:\n   const tovar = {} // example from Russian: tovar = product\n\nAvoiding of using abstract naming:\n   const getProductNames = products.map(item => item.name) // less readable code\n\n   const getProductNames = products.map(product => product.name) // more readable code\n\nNaming constants in capital letters:\n   const BANNER_WIDTH = 300\n\nTypically, uppercase letters for naming constants or variables are used when the value is known before the script is executed and is written directly to the code, for example:\n   const BIRTHDAY = '4/18/1982';\n\nUse capital letters If the variable is evaluated during script execution, then lower case is used:\n   const age = someCode(BIRTHDAY);\n\nCalling variables speaking names:\n   const getProducts = () => {};\n   const addProductToCart = () => {};\n\nDeclaratively\nThe declarative coding style has a number of advantages over the imperative style:\ncode is easier to read\ncode is easier to maintain\ncomplex constructs are hidden behind methods and abstractions\nExample of comparing imperative code and declarative:\nfor(let i = 0; i < textArr.length; i++) {\n  if(arr[i] === 'Text to console log') {\n    console.log(arr[i])\n  }\n} // imperative code\n\ntextArr.filter(text => text === 'Text to console log').map(text => console.log(text)); // declarative code\n\nModularity\nA good practice is to split code into modules. Such code increases readability by separating the code into abstractions so it helps to hide hard-to-read code. Also, code is easier to test and easier to find errors accordingly.\n\\\nSo let‚Äôs see how to implement it by using the previous code:\nconst createCounter = () => { \n  let count = 0;\n  return ({\n    click: () => count += 1,\n    getCount: () => count\n  });\n}; // this part of code can be moved into separated file such as helper.ts\n\nconst counter = createCounter(); // this can be used inplace where it's needed because it's not nesessary to see how counter was actually created\n\n\\\nPeople don‚Äôt really need to see the whole code controlling a porcess and it‚Äôs quite fine to hide it behind a speaking name. Of course, sometimes you might have to supplement a functionality or see how it works. To do this you can freely go to the exact file to investigate it, but it happens not that often so no needs to keep it right in place of usage.\nCode style\nIt is a set of rules/projects/conventions that developers must follow. It can be described somewhere, for example, wiki section in Gitlab with examples of what to do and not to do.\n\\\nHere is an example of how I implement it in the project:\n\n\n\\\nMoreover, you can take a ready-made style code and implement it in your project, for example, the Airbnb code style.\nRepository\nIt is a successful repository management model when there are two main branches: develop, master and the rest are temporary branches. \n\\\nTemporary branches should contain a type of change such as release, feature, bugfix, or hotfix and task ticket number:\nfetaure/123\nbugfix/321\n\n\\\nWhen we start a new task, we go off a develop-branch. After passing the code review, we merge it back into the develop. Then, we collect releases from the develop branch link it to the release branch, and release it all to the master.\n\\\nWhat message should be sent when we commit some changes? ‚Äòfixed a bug‚Äò, ‚Äòadded a feature‚Äò - are not good examples of messages. \n\\\nA quality message is when it contains a capacious statement of the essence of change.\n\"added a banner component\" // - commit message example\n\nConclusion\nSumming up the article, here are the following tips that you should follow for writing quality code:\nkeep your code linear\nreduce nesting\nuse speaking names\nstrive for declaratively and modularity\nget code style\npay attention to git flow and commit messages\nuse linters, formatters as helpers in your project\n\\\n\\","dc:creator":"Olga Kiba","content":"Quality of code is directly connected with the following qualities: readability, controllability, readability and controlability. Linear code - code that can be read from top to bottom without having to go back to previously read code. Simple algorithm example: doOnWhatever; doThird(); doThird; doSecond; doWhatever;. DoThird: doThird(); doFourth: doSomething; doSomething: doWhatever. doWhatever. DoSomething: If (something) doFirst;. If (whatever) doSomething? doSomething. If something else is something, doSomething is something? If something is something it is something else, doIt is something. If it is a function, it is not a function it will be a function","contentSnippet":"Quality of code is directly connected with the following qualities: readability, controllability, readability and controlability. Linear code - code that can be read from top to bottom without having to go back to previously read code. Simple algorithm example: doOnWhatever; doThird(); doThird; doSecond; doWhatever;. DoThird: doThird(); doFourth: doSomething; doSomething: doWhatever. doWhatever. DoSomething: If (something) doFirst;. If (whatever) doSomething? doSomething. If something else is something, doSomething is something? If something is something it is something else, doIt is something. If it is a function, it is not a function it will be a function","guid":"https://hackernoon.com/why-it-is-important-to-monitor-code-quality?source=rss","categories":["code-quality","code","coding","coding-skills","programming","optimization","team-productivity","teamwork"],"isoDate":"2022-12-12T21:44:26.000Z","from":"https://hackernoon.com/feed"},{"creator":"annalooksup","title":"Weekly Web3 Brand Tracker: Hershey's in the Metaverse and More","link":"https://hackernoon.com/weekly-web3-brand-tracker-hersheys-in-the-metaverse-and-more?source=rss","pubDate":"Mon, 12 Dec 2022 21:52:41 GMT","content:encoded":"<p>\\\nüôå Hi web3 folks!</p>\n<p>\\\n<strong>‚åöÔ∏èTimex launches Bored Ape watches</strong></p>\n<p>The luxury watchmaker has partnered with Bored Ape Yacht Club (BAYC) to enable BAYC holders to showcase their NFTs on their wrists.&nbsp;<strong><a href=\"https://www.business2community.com/nft-news/timex-launches-bored-ape-watches-allows-holders-to-showcase-nfts-in-their-wrist-02581433\">More</a></strong>.</p>\n<p>\\\n<strong>üç´ Hershey launches chocolate-themed metaverse experience</strong></p>\n<p>The chocolate brand‚Äôs Philippines and India arms have launched a gamified metaverse experience in Decentraland.&nbsp;<strong><a href=\"https://www.itp.net/emergent-tech/hershey-enters-the-metaverse-to-bring-holidays-to-life\">More</a></strong>.</p>\n<p>\\\n<strong>üß¥ Laura Mercier debuts virtual store in the metaverse</strong></p>\n<p>The cosmetics brand‚Äôs ‚ÄúWorld of Beauty‚Äù has AR/VR functionality and enables customers to trial products in a new way.&nbsp;<strong><a href=\"https://chainstoreage.com/cosmetics-brand-laura-mercier-debuts-virtual-store-metaverse\">More</a></strong>.</p>\n<p>\\\n<strong>üöò Renault launches first NFTs and announces long-term web3 plans</strong></p>\n<p>The NFTs celebrate the 50th anniversary of the iconic Renault 5. Renault is also kickstarting a web3-enabled community of Renault enthusiasts, R3NLT.&nbsp;<strong><a href=\"https://twitter.com/Renault_NFT\">More</a></strong>.</p>\n<p>\\\n<strong>üê¶ Rumors circulate that Twitter is launching a token</strong></p>\n<p>Code extracted by reputable tech researcher Jane Manchun Wong reveals plans for a coin and updated tipping function.&nbsp;<strong><a href=\"https://cointelegraph.com/news/rumors-of-a-new-native-twitter-coin-emerge-while-dogecoiners-remain-hopeful\">More</a></strong>.</p>\n<p>\\\n<strong>üíÑGivenchy Beauty reveals winter wonderland Roblox experience</strong></p>\n<p>The LVMH brand has launched a winter-themed metaverse experience in Roblox just two weeks after partnering with Bstroy to offer free NFTs to purchasers of the new clothing line. Givenchy first entered Roblox in June.&nbsp;<strong><a href=\"https://fashionunited.uk/news/fashion/givenchy-transforms-roblox-world-into-a-winter-wonderland/2022120866665\">More</a></strong>.</p>\n<p>\\\n<strong>‚òïÔ∏è Starbucks launches beta of long-awaited NFT-based loyalty program</strong></p>\n<p>Starbucks made headlines earlier this year after announcing its plans to completely revamp its loyalty program, based on NFTs. Last week the brand launched the new program, Starbucks Odyssey, in beta, ahead of launch next year.&nbsp;<strong><a href=\"https://decrypt.co/116863/starbucks-unprecedented-interest-polygon-nft-rewards\">More</a></strong>.</p>\n<p>\\\nüì• <strong>Comprehensive report on brands entered Web3 in Q3 2022.</strong> <a href=\"https://www.nfttech.com/nft-tech-research-exploring-brands-in-web3-q3-2022\">Here</a></p>\n<p>\\\nThanks for reading and see ya next week!</p>","content:encodedSnippet":"\\\nüôå Hi web3 folks!\n\\\n‚åöÔ∏èTimex launches Bored Ape watches\nThe luxury watchmaker has partnered with Bored Ape Yacht Club (BAYC) to enable BAYC holders to showcase their NFTs on their wrists.¬†More.\n\\\nüç´ Hershey launches chocolate-themed metaverse experience\nThe chocolate brand‚Äôs Philippines and India arms have launched a gamified metaverse experience in Decentraland.¬†More.\n\\\nüß¥ Laura Mercier debuts virtual store in the metaverse\nThe cosmetics brand‚Äôs ‚ÄúWorld of Beauty‚Äù has AR/VR functionality and enables customers to trial products in a new way.¬†More.\n\\\nüöò Renault launches first NFTs and announces long-term web3 plans\nThe NFTs celebrate the 50th anniversary of the iconic Renault 5. Renault is also kickstarting a web3-enabled community of Renault enthusiasts, R3NLT.¬†More.\n\\\nüê¶ Rumors circulate that Twitter is launching a token\nCode extracted by reputable tech researcher Jane Manchun Wong reveals plans for a coin and updated tipping function.¬†More.\n\\\nüíÑGivenchy Beauty reveals winter wonderland Roblox experience\nThe LVMH brand has launched a winter-themed metaverse experience in Roblox just two weeks after partnering with Bstroy to offer free NFTs to purchasers of the new clothing line. Givenchy first entered Roblox in June.¬†More.\n\\\n‚òïÔ∏è Starbucks launches beta of long-awaited NFT-based loyalty program\nStarbucks made headlines earlier this year after announcing its plans to completely revamp its loyalty program, based on NFTs. Last week the brand launched the new program, Starbucks Odyssey, in beta, ahead of launch next year.¬†More.\n\\\nüì• Comprehensive report on brands entered Web3 in Q3 2022. Here\n\\\nThanks for reading and see ya next week!","dc:creator":"annalooksup","content":" Hershey launches chocolate-themed metaverse experience. Timex launches Bored Ape watches. Rumors circulate that Twitter is launching a token","contentSnippet":"Hershey launches chocolate-themed metaverse experience. Timex launches Bored Ape watches. Rumors circulate that Twitter is launching a token","guid":"https://hackernoon.com/weekly-web3-brand-tracker-hersheys-in-the-metaverse-and-more?source=rss","categories":["nft","web3","web3-writing-contest","cryptocurrency","blockchain","weekly-web3-tracker","brands-in-metaverse","brands"],"isoDate":"2022-12-12T21:52:41.000Z","from":"https://hackernoon.com/feed"},{"creator":"Steve Fenton ","title":"DevOps vs SDLC: Optimizing the Software Development Cycle","link":"https://hackernoon.com/devops-vs-sdlc-optimizing-the-software-development-cycle?source=rss","pubDate":"Mon, 12 Dec 2022 22:03:33 GMT","content:encoded":"<p>\\\nIf you're using a traditional software development life cycle (SDLC) you may have questions about where DevOps fits in. Can the 2 exist together, or are there too many conflicts?</p>\n<p>\\\nThis post addresses the differences between the 2 approaches.</p>\n<h2 id=\"whatisthesdlc\">What is the SDLC?</h2>\n<p>The concept of a life cycle emerged in the 1960s, offering a structured and methodical way to build and operate an information system. Early systems development projects involved both software and hardware, such as <a href=\"https://www.ll.mit.edu/about/history/sage-semi-automatic-ground-environment-air-defense-system\">Project LINCOLN and the SAGE program</a>, which involved the introduction of new computer memory technology and the development of software.</p>\n<p>\\\nThe <a href=\"https://en.wikipedia.org/wiki/Systems_development_life_cycle\">systems development life cycle</a> expressed stages and control steps as a series of phases, such as analysis, design, and development. The full life cycle covered everything from initial conception right through to retiring the system.</p>\n<p>\\\nThe <em>software development life cycle</em> originally applied the systems development life cycle to software projects. The specific sequence of phases was different, but the overall concept was the same for many early software delivery models.</p>\n<p>\\\nMore recently, SDLC is being used informally to refer to <em>any</em> <a href=\"https://en.wikipedia.org/wiki/Software_development_life_cycle\">software development process</a>. As we can't compare DevOps to every possible process (of which it's one), we'll stick to the formal definition of the SDLC as a traditional phased approach to software delivery.</p>\n<h2 id=\"whywasthesdlccreated\">Why was the SDLC created?</h2>\n<p>You need to travel back in time to understand the motivation for the SDLC. Our history of software delivery follows the evolution of development processes since 1950. We found that technology has played a major role in changing what is needed. Just as scientists are limited by the equipment available for their experiments, early developers were limited by scarce machines that were expensive to run, had long compile times, and limited tools for code editing.</p>\n<p>\\\nAs an early programmer, you didn't have an integrated development environment with syntax highlighting, code navigation, or compiler warnings. People in non-programming roles also lacked software tools to assist their work or to improve communication between roles.</p>\n<p>\\\nCrucially, you couldn't search for answers on the web. You had to work it out for yourself with the help of the manual.</p>\n<p>\\</p>\n<ul>\n<li><p>1989 - Tim Berners-Lee invented the World Wide Web</p></li>\n<li><p>1997 - Google launched</p></li>\n<li><p>2008 - Stack Overflow arrived</p>\n<p>\\</p></li>\n</ul>\n<p>Before the SDLC was introduced, systems were created using an ad-hoc <em>code and fix</em> approach. With no defined process or controls, and with many technological limitations, the phased model solved many problems organizations had <em>at the time</em> when creating large applications.</p>\n<p>\\\nThe SDLC solved 2 types of problems:</p>\n<ol>\n<li><p>Issues scaling the <em>code and fixing</em> approach to large-scale systems</p></li>\n<li><p>Specific technical limitations of the time</p>\n<p>\\</p></li>\n</ol>\n<p>The original phased model was created at MIT's Lincoln Laboratories. Their model had 9 phases that were intended to directly solve the problems faced by software teams in the 1950s. This let them scale their development efforts, share information about the system, and document what went wrong so the knowledge could be shared with existing and future contributors.</p>\n<p>\\\nThe phases used at Lincoln Labs were:</p>\n<ol>\n<li><p>Operational plan</p></li>\n<li><p>Machine and operational specifications</p></li>\n<li><p>Program specifications</p></li>\n<li><p>Coding specifications</p></li>\n<li><p>Coding</p></li>\n<li><p>Parameter testing</p></li>\n<li><p>Assembly testing</p></li>\n<li><p>Shakedown</p></li>\n<li><p>System evaluation</p>\n<p>\\</p></li>\n</ol>\n<p>Many variations of the SDLC were created with different phases, which changed as both business and technology developed.</p>\n<h2 id=\"whythesdlcbecameaproblem\">Why the SDLC became a problem</h2>\n<p>Problems emerged from the SDLC due to 2 factors:</p>\n<ol>\n<li><p>Organizations had increased the number and complexity of phases in their SDLC</p></li>\n<li><p>The SDLC hadn't kept pace with improved tools</p>\n<p>\\</p></li>\n</ol>\n<p>When your primary tool for solving software delivery problems is a set of phases and control steps, you tend to solve most problems by adding more of them. As your process grows in size, it increases the transaction cost of each software version. Heavyweight processes were increasing in cost while machines were getting cheaper and compilation faster.</p>\n<p>\\\nThe SDLC was originally introduced to solve 2 problems:</p>\n<ol>\n<li><p>Scaling software development to handle large-scale systems</p></li>\n<li><p>Specific technical limitations of the time</p>\n<p>\\</p></li>\n</ol>\n<p>While the first problem remained, the technical limitations in 1990 were nothing like those in 1960. With technical constraints fading, the SDLC itself became a limiting factor in software delivery. The SDLC was an even greater problem in organizations that treated the process as the goal, rather than a way to achieve organizational outcomes.</p>\n<p>\\\nThe SDLC taught us that there <em>was</em> such as thing as <em>too much process</em>.</p>\n<p>\\\n<a href=\"#\">  <img src=\"https://cdn.hackernoon.com/images/BjV1EHGAKkRon4HOuee3REIX49i2-2022-12-12T22:03:33.825Z-clblcd83n00010as62cx8aldz\" alt=\"Capability versus process weight: Compared to code and fix, adding process improves software delivery until the process itself becomes the constraining factor\" /></a></p>\n<p>\\\nThere are complex relationships between batch size, deployment frequency, and risk. No matter how rigorously you test the functional and quality attributes of the system, the market risks remain until you release the software version to users. You only know that a feature is useful once people are using it.</p>\n<p>\\\nLarge batches also cause a common error in automation economics. Common wisdom says you either automate the tasks you do most often; or that calculate the manual effort of the task multiplied by its frequency.</p>\n<p>\\\nThis creates a paradox, as the reason you don't perform a task frequently is that it's manual and expensive. Automation does reduce manual work, but it also lets you perform tasks more frequently. </p>\n<p>\\\nAny economic model for automation should account for:</p>\n<ul>\n<li><p>Increased frequency</p></li>\n<li><p>Higher quality</p></li>\n<li><p>Fewer manual errors</p></li>\n<li><p>Reductions in the cost of delay</p>\n<p>\\</p></li>\n</ul>\n<p>In addition to the shift in technological constraints, a new competitive landscape emerged where organizations that were slow to market lost business to smaller and faster companies.</p>\n<p>\\\nThe SDLC was the correct solution at the time. Things have changed so much that it's no longer a valid approach to software delivery.</p>\n<h2 id=\"doesdevopshaveansdlc\">Does DevOps have an SDLC?</h2>\n<p>The traditional SDLC is no longer seen as good practice. Though it's possible to avoid it with appropriate care, it's more common for traditional phased approaches to result in large batches that are passed between specialized teams. This is incompatible with a DevOps approach, which seeks to reduce the size of batches and increase collaboration between different disciplines.</p>\n<p>\\\nUsing an SDLC, you'd arrange 20 people into 5 specialist teams to work on phases such as analysis, design, development, testing, and operations. These <em>horizontal teams</em> would perform their specialist task with work passed from team to team, like the baton in a relay race.</p>\n<p>\\\nIn DevOps, you'd arrange people into 4 cross-functional teams who could deliver software without hand-offs. Your <em>vertical teams</em> could each deliver and run an isolated component, like the line of players moving the ball toward the scoring line in a game of rugby.</p>\n<p>\\\nIf you want to find out more about team design, Matthew Skelton and Manuel Pais created <em><a href=\"https://teamtopologies.com/\">Team Topologies</a></em> to describe different interaction modes. You can use these to design healthy communication structures in your organization.</p>\n<p>\\\nIn DevOps and Continuous Delivery, there are still a series of tasks that need to be completed to deliver software. Instead of a structured SDLC, you focus on reducing batch size, creating autonomous vertical teams, and automating your deployment pipeline. You can design a process that complements the DevOps culture and capabilities.</p>\n<h2 id=\"adevopsprocess\">A DevOps process</h2>\n<p>Continuous Delivery is central to a DevOps process, but you still need a way to discover and share what to build. Your context will guide your selections, but an example process is shown below:</p>\n<ol>\n<li><p>Impact Mapping: A collaborative technique for generating ideas connected to goals.</p></li>\n<li><p>Specification by Example: A way to communicate requirements using examples, which can be turned into automated acceptance tests.</p></li>\n<li><p>Continuous Delivery: A software delivery process built around an automated deployment pipeline.</p>\n<p>\\</p></li>\n</ol>\n<p>Continuous Delivery doesn't depend on any specific technique for generating ideas. For example, you could switch from Impact Mapping to Lean Startup or any other technique from your product management toolkit. DevOps recognizes that you use appropriate Lean and Agile techniques alongside Continuous Delivery.</p>\n<h2 id=\"thelegacyofthesdlc\">The legacy of the SDLC</h2>\n<p>For some organizations, the lasting part of the SDLC is a heavyweight set of phases and controls that limit software delivery and create high levels of market risk. This is an unfortunate negative result of many years of discovery.</p>\n<p>\\\nThe real legacy of the SDLC should be what we learned from the first 4 decades of software delivery:</p>\n<ul>\n<li><p>You should work in small batches</p></li>\n<li><p>You should deploy frequently</p></li>\n<li><p>Start with a small working prototype, then evolve it</p></li>\n<li><p>It's possible to have too much process</p>\n<p>\\</p></li>\n</ul>\n<p>With the right culture and capabilities, and a deployment pipeline that is as automated as possible, you should be able to deliver frequent high-quality software versions.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>When you think of the software development life cycle now, just take your modern DevOps process and extend it to encompass the creation of the original idea, and consider how software could be retired when it's no longer valuable enough to maintain. The most important part (the bit in the middle where you continually increase the value of the software and improve its operation) is where most of your time and money will be spent.</p>\n<p>\\\nThe traditional formal method based on the systems development life cycle is no longer appropriate for software delivery, given the changes to the underlying constraints and competition.</p>\n<p>\\</p>\n<hr />\n<p>Also published <a href=\"https://octopus.com/blog/devops-versus-sdlc\">here.</a> </p>","content:encodedSnippet":"\\\nIf you're using a traditional software development life cycle (SDLC) you may have questions about where DevOps fits in. Can the 2 exist together, or are there too many conflicts?\n\\\nThis post addresses the differences between the 2 approaches.\nWhat is the SDLC?\nThe concept of a life cycle emerged in the 1960s, offering a structured and methodical way to build and operate an information system. Early systems development projects involved both software and hardware, such as Project LINCOLN and the SAGE program, which involved the introduction of new computer memory technology and the development of software.\n\\\nThe systems development life cycle expressed stages and control steps as a series of phases, such as analysis, design, and development. The full life cycle covered everything from initial conception right through to retiring the system.\n\\\nThe software development life cycle originally applied the systems development life cycle to software projects. The specific sequence of phases was different, but the overall concept was the same for many early software delivery models.\n\\\nMore recently, SDLC is being used informally to refer to any software development process. As we can't compare DevOps to every possible process (of which it's one), we'll stick to the formal definition of the SDLC as a traditional phased approach to software delivery.\nWhy was the SDLC created?\nYou need to travel back in time to understand the motivation for the SDLC. Our history of software delivery follows the evolution of development processes since 1950. We found that technology has played a major role in changing what is needed. Just as scientists are limited by the equipment available for their experiments, early developers were limited by scarce machines that were expensive to run, had long compile times, and limited tools for code editing.\n\\\nAs an early programmer, you didn't have an integrated development environment with syntax highlighting, code navigation, or compiler warnings. People in non-programming roles also lacked software tools to assist their work or to improve communication between roles.\n\\\nCrucially, you couldn't search for answers on the web. You had to work it out for yourself with the help of the manual.\n\\\n\n\n1989 - Tim Berners-Lee invented the World Wide Web\n\n\n1997 - Google launched\n\n\n2008 - Stack Overflow arrived\n\\\nBefore the SDLC was introduced, systems were created using an ad-hoc code and fix approach. With no defined process or controls, and with many technological limitations, the phased model solved many problems organizations had at the time when creating large applications.\n\\\nThe SDLC solved 2 types of problems:\nIssues scaling the code and fixing approach to large-scale systems\n\n\nSpecific technical limitations of the time\n\\\nThe original phased model was created at MIT's Lincoln Laboratories. Their model had 9 phases that were intended to directly solve the problems faced by software teams in the 1950s. This let them scale their development efforts, share information about the system, and document what went wrong so the knowledge could be shared with existing and future contributors.\n\\\nThe phases used at Lincoln Labs were:\nOperational plan\n\n\nMachine and operational specifications\n\n\nProgram specifications\n\n\nCoding specifications\n\n\nCoding\n\n\nParameter testing\n\n\nAssembly testing\n\n\nShakedown\n\n\nSystem evaluation\n\\\nMany variations of the SDLC were created with different phases, which changed as both business and technology developed.\nWhy the SDLC became a problem\nProblems emerged from the SDLC due to 2 factors:\nOrganizations had increased the number and complexity of phases in their SDLC\n\n\nThe SDLC hadn't kept pace with improved tools\n\\\nWhen your primary tool for solving software delivery problems is a set of phases and control steps, you tend to solve most problems by adding more of them. As your process grows in size, it increases the transaction cost of each software version. Heavyweight processes were increasing in cost while machines were getting cheaper and compilation faster.\n\\\nThe SDLC was originally introduced to solve 2 problems:\nScaling software development to handle large-scale systems\n\n\nSpecific technical limitations of the time\n\\\nWhile the first problem remained, the technical limitations in 1990 were nothing like those in 1960. With technical constraints fading, the SDLC itself became a limiting factor in software delivery. The SDLC was an even greater problem in organizations that treated the process as the goal, rather than a way to achieve organizational outcomes.\n\\\nThe SDLC taught us that there was such as thing as too much process.\n\\\n  \n\\\nThere are complex relationships between batch size, deployment frequency, and risk. No matter how rigorously you test the functional and quality attributes of the system, the market risks remain until you release the software version to users. You only know that a feature is useful once people are using it.\n\\\nLarge batches also cause a common error in automation economics. Common wisdom says you either automate the tasks you do most often; or that calculate the manual effort of the task multiplied by its frequency.\n\\\nThis creates a paradox, as the reason you don't perform a task frequently is that it's manual and expensive. Automation does reduce manual work, but it also lets you perform tasks more frequently. \n\\\nAny economic model for automation should account for:\nIncreased frequency\n\n\nHigher quality\n\n\nFewer manual errors\n\n\nReductions in the cost of delay\n\\\nIn addition to the shift in technological constraints, a new competitive landscape emerged where organizations that were slow to market lost business to smaller and faster companies.\n\\\nThe SDLC was the correct solution at the time. Things have changed so much that it's no longer a valid approach to software delivery.\nDoes DevOps have an SDLC?\nThe traditional SDLC is no longer seen as good practice. Though it's possible to avoid it with appropriate care, it's more common for traditional phased approaches to result in large batches that are passed between specialized teams. This is incompatible with a DevOps approach, which seeks to reduce the size of batches and increase collaboration between different disciplines.\n\\\nUsing an SDLC, you'd arrange 20 people into 5 specialist teams to work on phases such as analysis, design, development, testing, and operations. These horizontal teams would perform their specialist task with work passed from team to team, like the baton in a relay race.\n\\\nIn DevOps, you'd arrange people into 4 cross-functional teams who could deliver software without hand-offs. Your vertical teams could each deliver and run an isolated component, like the line of players moving the ball toward the scoring line in a game of rugby.\n\\\nIf you want to find out more about team design, Matthew Skelton and Manuel Pais created Team Topologies to describe different interaction modes. You can use these to design healthy communication structures in your organization.\n\\\nIn DevOps and Continuous Delivery, there are still a series of tasks that need to be completed to deliver software. Instead of a structured SDLC, you focus on reducing batch size, creating autonomous vertical teams, and automating your deployment pipeline. You can design a process that complements the DevOps culture and capabilities.\nA DevOps process\nContinuous Delivery is central to a DevOps process, but you still need a way to discover and share what to build. Your context will guide your selections, but an example process is shown below:\nImpact Mapping: A collaborative technique for generating ideas connected to goals.\n\n\nSpecification by Example: A way to communicate requirements using examples, which can be turned into automated acceptance tests.\n\n\nContinuous Delivery: A software delivery process built around an automated deployment pipeline.\n\\\nContinuous Delivery doesn't depend on any specific technique for generating ideas. For example, you could switch from Impact Mapping to Lean Startup or any other technique from your product management toolkit. DevOps recognizes that you use appropriate Lean and Agile techniques alongside Continuous Delivery.\nThe legacy of the SDLC\nFor some organizations, the lasting part of the SDLC is a heavyweight set of phases and controls that limit software delivery and create high levels of market risk. This is an unfortunate negative result of many years of discovery.\n\\\nThe real legacy of the SDLC should be what we learned from the first 4 decades of software delivery:\nYou should work in small batches\n\n\nYou should deploy frequently\n\n\nStart with a small working prototype, then evolve it\n\n\nIt's possible to have too much process\n\\\nWith the right culture and capabilities, and a deployment pipeline that is as automated as possible, you should be able to deliver frequent high-quality software versions.\nConclusion\nWhen you think of the software development life cycle now, just take your modern DevOps process and extend it to encompass the creation of the original idea, and consider how software could be retired when it's no longer valuable enough to maintain. The most important part (the bit in the middle where you continually increase the value of the software and improve its operation) is where most of your time and money will be spent.\n\\\nThe traditional formal method based on the systems development life cycle is no longer appropriate for software delivery, given the changes to the underlying constraints and competition.\n\\\n\nAlso published here.","dc:creator":"Steve Fenton ","content":"Traditional software development life cycle (SDLC) is a traditional phased approach to software delivery. SDLC is being used informally to refer to *any* [software development process] The concept of a life cycle emerged in the 1960s, offering a structured and methodical way to build and operate an information system. The SDLC solved 2 types of problem: scaling the *code and fix* approach to large-scale systems. DevOps can't compare DevOps to every possible process, but we'll stick to the formal definition of the SDLC.","contentSnippet":"Traditional software development life cycle (SDLC) is a traditional phased approach to software delivery. SDLC is being used informally to refer to *any* [software development process] The concept of a life cycle emerged in the 1960s, offering a structured and methodical way to build and operate an information system. The SDLC solved 2 types of problem: scaling the *code and fix* approach to large-scale systems. DevOps can't compare DevOps to every possible process, but we'll stick to the formal definition of the SDLC.","guid":"https://hackernoon.com/devops-vs-sdlc-optimizing-the-software-development-cycle?source=rss","categories":["sofware-development","devops","sdlc","continuous-delivery","software-architecture","devops-principles","devops-tools","optimization"],"isoDate":"2022-12-12T22:03:33.000Z","from":"https://hackernoon.com/feed"},{"creator":"marinsborg","title":"Choosing Your First Programming Language: A Beginners' Guide ","link":"https://hackernoon.com/choosing-your-first-programming-language-a-beginners-guide?source=rss","pubDate":"Mon, 12 Dec 2022 22:11:02 GMT","content:encoded":"<p>\\\nAs a beginner in the world of programming, choosing the best programming language to learn first can be overwhelming. With so many options available, it's difficult to know how to start.</p>\n<p>Luckily, there is no wrong answer. Every programming language is just a tool. With programming language, you give instructions to a computer to accomplish some task.</p>\n<p>\\\nIt is the same with cars. A car is also a tool that transports people from place A to place B. Can you answer what is the best car? Is it a Lambo? Or Ferrari? What if you have four children that you need to drive somewhere? In that case, the best car is a minivan.</p>\n<p>To really choose the best programming language, you need to consider what are your goals with programming. Do you want to have a programming career or is it just a hobby?</p>\n<p>If it is a programming career, then it is a good idea to know what programming language is wanted in your area. Open job boards and check.</p>\n<p>\\\nYou also need to consider what kind of applications you want to work with. Do you want to make games? Or are you interested in mobile applications? Maybe web applications are your thing. Machine learning is a hot topic these days. There are so many options to choose from.</p>\n<p>But don‚Äôt worry, in this post, we will list popular programming languages and where to learn them for free.</p>\n<h2 id=\"python\">Python</h2>\n<p>Python is a popular, versatile language that is known for its simplicity and readability. It is a general-purpose programming language. Python has a large number of libraries that can be used for various branches of the industry.</p>\n<p>\\\nIt is a very easy language to learn, it uses indentation instead of curly braces and it does not need to use semicolons. Since it is easy to learn, it is often the language of choice of people that are not programmers like scientists, mechanical engineers, accountants, etc.</p>\n<p>\\\nIt has a large and supportive community, making it a great language for beginners to learn.</p>\n<p><strong>Used for:</strong> data science, data visualization, machine learning, task automation, web development (server-side), game development, etc.</p>\n<h2 id=\"javascript\">JavaScript</h2>\n<p>JavaScript or JS for short is a popular language that is used to develop interactive web pages or applications. About 97% of pages use JS on the client side to control web page behavior. It is usually used in combination with HTML and CSS for frontend development.</p>\n<p>\\\nIt also has a large number of libraries that help you easily solve various types of tasks.</p>\n<p><strong>Used for:</strong> frontend web development, backend web development (node.js), game development (browser games), mobile applications (react native), cross-platform desktop applications (electrons)</p>\n<h2 id=\"java\">Java</h2>\n<p><em>(Do not confuse Java with JavaScript, they are not similar at all)</em></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Java_(programming_language)\">Java</a> is an object-oriented, general-purpose programming language. Java was and still is a pretty popular language mainly because of the Java virtual machine (JVM) that enables to run Java code on many different types of devices.</p>\n<p>\\\nIt is commonly used for building large-scale, enterprise-level applications. It was also the main programming language to build Android applications until Kotlin become more popular. Java has a syntax that is similar to C and C++ but it is not a low-level language as those two are.</p>\n<p>\\\n<strong>Used for:</strong> web development (server-side) - good for large enterprise applications, desktop applications (Windows and Linux), mobile development (Android apps - however, <a href=\"https://en.wikipedia.org/wiki/Kotlin_(programming_language)\">Kotlin</a> is now more popular for Android developers)</p>\n<p><strong>Resources to learn from:</strong> <a href=\"https://www.learnjavaonline.org/\">learnjavaonline.org</a></p>\n<h2 id=\"kotlin\">Kotlin</h2>\n<p>Kotlin is a general-purpose, cross-platform programming language that was developed to be used on the Java virtual machine (JVM). It was designed to be a modern and more powerful version of Java, with improved performance and more useful features for developers.</p>\n<p>\\\nBecause it runs on the JVM, Kotlin code can be used alongside existing Java code and libraries, making it a popular choice for Android app development. Many developers find Kotlin to be more concise and easier to read and write than Java, <strong>making it a good language to learn for beginners</strong>.</p>\n<p>\\\n<strong>Used for:</strong> mobile development (Android apps, but also iOS apps), web development (server-side, similar to Java)</p>\n<p><strong>Resources to learn from:</strong> <a href=\"https://hyperskill.org/tracks/18\">JetBrains Academy</a></p>\n<h2 id=\"c\">C</h2>\n<p>C# is a general-purpose language that is widely used for building a variety of applications, including web, mobile, desktop, and gaming applications. C# is similar to other popular programming languages like Java. It was developed by Microsoft and in the past, it was mostly used for developing applications for Microsoft systems.</p>\n<p>\\\n<strong>Used for:</strong> web development (server-side), desktop applications (Windows), game development (Unity), mobile development (Xamarin)</p>\n<p><strong>Resources to learn from:</strong>  <a href=\"https://dotnet.microsoft.com/learn/csharp\">Microsoft's official page</a> - it has a bunch of video tutorials and documentation</p>\n<h2 id=\"golang\">Golang</h2>\n<p>Golang, also known as Go, is a programming language that was developed by Google. It is a general-purpose language that is designed to be fast, simple, and easy to use.</p>\n<p>\\\nOne of the key features of Golang is its support for concurrency, which allows developers to write programs that can easily run multiple tasks at the same time. This makes it well-suited for building systems that need to handle a lot of data or traffic.</p>\n<p>\\\nGolang is also known for its strong focus on security and reliability, making it a popular choice for building secure and robust software.</p>\n<p>\\\n<strong>Used for:</strong> infrastructure, web development (server-side), data science, machine learning</p>\n<p><strong>Resources to learn from:</strong> <a href=\"http://www.golangbootcamp.com/book/\">Golang BootCamp</a> - book that has everything you need to know to start with Golang</p>\n<h2 id=\"swift\">Swift</h2>\n<p>Swift is a programming language that was developed by Apple. It is a modern, powerful language that is used for building a wide range of applications, including iOS, macOS, watchOS, and tvOS apps.</p>\n<p>\\\nSwift is known for being fast, easy to use, and safe, with a focus on writing clean, readable code.</p>\n<p>Swift also has a strong focus on performance, making it well-suited for building apps that need to be fast and responsive. Many developers find Swift to be a good language to learn because it is powerful and versatile, yet still easy to understand.</p>\n<p>\\\n<strong>Used for:</strong> mobile development (iOS) and other apps for Apple hardware</p>\n<p><strong>Resources to learn from:</strong> <a href=\"https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html\">Official documentation</a></p>\n<h2 id=\"whatwouldbethebestprogramminglanguagetolearn\">What would be the best programming language to learn?</h2>\n<p>If you still can‚Äôt decide, don‚Äôt worry. We would recommend starting to learn Python. It is a popular, simple, and broadly used programming language.</p>\n<p>\\\nYou can use Python for your hobby projects and later you can easily find a job if you know it.</p>\n<p>If you change your mind in the future and want to learn some other language, you can do that easily.</p>\n<p>\\\nThe knowledge that you get learning one programming language can be applied to any other language. If you know how to drive a Ford, you‚Äôll know how to drive Honda.</p>\n<p>\\</p>\n<hr />\n<p>Also published <a href=\"https://marinsborg.com/best-programming-language-to-learn/\">here.</a></p>","content:encodedSnippet":"\\\nAs a beginner in the world of programming, choosing the best programming language to learn first can be overwhelming. With so many options available, it's difficult to know how to start.\nLuckily, there is no wrong answer. Every programming language is just a tool. With programming language, you give instructions to a computer to accomplish some task.\n\\\nIt is the same with cars. A car is also a tool that transports people from place A to place B. Can you answer what is the best car? Is it a Lambo? Or Ferrari? What if you have four children that you need to drive somewhere? In that case, the best car is a minivan.\nTo really choose the best programming language, you need to consider what are your goals with programming. Do you want to have a programming career or is it just a hobby?\nIf it is a programming career, then it is a good idea to know what programming language is wanted in your area. Open job boards and check.\n\\\nYou also need to consider what kind of applications you want to work with. Do you want to make games? Or are you interested in mobile applications? Maybe web applications are your thing. Machine learning is a hot topic these days. There are so many options to choose from.\nBut don‚Äôt worry, in this post, we will list popular programming languages and where to learn them for free.\nPython\nPython is a popular, versatile language that is known for its simplicity and readability. It is a general-purpose programming language. Python has a large number of libraries that can be used for various branches of the industry.\n\\\nIt is a very easy language to learn, it uses indentation instead of curly braces and it does not need to use semicolons. Since it is easy to learn, it is often the language of choice of people that are not programmers like scientists, mechanical engineers, accountants, etc.\n\\\nIt has a large and supportive community, making it a great language for beginners to learn.\nUsed for: data science, data visualization, machine learning, task automation, web development (server-side), game development, etc.\nJavaScript\nJavaScript or JS for short is a popular language that is used to develop interactive web pages or applications. About 97% of pages use JS on the client side to control web page behavior. It is usually used in combination with HTML and CSS for frontend development.\n\\\nIt also has a large number of libraries that help you easily solve various types of tasks.\nUsed for: frontend web development, backend web development (node.js), game development (browser games), mobile applications (react native), cross-platform desktop applications (electrons)\nJava\n(Do not confuse Java with JavaScript, they are not similar at all)\nJava is an object-oriented, general-purpose programming language. Java was and still is a pretty popular language mainly because of the Java virtual machine (JVM) that enables to run Java code on many different types of devices.\n\\\nIt is commonly used for building large-scale, enterprise-level applications. It was also the main programming language to build Android applications until Kotlin become more popular. Java has a syntax that is similar to C and C++ but it is not a low-level language as those two are.\n\\\nUsed for: web development (server-side) - good for large enterprise applications, desktop applications (Windows and Linux), mobile development (Android apps - however, Kotlin is now more popular for Android developers)\nResources to learn from: learnjavaonline.org\nKotlin\nKotlin is a general-purpose, cross-platform programming language that was developed to be used on the Java virtual machine (JVM). It was designed to be a modern and more powerful version of Java, with improved performance and more useful features for developers.\n\\\nBecause it runs on the JVM, Kotlin code can be used alongside existing Java code and libraries, making it a popular choice for Android app development. Many developers find Kotlin to be more concise and easier to read and write than Java, making it a good language to learn for beginners.\n\\\nUsed for: mobile development (Android apps, but also iOS apps), web development (server-side, similar to Java)\nResources to learn from: JetBrains Academy\nC\nC# is a general-purpose language that is widely used for building a variety of applications, including web, mobile, desktop, and gaming applications. C# is similar to other popular programming languages like Java. It was developed by Microsoft and in the past, it was mostly used for developing applications for Microsoft systems.\n\\\nUsed for: web development (server-side), desktop applications (Windows), game development (Unity), mobile development (Xamarin)\nResources to learn from:  Microsoft's official page - it has a bunch of video tutorials and documentation\nGolang\nGolang, also known as Go, is a programming language that was developed by Google. It is a general-purpose language that is designed to be fast, simple, and easy to use.\n\\\nOne of the key features of Golang is its support for concurrency, which allows developers to write programs that can easily run multiple tasks at the same time. This makes it well-suited for building systems that need to handle a lot of data or traffic.\n\\\nGolang is also known for its strong focus on security and reliability, making it a popular choice for building secure and robust software.\n\\\nUsed for: infrastructure, web development (server-side), data science, machine learning\nResources to learn from: Golang BootCamp - book that has everything you need to know to start with Golang\nSwift\nSwift is a programming language that was developed by Apple. It is a modern, powerful language that is used for building a wide range of applications, including iOS, macOS, watchOS, and tvOS apps.\n\\\nSwift is known for being fast, easy to use, and safe, with a focus on writing clean, readable code.\nSwift also has a strong focus on performance, making it well-suited for building apps that need to be fast and responsive. Many developers find Swift to be a good language to learn because it is powerful and versatile, yet still easy to understand.\n\\\nUsed for: mobile development (iOS) and other apps for Apple hardware\nResources to learn from: Official documentation\nWhat would be the best programming language to learn?\nIf you still can‚Äôt decide, don‚Äôt worry. We would recommend starting to learn Python. It is a popular, simple, and broadly used programming language.\n\\\nYou can use Python for your hobby projects and later you can easily find a job if you know it.\nIf you change your mind in the future and want to learn some other language, you can do that easily.\n\\\nThe knowledge that you get learning one programming language can be applied to any other language. If you know how to drive a Ford, you‚Äôll know how to drive Honda.\n\\\n\nAlso published here.","dc:creator":"marinsborg","content":"List of popular programming languages recommended for beginners. Explaining what are they typically used for and listing resources where to learn them for free.","contentSnippet":"List of popular programming languages recommended for beginners. Explaining what are they typically used for and listing resources where to learn them for free.","guid":"https://hackernoon.com/choosing-your-first-programming-language-a-beginners-guide?source=rss","categories":["programming","learn-programming","programming-tips","programming-languages","beginner","functional-programming","career-advice","coding"],"isoDate":"2022-12-12T22:11:02.000Z","from":"https://hackernoon.com/feed"},{"title":"FTX CEO to tell U.S. lawmakers about failed crypto exchange's long list of issues","link":"https://seekingalpha.com/news/3916340-ftx-ceo-to-tell-us-lawmakers-about-failed-crypto-exchanges-long-list-of-issues?utm_source=feed_news_crypto&utm_medium=referral","pubDate":"Mon, 12 Dec 2022 17:34:46 -0500","guid":"https://seekingalpha.com/news/3916340-ftx-ceo-to-tell-us-lawmakers-about-failed-crypto-exchanges-long-list-of-issues?utm_source=feed_news_crypto&utm_medium=referral","categories":[{"_":"ftt-usd","$":{"domain":"https://seekingalpha.com/symbol/FTT-USD"}}],"isoDate":"2022-12-12T22:34:46.000Z","from":"https://seekingalpha.com/news/crypto/feed"},{"creator":"Antonio Verrico","title":"The Contagion and Collapse of the Crypto Bull Market (GBTC, SBF, FTX, Alameda, and more) ","link":"https://hackernoon.com/the-contagion-and-collapse-of-the-crypto-bull-market-gbtc-sbf-ftx-alameda-and-more?source=rss","pubDate":"Mon, 12 Dec 2022 22:37:26 GMT","content:encoded":"<p>\\\nThe Crypto Industry has had a rough go of it in 2022, to say the least, and I would like to shed some light on some of the major dominos that have fallen. </p>\n<p>\\\n2022 has been filled with many extremities including high inflation and the rise of interest rates that many have never seen in their lifetime. </p>\n<p>\\\nThis has led to poor performance across financial sectors, specifically the bond and equity markets, as well as being a contributing factor to the crash of the 2021 Crypto Bull market. </p>\n<p>\\\nThe crash roughly started in December 2021, but the contagion started long before that and spread throughout 2021 and 2022. I will try to do this chronologically but may jump forward and back to make some things absolutely crystal clear. </p>\n<p>\\\nSo here we go! Strap in, and enjoy the ride of the 2021-2022 Crypto contagion that no one truly realized until now.</p>\n<p>\\\n*Clears throat* We are going to start all the way back in 2020 with rough dates and a lot of introductions, so stay with me and you'll get the picture. </p>\n<p>\\\n<strong>Digital Capital Group (DCG)</strong> is a Crypto conglomerate Corporation with many businesses in the industry, including <strong>CoinDesk</strong>, a notable blockchain news source, Genesis Trading, Crypto‚Äôs only prime brokerage (think Fidelity but only for big institutions), and <strong>Grayscale</strong>, one of the world‚Äôs largest digital currency asset managers. </p>\n<p>\\\nGrayscale had created a Bitcoin Trust Fund called the <strong>Grayscale Bitcoin Trust (GBTC)</strong> that allows investors to gain exposure to Bitcoin without actually holding it. </p>\n<p>\\\nOne of these investors was <strong>Three Arrows Capital (3AC)</strong>, a hedge fund founded by two MIT graduate traders, Su Zhu and Kyle Davies, that had made money trading Crypto in 2019 and 2020.</p>\n<p>\\\nAlong with other Hedge Funds, they realized that GBTC could be used in <strong>==arbitrage trading==</strong> (selling two identical assets in two different markets for a profit) because GBTC was not priced based on the actual price of Bitcoin, but rather the NAV (Net Asset Value). </p>\n<p>\\\nTherefore, there was a difference in price and better yet for these traders, there was a premium on the GBTC because so many investors wanted it and thus traded at a higher price than the actual spot Bitcoin.</p>\n<p>\\\n3AC saw this opportunity to make essentially a ‚Äúrisk-free‚Äù trade and submitted documentation to own 6.1% of the Grayscale Bitcoin Trust. 3AC took out a loan with <strong>Genesis Trading (Genesis)</strong> to buy enough&nbsp;Bitcoin that would satisfy the 6.1% ownership. </p>\n<p>\\\nIn order to mint (create) new shares of GBTC, 3AC would then deposit this Bitcoin into the GBTC Trust and wait 6 months before being issued new shares of GBTC. </p>\n<p>\\\nThey would then sell the shares of GBTC to retail or other institutions for a premium since GBTC sold at a premium in much of 2020. <strong>To hit this point home, 3AC would buy actual spot Bitcoin and sell GBTC shares for more than they purchased the spot Bitcoin for.</strong> </p>\n<p>\\\nBut why did Genesis allow this? Is this fair? Well, Genesis had the incentive to bring in as much Bitcoin as possible into the GBTC Trust because Grayscale would receive 2% of the total AUM in the Trust as fees. </p>\n<p>\\\nOther Hedge Funds and banks followed this Strategy, like Alameda, which we will learn about soon enough.</p>\n<p>\\\nIn 2021, <strong>3AC used its plentiful amount of GBTC shares as collateral to take out ==margin loans== (allows user to borrow against the value of securities user already owns), to invest in Bitcoin and Ethereum (ETH)</strong>, which had bull runs and reached All-Time Highs (ATHs) in the summer of 2021. </p>\n<p>\\\nIn November 2021, one of the founders of 3AC, Zhu Su, tweeted that 3AC would no longer invest in ETH and move into <strong>==Altcoins==</strong> (more risky alternative coins) to earn higher returns. </p>\n<p>\\\nAt the end of 2021 and the beginning of 2022, they invested $230 million into <strong>==illiquid==</strong> (not easily converted into cash) Avalanche (AVAX) coins and started to invest in what the industry calls ‚Äú==ETH killers==‚Äù(Other blockchains that were created to replace Ethereum). </p>\n<p>\\\nIn March 2022, they became very bullish (invested heavily) in <strong>Terra Luna</strong>, another ETH Killer blockchain that used an Algorithmic Stablecoin along with their native token. </p>\n<p>\\\nWe will later see what happens to Terra Luna, but the blockchain was very popular during this time and many people thought Terra Luna was a profitable investment that was going to make them rich. </p>\n<p>\\\nThose people included 3AC and other hedge funds who had been seen as Crypto Trading Gods and been making a lot of money as seen by their extravagant spending on yachts and homes.&nbsp;  <img src=\"https://cdn.hackernoon.com/images/2hamEXOaYecbNDKBS5B3CAXc71n1-2022-12-12T22:37:24.695Z-clbldkr4q00020as6chgehyuf\" alt=\"Grayscale Bitcoin Trust Discount Hits Record Low at 26.5%\" /></p>\n<p>\\\n<strong>All the while, the collateral that was supporting all of 3AC‚Äôs margin loans with lending desks, GBTC shares, was now at a discount rather than a ==premium== (the price of one share of GBTC < price of one spot Bitcoin).</strong> </p>\n<p>\\\nTherefore, 3AC did not want to pay their loans back because they would take a huge realized loss on their GBTC shares. This began the slow decline for 3AC as they needed a way for GBTC to return to being at a premium or for the trust to convert into an Exchange Traded Fund (ETF).</p>\n<p>\\\nNow let's bring in the Macro: Inflation surged 7.5% on an annual basis in February 2022. The Fed now has the obligation to <strong>start raising interest rates</strong>, which shifts the whole Crypto paradigm and pulls down Crypto yields. </p>\n<p>\\\nCrypto thrives in a Risk-On environment, or when the Fed Funds rates are low, but does not do well in a Risk-Off environment, or when rates are high or being raised.</p>\n<p>\\\nBut back to Terra Luna because this is when things start getting interesting. </p>\n<p>\\\nThe Terra Luna foundation started to build their <strong>==Reserves==</strong> (assets they could hold to make investments and fund the ecosystem) with locked Avalanche tokens as well as 37,863 Bitcoins worth $1.5 billion made through <strong>==OTC==</strong> (Over the Counter) swaps with Genesis and 3AC. </p>\n<p>\\\nOf the $500 million worth of Bitcoin that 3AC sold to Terra Luna, <strong>$200 million of the Terra Luna Algo stablecoin was given to 3AC on May 5th.</strong></p>\n<p>\\\n<strong>On May 13th, Terra Luna collapses and shakes the entire industry</strong>. Remember when I said a lot of investors believed in Terra Luna, well it all ended up being a huge experiment, and the creator, Do Kwon, did not know if his Algorithmic backed stablecoin was going to work. </p>\n<p>\\\nAll it took was a couple of rumors and for the Algorithmic stablecoin (USTC) to slip below the $1 peg for holders of these Terra Luna tokens (LUNC)&nbsp; to start withdrawing and selling. This created an imbalance in the algorithm and basically crashed the Terra Luna ecosystem and tokens. </p>\n<p>\\\nSuffice it to say, 3AC was in a predicament with $200 million lost due to USTC going to near $0 and their GBTC shares at a huge discount.</p>\n<p>\\\n <img src=\"https://cdn.hackernoon.com/images/2hamEXOaYecbNDKBS5B3CAXc71n1-2022-12-12T22:37:24.703Z-clbldkr4v00030as6hk6af3gb\" alt=\"Terra Luna's token and Stablecoin both go to zero in May 2022 causing billions of dollars lost \" /></p>\n<p>\\\nLet‚Äôs go back to before the Terra Luna collapse; <strong>Bitcoin and ETH were down 60% from ATHs in early 2022.</strong> Bitcoin and ETH were a part of the collateral base for 3AC and Alameda as well as Avalanche and Terra Luna, which were down 80% from ATHs. </p>\n<p>\\\n3AC was in a tough position with billions of illiquid assets on hand that could not be sold for the appropriate price. </p>\n<p>\\\nWhat do they do? They borrow and take on as much <strong>==leverage==</strong> (using borrowed money) as possible from lending desks, like Voyager and BlockFi, and forge documents to prove they had enough collateral to pay them back. </p>\n<p>\\\nInstead of owning up to their <strong>==insolvency==</strong> (inability to pay debts), they decided to double down on their investments and take the money they should not have been lent to essentially gamble away.</p>\n<p>\\\nLet's check back in on Grayscale and see what they're up to. </p>\n<p>\\\nOn June 7th, 2022, Grayscale hired Donald B, Verrilli Jr., former solicitor general of the US, as legal counsel to fight the Securities &amp; Exchange Commission (SEC) in the Supreme Court in anticipation that the SEC denies Grayscale‚Äôs proposal to convert the GBTC Trust to an ETF. </p>\n<p>\\\nOnce again, many hedge funds and other firms had GBTC as collateral, but at this point in time, GBTC was trading at a discount of -30%. H<strong>ence, these firms were only able to access 70% of their collateral in Bitcoin because of the discount on GBTC, which wouldn‚Äôt happen if it was an ETF.</strong></p>\n<p>\\\nTherefore, Grayscale wanted to fix this discount problem on their GBTC by converting it into an ETF. </p>\n<p>\\\nThis would help 3AC, Alameda, and many more players in the space become more solvent and avoid the risk of bankruptcy by unlocking capital locked in the collateral they held with Genesis. </p>\n<p>\\\nOn June 29th, 2022, Grayscale sued the SEC for not allowing the GBTC Trust to convert into a Bitcoin Spot ETF. However, this was just a little too late‚Ä¶</p>\n<p>\\\nOn June 15th, 2022, <strong>BlockFi, a Crypto lending company, liquidated 3AC‚Äôs margin loans, which was the eventual collapse of 3AC.</strong> </p>\n<p>\\\n3AC was liquidated because they simply couldn‚Äôt make payments on their margin loans and used all of the borrowed funds to invest in risky altcoins like Terra Luna which essentially went to $0.</p>\n<p>\\\nBlockFi had also been partaking in GBTC arbitrage trading as they had sent customer deposited Bitcoin to GBTC or 3AC. Therefore, a large number of BlockFi‚Äôs Bitcoins were illiquid. This is no Bueno for BlockFi and eventually caused them to declare Bankruptcy. </p>\n<p>\\\nContinuing with the 3AC contagion, Genesis lent out $2.36 billion to 3AC but was bailed out by their parent company, DCG. </p>\n<p>\\\nVoyager, another Crypto lender, gave $660 million in uncollateralized loans to 3AC and was also about to go <strong>==insolvent==</strong>( inability to pay debts). However, Alameda came to the rescue and bailed Voyager out with a $200 million cash &amp; USDC loan and a 15,000 Bitcoin loan. </p>\n<p>\\\nFTX then bails out BlockFi with a $400 million loan. <strong>All these bailouts made FTX and Alameda look very solvent and a savior in the Crypto space.</strong></p>\n<p>\\\nBut wasn‚Äôt Alameda also arbitrage trading GBTC in 2020 and had GTBC collateral with Genesis which was at a discount along with the other hedge funds? How did they have enough money to bail out these other firms? </p>\n<p>\\\nIf you were thinking about these questions, YOU have been following along!</p>\n<p>\\\nTo clear some things up, </p>\n<p>\\\n1) <strong>==Leverage== is using borrowed funds to increase a trading position</strong>, </p>\n<p>\\\n2) <strong>A</strong> <strong>==collateralized loan== is when a user puts up funds (collateral) to back their borrowing</strong>, </p>\n<p>\\\n3) <strong>==Liquidating a margin loan== occurs if the value of that collateral drops past an agreed-upon level; the user‚Äôs collateral will be sold and the lender will use that money to pay off the initial loan</strong>, and‚Ä¶</p>\n<p>\\\n4) all of these institutions mentioned above, besides Terra Luna, were centralized. The decentralized part of Crypto had no examples of crashes or collapses during this time and Decentralized Applications like Uniswap, Aave, and Maker did not lose any funds. </p>\n<p>\\\n<strong>The difference between decentralized and centralized is ==centralization== means there is a central entity that controls the product/service, while ==decentralization== is when there is no central entity and runs permissionless.</strong></p>\n<p>\\\nLet's take a quick emotional pause and set the tone. I know you saw a bunch of numbers and new names, but let's get the main point across here. The Crypto industry was vulnerable and fragile in the summer of 2022, but we were learning from this as a community. </p>\n<p>\\\nIt didn't matter if you were a hedge fund, institutional investor, retail investor, or someone who had a couple of hundred bucks of Bitcoin; everyone was suffering because prices had crashed dramatically with Bitcoin and Ethereum now down 75% from ATHs as of July 2021. </p>\n<p>\\\nThis price collapse was due to two main events: </p>\n<p>\\\n1) <strong>All of that collateral being used to hold up 3AC and other Hedge Fund loans was liquidated and caused selling pressure</strong>, and</p>\n<p>\\\n2) <strong>Investors panic selling their Terra Luna tokens and similar risky tokens</strong>. </p>\n<p>\\\nBut why am I telling you this? It‚Äôs because of this feeling of mistrust and the feeling that any institution, no matter its prestige or public image, can fall and deceive millions if the risk is not properly managed. This feeling was amplified due to three key things: <strong>SBF, FTX, and Alameda.</strong></p>\n<p><img src=\"https://cdn.hackernoon.com/images/2hamEXOaYecbNDKBS5B3CAXc71n1-2022-12-12T22:37:24.705Z-clbldkr4x00040as660n38o7b\" alt=\"FTX:  A centralized Crypto Exchange known for its super bowl commercial and billions of dollars on its platform \" /></p>\n<p>\\n  <img src=\"https://cdn.hackernoon.com/images/2hamEXOaYecbNDKBS5B3CAXc71n1-2022-12-12T22:37:24.706Z-clbldkr5000050as6f6pz6gn1\" alt=\"Alameda Research: A Hedge Fund known for being one of the most prominent in the industry \" /> \\n </p>\n<p><img src=\"https://cdn.hackernoon.com/images/2hamEXOaYecbNDKBS5B3CAXc71n1-bma3rxc.jpeg\" alt=\"SBF: Sam Bankman Fried, known for his profitable trading and friendliness with regulators \" /></p>\n<p>\\\n\\\nFirst, some context into what each of these words are. SBF is Sam Bankman Fried, a 30-year-old Wizkid out of MIT that made billions arbitrage trading Bitcoin. FTX is a centralized Crypto Exchange that was founded by SBF in 2019 that was used to buy Crypto using Fiat money. </p>\n<p>\\\nFinally, Alameda is a Hedge Fund also founded by SBF in 2017 that was used to trade Crypto using technical trading methods with the possibility to use leverage. Another thing to note about leverage is that the technique can increase returns exponentially, but also magnify losses.</p>\n<p>\\\nLet's jump forward from June 2022 to November 2, 2022, <strong>when a CoinDesk reporter published a <strong><a href=\"https://www.coindesk.com/business/2022/11/02/divisions-in-sam-bankman-frieds-crypto-empire-blur-on-his-trading-titan-alamedas-balance-sheet/\">piece</a></strong> showcasing Alameda‚Äôs Balance sheet</strong>, ‚Äúthat balance sheet is full of FTX ‚Äì specifically,<a href=\"https://www.coindesk.com/business/2022/10/07/ftt-token-surges-7-as-ftx-partners-with-visa/\"> the FTT token</a>‚Äù, Ian Allison reports. </p>\n<p>\\\nFTT is a utility token for the FTX platform that does not entitle users to a part of the platform revenue or represent a share in FTX. Furthermore, it is not backed, nor does it give control over governance decisions or FTX‚Äôs treasury. </p>\n<p>\\\n<strong>Essentially, it is a speculative token that does not offer the investor any true benefits.</strong> </p>\n<p>\\\nAnyways, SBF was asked countless times about the conflict of interest between his Hedge Fund and Exchange, but he always noted that there were ‚Äúwalls'' in place to keep the two entities separate. </p>\n<p>\\\nHowever, this article suggests that Alameda and FTX were more closely tied together than everyone thought, and Alameda was sitting on $5.82 billion worth of FTT, where $2.16 billion was being used as collateral. </p>\n<p>\\\n<strong>The problem: if these two entities were sharing the same balance sheet and pool of funds, there is a chance that customer deposits from FTX were being misappropriated.</strong> </p>\n<p>\\\nHaving a significant amount of a token on your Balance Sheet that was created by your founder is definitely not a ‚ÄúBest Practices‚Äù and is risky in itself to use a non-independent asset as collateral. </p>\n<p>\\\nSo why would Alameda have so much FTT on its Balance sheet? We will find out soon enough, but essentially, FTX was able to mint new tokens whenever they wanted and Alameda was indeed very closely tied to FTX.</p>\n<p>\\\nLet's jump back to <strong>May 2022.</strong> While the contagion of Terra Luna and 3AC rippled through the industry, <strong>Alameda was also hit hard and suffered losses on its GBTC and altcoin positions</strong>.</p>\n<p>\\\nGenesis began to recall the margin loans made to Alameda when its collateral dropped due to Crypto prices declining. </p>\n<p>\\\nAlameda was not equipped to make these loan payments because Alameda had invested those borrowed funds into investments that were illiquid or no longer easily accessible. </p>\n<p>\\\nHowever, unlike 3AC, Alameda was able to receive funds from FTX in the form of ETH and FTT that would be used to pay those Genesis loans.</p>\n<p>\\\nCEO of Alameda, Caroline Ellison, a 28-year-old Stanford graduate who may or may not have been in a romantic relationship with SBF, would later explain to her staff that Alameda had taken out margin loans and used the money to make venture capital investments and other expenditures, <strong>including $72 million worth of Bahamian Real Estate.</strong></p>\n<p>\\\nAfter the CoinDesk article was released, ChangPeng Zhao, or CZ, the CEO of rival exchange Binance, became aware of the suspicious Alameda Balance Sheet. Binance had invested early on in FTX and held a substantial amount of FTT. </p>\n<p>\\\n<strong>CZ went to Twitter to notify his followers that Binance would sell $2.1 billion worth of FTT due to suspicious activity between Alameda and FTX.</strong> </p>\n<p>\\\nIn her tweet that has now been deleted, Caroline Ellison offered to OTC buy all of Binance‚Äôs FTT holdings for $22 per token, leading to speculation that Alameda may have had loans that would have otherwise been liquidated if the price of FTT fell below $22. </p>\n<p>\\\nCZ did not entertain this offer, which put the market into panic mode. A sell-off of FTT and other tokens on FTX began as net outflows of <strong>$451.1 million</strong> were withdrawn from FTX days after the article was published.</p>\n<p>\\\n\\\n\\\n <img src=\"https://cdn.hackernoon.com/images/2hamEXOaYecbNDKBS5B3CAXc71n1-2022-12-12T22:37:24.758Z-clbldkr6e00090as66orsduji\" alt=\"CZ's announcement to sell FTT\" /></p>\n<p>\\\nOn November 8, 2022, FTX paused withdrawals and CZ shared that Binance would enter into a strategic transaction with FTX through a non-binding Letter of Intent to fully acquire FTX and help cover its liquidity crunch. </p>\n<p>\\\nThe industry was in shock as the second-largest Crypto exchange was now set to be acquired. </p>\n<p>\\\nThings got even crazier a day after the proposed acquisition when CZ decided to walk away from the transaction after conducting due diligence and uncovering <strong>FTX was insolvent.</strong> </p>\n<p>\\\nDuring this whole period, SBF was tweeting about ‚Äúprotecting consumers‚Äù and how ‚Äúusers‚Äô funds are FINE‚Äù, but in reality, FTX did not have enough money for customers to withdraw from. A few days later on November 11, 2022, SBF stepped down as CEO and FTX declared bankruptcy.</p>\n<p>\\\n <img src=\"https://cdn.hackernoon.com/images/2hamEXOaYecbNDKBS5B3CAXc71n1-2022-12-12T22:37:24.757Z-clbldkr6d00080as67adraa1z\" alt=\"\" /></p>\n<p>But HOW? FTX and SBF were saviors, bailing out all of the other firms in the industry; how could they be suddenly bankrupt? </p>\n<p>\\\nThe following will dive into these questions in more detail but simply put: <strong>SBF created FTX on a house of cards and fooled the entire industry with his altruistic persona.</strong></p>\n<p>\\\nTo recap, SBF was noted as a Crypto Genius, and many thought of him as the face of Crypto after appearing on the Forbes cover and being seen with celebrity endorsements and experienced investors. </p>\n<p>\\\nFTX gained worldwide recognition and was considered a trusted exchange to execute trades and hold users' funds. But as I told you before, it does not matter how well-perceived someone is, they can still do very bad things. </p>\n<p>\\\nIn the case of SBF, we now know that he was playing life like a video game and trying to level up his ‚Äúlife score‚Äù by using funds to buy whatever he wanted to make himself seem more powerful, including a $1 billion personal loan from FTX. </p>\n<p>\\\nHow did he do this? Let‚Äôs dig a little deeper with the help of Nansen.ai‚Äôs report titled, <strong>‚Äú<strong><a href=\"https://www.nansen.ai/research/blockchain-analysis-the-collapse-of-alameda-and-ftx\">Blockchain Analysis: The Collapse of Alameda and FTX</a></strong>‚Äù</strong>. With all of this information in mind, I believe this is what happened with FTX, SBF, and Alameda. Let's talk FTT.</p>\n<p>\\\nAlameda and FTX owned the vast majority of the total FTT supply from the very beginning, meaning:</p>\n<p>\\</p>\n<ul>\n<li>The actual <strong>==circulating supply==</strong> (how much FTT is in the open market) is low when compared to the total supply</li>\n</ul>\n<p>\\</p>\n<ul>\n<li>Prices can be easily influenced to move up (or down) with small amounts of FTT</li>\n</ul>\n<p>\\</p>\n<ul>\n<li><p>Since both Alameda and FTX held the majority of FTT supply, if one entity is forced to sell its FTT holdings, then the other entity may consequently take a huge hit to its balance sheet</p>\n<p>\\n  <img src=\"https://cdn.hackernoon.com/images/2hamEXOaYecbNDKBS5B3CAXc71n1-2022-12-12T22:37:24.755Z-clbldkr6b00070as6bwgud9g8\" alt=\"The Process Alameda and FTX went through to take out margin loans and Borrow billions\" />Out of the 350 million (m) total supply of FTT, 280m of it was controlled by FTX <strong>(~80%)</strong> and out of the 59.3m tokens for seed and private rounds, around 27m <strong>(or roughly 46%)</strong> ended up with Alameda, where almost all the total FTT token supply had to go through Alameda at some point in its distribution. </p></li>\n</ul>\n<p>\\\nTherefore, Alameda had a direct role in the development of FTT, and the entities were connected from FTX‚Äôs inception.</p>\n<p>\\\nThe initial success of Alameda, FTX, and FTT led to a rise in the value of Alameda‚Äôs balance sheet during the 2020-2021 bull market with FTT reaching ATHs in the summer of 2021. </p>\n<p>\\\nThe high value in Alameda‚Äôs FTT position was most likely used as collateral by Alameda to borrow from Genesis and other lending desks. </p>\n<p>\\\nAs previously mentioned, t<strong>he borrowed funds were used to make illiquid investments causing FTT to become a central weakness for Alameda if the price of FTT decreased too much.</strong> </p>\n<p>\\\nEffectively, Alameda was in a leveraged long position, where they were borrowing funds using their high-value FTT position that they needed to stay high (long) or else their loans would be recalled.</p>\n<p>\\\nThis strategy worked perfectly in a bull market when prices were at ATHs. </p>\n<p>\\\nBut remember that huge Crypto crash in May/June that caused Terra Luna, 3AC, and a bunch more firms to collapse‚Ä¶. Well right around that time, liquidity quickly started to dry up as borrowing rates &amp; margin calls increased, and creditors started to recall their loans due to general market conditions worsening. </p>\n<p>\\\nGiven that significant portions of Alameda‚Äôs balance sheet had consisted of illiquid assets, <strong>Alameda was on the brink of a ==liquidity crunch== (in need of cash) as the rest of the Crypto industry was crumbling.</strong></p>\n<p>\\\nDue to the control SBF had over both FTX and Alameda, he knew that if Alameda declared bankruptcy, then an FTT liquidation would occur and cause the price to fall dramatically. </p>\n<p>\\\nWe believe the margin call for Alameda‚Äôs FTT position was $22, therefore, if the price of FTT fell below $22 and Alameda did not make payments to meet the margin level, then lending desks would have no option but to sell the FTT collateral. </p>\n<p>\\\nAs a large holder of FTT, FTX would see its FTT holdings crushed. With lending desks like Genesis now recalling their loans to Alameda, <strong>SBF decided to send FTX Customer Deposits to Alameda to satisfy their outstanding loan payments.</strong> </p>\n<p>\\\nAgain, this was due to Alameda‚Äôs illiquid investments in Terra Luna, GBTC, and others. In return for customer deposits, Alameda deposited as much as ~$4 billion worth of FTT on FTX as collateral between early June and July with the majority being sent during the 3AC collapse. </p>\n<p>\\\nSBF was able to move customer deposits without external auditors knowing due to a <strong>‚ÄúBackdoor‚Äù software protocol and bespoke accounting practices</strong> SBF created in his FTX exchange that would not alert anyone when funds were lent out, like to Alameda.</p>\n<p>\\\nBut why did FTX bail out Voyager and BlockFi during this time? It was because those entities were holding millions of FTT, and other tokens related to FTX. </p>\n<p>\\\nTherefore, if he let those firms go bankrupt, those tokens would have been liquidated and the price of FTT, among others, would decrease and cause FTX to go insolvent. </p>\n<p>\\\nInstead of owning up to their highly leveraged positions and declaring bankruptcy, Alameda and FTX decided to double down and acquire all these firms to stay solvent long enough to make all of the money back. </p>\n<p>\\\nIt solidified FTX‚Äôs image as a solvent and responsible institution, which helped FTT's price stay above $22 for the rest of the summer and kept people from digging too much into the two entities.</p>\n<p>\\\nTo reiterate, <strong>FTX and Alameda still had leveraged positions outstanding with FTT as the collateral with a margin call of about $22.</strong> </p>\n<p>\\\n<strong>SBF used customer deposits to cover up the liquidity crunch in the meantime while attempting to make the loss whole with the funds Alameda had available.</strong> </p>\n<p>\\\nHowever, Alameda was not able to make up for those losses in time even with the continued help from FTX before the November 2nd article was released. </p>\n<p>\\\nAlthough the November 2nd article exposed Alameda and FTX to the public, it was the <strong>==overleveraged positions==</strong> (more debt than collateral), using FTT as collateral, and investments in illiquid and risky tokens that were the true downfall for both firms. </p>\n<p>\\\nHowever, the true contagion started with the GBTC arbitrage trade that 3AC, Alameda, and many other firms participated in during 2020 which was mentioned earlier. </p>\n<p>\\\nThe fallout from these three entities (SBF, FTX, and Alameda) has shaken the Crypto industry and has made long-time enthusiasts question their loyalty to such a selfish industry. </p>\n<p>\\\nMillions of regular people held billions of dollars in FTX as a safe and trusted haven, which SBF took advantage of and used to prop up his own self-esteem.</p>\n<p>\\\nUnlike most other fraudsters who have stayed silent after committing their crime, SBF sought out attention including being interviewed at the New York Times (NYT) Dealbook Conference. </p>\n<p>\\\nHe was asked multiple times during the NYT interview as well as interviews with the Wall Street Journal and Good Morning America if he knew about the misappropriation of Customer Deposits to Alameda which he squeamishly deflected to the excuse that customers with Margin accounts allowed FTX to use their digital assets to lend out to Alameda. </p>\n<p>\\\n<strong>Essentially, SBF is making the excuse that somewhere in the Terms of Service it gives FTX the ability to lend out customer digital assets if the customer uses a margin account and that is why customer deposits were sent to Alameda.</strong> </p>\n<p>\\\nBut what about the regular customers who never allowed FTX to lend out their digital assets? The Terms of Service, seen below, clearly state that none of the digital assets in a customer‚Äôs account are owned or may be loaned out to FTX. </p>\n<p>\\\nThroughout these interviews, he was visibly uncomfortable and tried to answer the interviewer‚Äôs questions without actually answering the questions at all. </p>\n<p>\\\nHe has continued to seek attention through interviews, but when the hard questions like, ‚Äúwhere did all the money go?‚Äù were asked, he bounced around two answers: ‚ÄúI don‚Äôt know‚Äù and ‚ÄúI don‚Äôt know what to say‚Äù. </p>\n<p>\\\n@CoffeeZilla, a famous Crypto investigator, had the chance to interview SBF over a Twitter space and drilled SBF on the Terms of Service question. </p>\n<p>\\\nCoffeeZilla was finally able to get SBF to admit that he was treating all customers equally when it comes to withdrawals, even though there were supposed to be two separate pools of funds for regular and margin account customers. </p>\n<p>\\\nTherefore, <strong>SBF admitted that FTX was commingling customer funds and was not fulfilling their obligations of the Terms of Service, which is no doubt FRAUD.</strong> Why is it fraud? </p>\n<p>\\\nBecause SBF did not follow the Terms of Service that customers agreed to and rather ‚Äúloaned‚Äù (stole) customer digital assets, which they never approved. This is why SBF will go to jail for a very long time.</p>\n<p>\\\n <img src=\"https://cdn.hackernoon.com/images/2hamEXOaYecbNDKBS5B3CAXc71n1-2022-12-12T22:37:24.753Z-clbldkr6a00060as6do38dgpn\" alt=\"Image\" /></p>\n<p>\\\nAll I can say is that I am still committed to this technology, and I will keep writing so more people can be informed about the diverse applications of Blockchain. </p>\n<p>\\\nBad actors should not represent our industry when there are thousands of intelligent innovators building sophisticated and beneficial applications for the masses. </p>\n<p>\\\nFor every SBF, there is a Vitalik Buetrin, a Brian Armstrong, a Balaji Srinivasan, and many more lesser-known people fighting for financial freedom. Thank you for reading and I hope you enjoyed it!</p>\n<p>\\</p>\n<ul>\n<li>72099.ETH</li>\n</ul>\n<p>\\</p>","content:encodedSnippet":"\\\nThe Crypto Industry has had a rough go of it in 2022, to say the least, and I would like to shed some light on some of the major dominos that have fallen. \n\\\n2022 has been filled with many extremities including high inflation and the rise of interest rates that many have never seen in their lifetime. \n\\\nThis has led to poor performance across financial sectors, specifically the bond and equity markets, as well as being a contributing factor to the crash of the 2021 Crypto Bull market. \n\\\nThe crash roughly started in December 2021, but the contagion started long before that and spread throughout 2021 and 2022. I will try to do this chronologically but may jump forward and back to make some things absolutely crystal clear. \n\\\nSo here we go! Strap in, and enjoy the ride of the 2021-2022 Crypto contagion that no one truly realized until now.\n\\\n*Clears throat* We are going to start all the way back in 2020 with rough dates and a lot of introductions, so stay with me and you'll get the picture. \n\\\nDigital Capital Group (DCG) is a Crypto conglomerate Corporation with many businesses in the industry, including CoinDesk, a notable blockchain news source, Genesis Trading, Crypto‚Äôs only prime brokerage (think Fidelity but only for big institutions), and Grayscale, one of the world‚Äôs largest digital currency asset managers. \n\\\nGrayscale had created a Bitcoin Trust Fund called the Grayscale Bitcoin Trust (GBTC) that allows investors to gain exposure to Bitcoin without actually holding it. \n\\\nOne of these investors was Three Arrows Capital (3AC), a hedge fund founded by two MIT graduate traders, Su Zhu and Kyle Davies, that had made money trading Crypto in 2019 and 2020.\n\\\nAlong with other Hedge Funds, they realized that GBTC could be used in ==arbitrage trading== (selling two identical assets in two different markets for a profit) because GBTC was not priced based on the actual price of Bitcoin, but rather the NAV (Net Asset Value). \n\\\nTherefore, there was a difference in price and better yet for these traders, there was a premium on the GBTC because so many investors wanted it and thus traded at a higher price than the actual spot Bitcoin.\n\\\n3AC saw this opportunity to make essentially a ‚Äúrisk-free‚Äù trade and submitted documentation to own 6.1% of the Grayscale Bitcoin Trust. 3AC took out a loan with Genesis Trading (Genesis) to buy enough¬†Bitcoin that would satisfy the 6.1% ownership. \n\\\nIn order to mint (create) new shares of GBTC, 3AC would then deposit this Bitcoin into the GBTC Trust and wait 6 months before being issued new shares of GBTC. \n\\\nThey would then sell the shares of GBTC to retail or other institutions for a premium since GBTC sold at a premium in much of 2020. To hit this point home, 3AC would buy actual spot Bitcoin and sell GBTC shares for more than they purchased the spot Bitcoin for. \n\\\nBut why did Genesis allow this? Is this fair? Well, Genesis had the incentive to bring in as much Bitcoin as possible into the GBTC Trust because Grayscale would receive 2% of the total AUM in the Trust as fees. \n\\\nOther Hedge Funds and banks followed this Strategy, like Alameda, which we will learn about soon enough.\n\\\nIn 2021, 3AC used its plentiful amount of GBTC shares as collateral to take out ==margin loans== (allows user to borrow against the value of securities user already owns), to invest in Bitcoin and Ethereum (ETH), which had bull runs and reached All-Time Highs (ATHs) in the summer of 2021. \n\\\nIn November 2021, one of the founders of 3AC, Zhu Su, tweeted that 3AC would no longer invest in ETH and move into ==Altcoins== (more risky alternative coins) to earn higher returns. \n\\\nAt the end of 2021 and the beginning of 2022, they invested $230 million into ==illiquid== (not easily converted into cash) Avalanche (AVAX) coins and started to invest in what the industry calls ‚Äú==ETH killers==‚Äù(Other blockchains that were created to replace Ethereum). \n\\\nIn March 2022, they became very bullish (invested heavily) in Terra Luna, another ETH Killer blockchain that used an Algorithmic Stablecoin along with their native token. \n\\\nWe will later see what happens to Terra Luna, but the blockchain was very popular during this time and many people thought Terra Luna was a profitable investment that was going to make them rich. \n\\\nThose people included 3AC and other hedge funds who had been seen as Crypto Trading Gods and been making a lot of money as seen by their extravagant spending on yachts and homes.¬†  \n\\\nAll the while, the collateral that was supporting all of 3AC‚Äôs margin loans with lending desks, GBTC shares, was now at a discount rather than a ==premium== (the price of one share of GBTC  \n\\\nTherefore, 3AC did not want to pay their loans back because they would take a huge realized loss on their GBTC shares. This began the slow decline for 3AC as they needed a way for GBTC to return to being at a premium or for the trust to convert into an Exchange Traded Fund (ETF).\n\\\nNow let's bring in the Macro: Inflation surged 7.5% on an annual basis in February 2022. The Fed now has the obligation to start raising interest rates, which shifts the whole Crypto paradigm and pulls down Crypto yields. \n\\\nCrypto thrives in a Risk-On environment, or when the Fed Funds rates are low, but does not do well in a Risk-Off environment, or when rates are high or being raised.\n\\\nBut back to Terra Luna because this is when things start getting interesting. \n\\\nThe Terra Luna foundation started to build their ==Reserves== (assets they could hold to make investments and fund the ecosystem) with locked Avalanche tokens as well as 37,863 Bitcoins worth $1.5 billion made through ==OTC== (Over the Counter) swaps with Genesis and 3AC. \n\\\nOf the $500 million worth of Bitcoin that 3AC sold to Terra Luna, $200 million of the Terra Luna Algo stablecoin was given to 3AC on May 5th.\n\\\nOn May 13th, Terra Luna collapses and shakes the entire industry. Remember when I said a lot of investors believed in Terra Luna, well it all ended up being a huge experiment, and the creator, Do Kwon, did not know if his Algorithmic backed stablecoin was going to work. \n\\\nAll it took was a couple of rumors and for the Algorithmic stablecoin (USTC) to slip below the $1 peg for holders of these Terra Luna tokens (LUNC)¬† to start withdrawing and selling. This created an imbalance in the algorithm and basically crashed the Terra Luna ecosystem and tokens. \n\\\nSuffice it to say, 3AC was in a predicament with $200 million lost due to USTC going to near $0 and their GBTC shares at a huge discount.\n\\\n \n\\\nLet‚Äôs go back to before the Terra Luna collapse; Bitcoin and ETH were down 60% from ATHs in early 2022. Bitcoin and ETH were a part of the collateral base for 3AC and Alameda as well as Avalanche and Terra Luna, which were down 80% from ATHs. \n\\\n3AC was in a tough position with billions of illiquid assets on hand that could not be sold for the appropriate price. \n\\\nWhat do they do? They borrow and take on as much ==leverage== (using borrowed money) as possible from lending desks, like Voyager and BlockFi, and forge documents to prove they had enough collateral to pay them back. \n\\\nInstead of owning up to their ==insolvency== (inability to pay debts), they decided to double down on their investments and take the money they should not have been lent to essentially gamble away.\n\\\nLet's check back in on Grayscale and see what they're up to. \n\\\nOn June 7th, 2022, Grayscale hired Donald B, Verrilli Jr., former solicitor general of the US, as legal counsel to fight the Securities & Exchange Commission (SEC) in the Supreme Court in anticipation that the SEC denies Grayscale‚Äôs proposal to convert the GBTC Trust to an ETF. \n\\\nOnce again, many hedge funds and other firms had GBTC as collateral, but at this point in time, GBTC was trading at a discount of -30%. Hence, these firms were only able to access 70% of their collateral in Bitcoin because of the discount on GBTC, which wouldn‚Äôt happen if it was an ETF.\n\\\nTherefore, Grayscale wanted to fix this discount problem on their GBTC by converting it into an ETF. \n\\\nThis would help 3AC, Alameda, and many more players in the space become more solvent and avoid the risk of bankruptcy by unlocking capital locked in the collateral they held with Genesis. \n\\\nOn June 29th, 2022, Grayscale sued the SEC for not allowing the GBTC Trust to convert into a Bitcoin Spot ETF. However, this was just a little too late‚Ä¶\n\\\nOn June 15th, 2022, BlockFi, a Crypto lending company, liquidated 3AC‚Äôs margin loans, which was the eventual collapse of 3AC. \n\\\n3AC was liquidated because they simply couldn‚Äôt make payments on their margin loans and used all of the borrowed funds to invest in risky altcoins like Terra Luna which essentially went to $0.\n\\\nBlockFi had also been partaking in GBTC arbitrage trading as they had sent customer deposited Bitcoin to GBTC or 3AC. Therefore, a large number of BlockFi‚Äôs Bitcoins were illiquid. This is no Bueno for BlockFi and eventually caused them to declare Bankruptcy. \n\\\nContinuing with the 3AC contagion, Genesis lent out $2.36 billion to 3AC but was bailed out by their parent company, DCG. \n\\\nVoyager, another Crypto lender, gave $660 million in uncollateralized loans to 3AC and was also about to go ==insolvent==( inability to pay debts). However, Alameda came to the rescue and bailed Voyager out with a $200 million cash & USDC loan and a 15,000 Bitcoin loan. \n\\\nFTX then bails out BlockFi with a $400 million loan. All these bailouts made FTX and Alameda look very solvent and a savior in the Crypto space.\n\\\nBut wasn‚Äôt Alameda also arbitrage trading GBTC in 2020 and had GTBC collateral with Genesis which was at a discount along with the other hedge funds? How did they have enough money to bail out these other firms? \n\\\nIf you were thinking about these questions, YOU have been following along!\n\\\nTo clear some things up, \n\\\n1) ==Leverage== is using borrowed funds to increase a trading position, \n\\\n2) A ==collateralized loan== is when a user puts up funds (collateral) to back their borrowing, \n\\\n3) ==Liquidating a margin loan== occurs if the value of that collateral drops past an agreed-upon level; the user‚Äôs collateral will be sold and the lender will use that money to pay off the initial loan, and‚Ä¶\n\\\n4) all of these institutions mentioned above, besides Terra Luna, were centralized. The decentralized part of Crypto had no examples of crashes or collapses during this time and Decentralized Applications like Uniswap, Aave, and Maker did not lose any funds. \n\\\nThe difference between decentralized and centralized is ==centralization== means there is a central entity that controls the product/service, while ==decentralization== is when there is no central entity and runs permissionless.\n\\\nLet's take a quick emotional pause and set the tone. I know you saw a bunch of numbers and new names, but let's get the main point across here. The Crypto industry was vulnerable and fragile in the summer of 2022, but we were learning from this as a community. \n\\\nIt didn't matter if you were a hedge fund, institutional investor, retail investor, or someone who had a couple of hundred bucks of Bitcoin; everyone was suffering because prices had crashed dramatically with Bitcoin and Ethereum now down 75% from ATHs as of July 2021. \n\\\nThis price collapse was due to two main events: \n\\\n1) All of that collateral being used to hold up 3AC and other Hedge Fund loans was liquidated and caused selling pressure, and\n\\\n2) Investors panic selling their Terra Luna tokens and similar risky tokens. \n\\\nBut why am I telling you this? It‚Äôs because of this feeling of mistrust and the feeling that any institution, no matter its prestige or public image, can fall and deceive millions if the risk is not properly managed. This feeling was amplified due to three key things: SBF, FTX, and Alameda.\n\n\\n   \\n \n\n\\\n\\\nFirst, some context into what each of these words are. SBF is Sam Bankman Fried, a 30-year-old Wizkid out of MIT that made billions arbitrage trading Bitcoin. FTX is a centralized Crypto Exchange that was founded by SBF in 2019 that was used to buy Crypto using Fiat money. \n\\\nFinally, Alameda is a Hedge Fund also founded by SBF in 2017 that was used to trade Crypto using technical trading methods with the possibility to use leverage. Another thing to note about leverage is that the technique can increase returns exponentially, but also magnify losses.\n\\\nLet's jump forward from June 2022 to November 2, 2022, when a CoinDesk reporter published a piece showcasing Alameda‚Äôs Balance sheet, ‚Äúthat balance sheet is full of FTX ‚Äì specifically, the FTT token‚Äù, Ian Allison reports. \n\\\nFTT is a utility token for the FTX platform that does not entitle users to a part of the platform revenue or represent a share in FTX. Furthermore, it is not backed, nor does it give control over governance decisions or FTX‚Äôs treasury. \n\\\nEssentially, it is a speculative token that does not offer the investor any true benefits. \n\\\nAnyways, SBF was asked countless times about the conflict of interest between his Hedge Fund and Exchange, but he always noted that there were ‚Äúwalls'' in place to keep the two entities separate. \n\\\nHowever, this article suggests that Alameda and FTX were more closely tied together than everyone thought, and Alameda was sitting on $5.82 billion worth of FTT, where $2.16 billion was being used as collateral. \n\\\nThe problem: if these two entities were sharing the same balance sheet and pool of funds, there is a chance that customer deposits from FTX were being misappropriated. \n\\\nHaving a significant amount of a token on your Balance Sheet that was created by your founder is definitely not a ‚ÄúBest Practices‚Äù and is risky in itself to use a non-independent asset as collateral. \n\\\nSo why would Alameda have so much FTT on its Balance sheet? We will find out soon enough, but essentially, FTX was able to mint new tokens whenever they wanted and Alameda was indeed very closely tied to FTX.\n\\\nLet's jump back to May 2022. While the contagion of Terra Luna and 3AC rippled through the industry, Alameda was also hit hard and suffered losses on its GBTC and altcoin positions.\n\\\nGenesis began to recall the margin loans made to Alameda when its collateral dropped due to Crypto prices declining. \n\\\nAlameda was not equipped to make these loan payments because Alameda had invested those borrowed funds into investments that were illiquid or no longer easily accessible. \n\\\nHowever, unlike 3AC, Alameda was able to receive funds from FTX in the form of ETH and FTT that would be used to pay those Genesis loans.\n\\\nCEO of Alameda, Caroline Ellison, a 28-year-old Stanford graduate who may or may not have been in a romantic relationship with SBF, would later explain to her staff that Alameda had taken out margin loans and used the money to make venture capital investments and other expenditures, including $72 million worth of Bahamian Real Estate.\n\\\nAfter the CoinDesk article was released, ChangPeng Zhao, or CZ, the CEO of rival exchange Binance, became aware of the suspicious Alameda Balance Sheet. Binance had invested early on in FTX and held a substantial amount of FTT. \n\\\nCZ went to Twitter to notify his followers that Binance would sell $2.1 billion worth of FTT due to suspicious activity between Alameda and FTX. \n\\\nIn her tweet that has now been deleted, Caroline Ellison offered to OTC buy all of Binance‚Äôs FTT holdings for $22 per token, leading to speculation that Alameda may have had loans that would have otherwise been liquidated if the price of FTT fell below $22. \n\\\nCZ did not entertain this offer, which put the market into panic mode. A sell-off of FTT and other tokens on FTX began as net outflows of $451.1 million were withdrawn from FTX days after the article was published.\n\\\n\\\n\\\n \n\\\nOn November 8, 2022, FTX paused withdrawals and CZ shared that Binance would enter into a strategic transaction with FTX through a non-binding Letter of Intent to fully acquire FTX and help cover its liquidity crunch. \n\\\nThe industry was in shock as the second-largest Crypto exchange was now set to be acquired. \n\\\nThings got even crazier a day after the proposed acquisition when CZ decided to walk away from the transaction after conducting due diligence and uncovering FTX was insolvent. \n\\\nDuring this whole period, SBF was tweeting about ‚Äúprotecting consumers‚Äù and how ‚Äúusers‚Äô funds are FINE‚Äù, but in reality, FTX did not have enough money for customers to withdraw from. A few days later on November 11, 2022, SBF stepped down as CEO and FTX declared bankruptcy.\n\\\n \nBut HOW? FTX and SBF were saviors, bailing out all of the other firms in the industry; how could they be suddenly bankrupt? \n\\\nThe following will dive into these questions in more detail but simply put: SBF created FTX on a house of cards and fooled the entire industry with his altruistic persona.\n\\\nTo recap, SBF was noted as a Crypto Genius, and many thought of him as the face of Crypto after appearing on the Forbes cover and being seen with celebrity endorsements and experienced investors. \n\\\nFTX gained worldwide recognition and was considered a trusted exchange to execute trades and hold users' funds. But as I told you before, it does not matter how well-perceived someone is, they can still do very bad things. \n\\\nIn the case of SBF, we now know that he was playing life like a video game and trying to level up his ‚Äúlife score‚Äù by using funds to buy whatever he wanted to make himself seem more powerful, including a $1 billion personal loan from FTX. \n\\\nHow did he do this? Let‚Äôs dig a little deeper with the help of Nansen.ai‚Äôs report titled, ‚ÄúBlockchain Analysis: The Collapse of Alameda and FTX‚Äù. With all of this information in mind, I believe this is what happened with FTX, SBF, and Alameda. Let's talk FTT.\n\\\nAlameda and FTX owned the vast majority of the total FTT supply from the very beginning, meaning:\n\\\n\nThe actual ==circulating supply== (how much FTT is in the open market) is low when compared to the total supply\n\\\n\nPrices can be easily influenced to move up (or down) with small amounts of FTT\n\\\n\n\nSince both Alameda and FTX held the majority of FTT supply, if one entity is forced to sell its FTT holdings, then the other entity may consequently take a huge hit to its balance sheet\n\\n  Out of the 350 million (m) total supply of FTT, 280m of it was controlled by FTX (~80%) and out of the 59.3m tokens for seed and private rounds, around 27m (or roughly 46%) ended up with Alameda, where almost all the total FTT token supply had to go through Alameda at some point in its distribution. \n\n\n\\\nTherefore, Alameda had a direct role in the development of FTT, and the entities were connected from FTX‚Äôs inception.\n\\\nThe initial success of Alameda, FTX, and FTT led to a rise in the value of Alameda‚Äôs balance sheet during the 2020-2021 bull market with FTT reaching ATHs in the summer of 2021. \n\\\nThe high value in Alameda‚Äôs FTT position was most likely used as collateral by Alameda to borrow from Genesis and other lending desks. \n\\\nAs previously mentioned, the borrowed funds were used to make illiquid investments causing FTT to become a central weakness for Alameda if the price of FTT decreased too much. \n\\\nEffectively, Alameda was in a leveraged long position, where they were borrowing funds using their high-value FTT position that they needed to stay high (long) or else their loans would be recalled.\n\\\nThis strategy worked perfectly in a bull market when prices were at ATHs. \n\\\nBut remember that huge Crypto crash in May/June that caused Terra Luna, 3AC, and a bunch more firms to collapse‚Ä¶. Well right around that time, liquidity quickly started to dry up as borrowing rates & margin calls increased, and creditors started to recall their loans due to general market conditions worsening. \n\\\nGiven that significant portions of Alameda‚Äôs balance sheet had consisted of illiquid assets, Alameda was on the brink of a ==liquidity crunch== (in need of cash) as the rest of the Crypto industry was crumbling.\n\\\nDue to the control SBF had over both FTX and Alameda, he knew that if Alameda declared bankruptcy, then an FTT liquidation would occur and cause the price to fall dramatically. \n\\\nWe believe the margin call for Alameda‚Äôs FTT position was $22, therefore, if the price of FTT fell below $22 and Alameda did not make payments to meet the margin level, then lending desks would have no option but to sell the FTT collateral. \n\\\nAs a large holder of FTT, FTX would see its FTT holdings crushed. With lending desks like Genesis now recalling their loans to Alameda, SBF decided to send FTX Customer Deposits to Alameda to satisfy their outstanding loan payments. \n\\\nAgain, this was due to Alameda‚Äôs illiquid investments in Terra Luna, GBTC, and others. In return for customer deposits, Alameda deposited as much as ~$4 billion worth of FTT on FTX as collateral between early June and July with the majority being sent during the 3AC collapse. \n\\\nSBF was able to move customer deposits without external auditors knowing due to a ‚ÄúBackdoor‚Äù software protocol and bespoke accounting practices SBF created in his FTX exchange that would not alert anyone when funds were lent out, like to Alameda.\n\\\nBut why did FTX bail out Voyager and BlockFi during this time? It was because those entities were holding millions of FTT, and other tokens related to FTX. \n\\\nTherefore, if he let those firms go bankrupt, those tokens would have been liquidated and the price of FTT, among others, would decrease and cause FTX to go insolvent. \n\\\nInstead of owning up to their highly leveraged positions and declaring bankruptcy, Alameda and FTX decided to double down and acquire all these firms to stay solvent long enough to make all of the money back. \n\\\nIt solidified FTX‚Äôs image as a solvent and responsible institution, which helped FTT's price stay above $22 for the rest of the summer and kept people from digging too much into the two entities.\n\\\nTo reiterate, FTX and Alameda still had leveraged positions outstanding with FTT as the collateral with a margin call of about $22. \n\\\nSBF used customer deposits to cover up the liquidity crunch in the meantime while attempting to make the loss whole with the funds Alameda had available. \n\\\nHowever, Alameda was not able to make up for those losses in time even with the continued help from FTX before the November 2nd article was released. \n\\\nAlthough the November 2nd article exposed Alameda and FTX to the public, it was the ==overleveraged positions== (more debt than collateral), using FTT as collateral, and investments in illiquid and risky tokens that were the true downfall for both firms. \n\\\nHowever, the true contagion started with the GBTC arbitrage trade that 3AC, Alameda, and many other firms participated in during 2020 which was mentioned earlier. \n\\\nThe fallout from these three entities (SBF, FTX, and Alameda) has shaken the Crypto industry and has made long-time enthusiasts question their loyalty to such a selfish industry. \n\\\nMillions of regular people held billions of dollars in FTX as a safe and trusted haven, which SBF took advantage of and used to prop up his own self-esteem.\n\\\nUnlike most other fraudsters who have stayed silent after committing their crime, SBF sought out attention including being interviewed at the New York Times (NYT) Dealbook Conference. \n\\\nHe was asked multiple times during the NYT interview as well as interviews with the Wall Street Journal and Good Morning America if he knew about the misappropriation of Customer Deposits to Alameda which he squeamishly deflected to the excuse that customers with Margin accounts allowed FTX to use their digital assets to lend out to Alameda. \n\\\nEssentially, SBF is making the excuse that somewhere in the Terms of Service it gives FTX the ability to lend out customer digital assets if the customer uses a margin account and that is why customer deposits were sent to Alameda. \n\\\nBut what about the regular customers who never allowed FTX to lend out their digital assets? The Terms of Service, seen below, clearly state that none of the digital assets in a customer‚Äôs account are owned or may be loaned out to FTX. \n\\\nThroughout these interviews, he was visibly uncomfortable and tried to answer the interviewer‚Äôs questions without actually answering the questions at all. \n\\\nHe has continued to seek attention through interviews, but when the hard questions like, ‚Äúwhere did all the money go?‚Äù were asked, he bounced around two answers: ‚ÄúI don‚Äôt know‚Äù and ‚ÄúI don‚Äôt know what to say‚Äù. \n\\\n@CoffeeZilla, a famous Crypto investigator, had the chance to interview SBF over a Twitter space and drilled SBF on the Terms of Service question. \n\\\nCoffeeZilla was finally able to get SBF to admit that he was treating all customers equally when it comes to withdrawals, even though there were supposed to be two separate pools of funds for regular and margin account customers. \n\\\nTherefore, SBF admitted that FTX was commingling customer funds and was not fulfilling their obligations of the Terms of Service, which is no doubt FRAUD. Why is it fraud? \n\\\nBecause SBF did not follow the Terms of Service that customers agreed to and rather ‚Äúloaned‚Äù (stole) customer digital assets, which they never approved. This is why SBF will go to jail for a very long time.\n\\\n \n\\\nAll I can say is that I am still committed to this technology, and I will keep writing so more people can be informed about the diverse applications of Blockchain. \n\\\nBad actors should not represent our industry when there are thousands of intelligent innovators building sophisticated and beneficial applications for the masses. \n\\\nFor every SBF, there is a Vitalik Buetrin, a Brian Armstrong, a Balaji Srinivasan, and many more lesser-known people fighting for financial freedom. Thank you for reading and I hope you enjoyed it!\n\\\n\n72099.ETH\n\\","dc:creator":"Antonio Verrico","content":"Hedge Funds started using GBTC as a way to arbitrage trade and make a profit. They used leverage to make a larger profit, which worked when GBTC was at a premium. But when it was priced at a discount, everything started to fall apart. This affected 3AC, Terra Luna, FTX, Alameda, and many more, causing the collapse of the Crypto bull market. ","contentSnippet":"Hedge Funds started using GBTC as a way to arbitrage trade and make a profit. They used leverage to make a larger profit, which worked when GBTC was at a premium. But when it was priced at a discount, everything started to fall apart. This affected 3AC, Terra Luna, FTX, Alameda, and many more, causing the collapse of the Crypto bull market.","guid":"https://hackernoon.com/the-contagion-and-collapse-of-the-crypto-bull-market-gbtc-sbf-ftx-alameda-and-more?source=rss","categories":["cryptocurrency","ftx","crypto-crash","bitcoin","terra-luna","crypto","sbf","alameda"],"isoDate":"2022-12-12T22:37:26.000Z","from":"https://hackernoon.com/feed"},{"creator":"Cointelegraph By Renato Valente, Leonardo Teixeira","title":"Brazil could cement its status as an economic leader thanks to 2024 CBDC move","link":"https://cointelegraph.com/news/brazil-could-cement-its-status-as-an-economic-leader-thanks-to-2024-cbdc-move","pubDate":"Mon, 12 Dec 2022 22:41:13 +0000","enclosure":{"url":"https://images.cointelegraph.com/images/840_aHR0cHM6Ly9zMy5jb2ludGVsZWdyYXBoLmNvbS91cGxvYWRzLzIwMjItMTEvY2Y0OTY0NTgtZGM5ZC00Y2MzLTg4NDEtMDc3NDgzMGZmNGY0LmpwZw==.jpg","length":"840","type":"image/jpg"},"dc:creator":"Cointelegraph By Renato Valente, Leonardo Teixeira","content":"\n                <p style=\"float:right; margin:0 0 10px 15px; width:240px;\"><img src=\"https://images.cointelegraph.com/images/840_aHR0cHM6Ly9zMy5jb2ludGVsZWdyYXBoLmNvbS91cGxvYWRzLzIwMjItMTEvY2Y0OTY0NTgtZGM5ZC00Y2MzLTg4NDEtMDc3NDgzMGZmNGY0LmpwZw==.jpg\"></p><p>Brazil is set to launch a Central Bank Digital Currency (CBDC) in 2024, a move that could contribute to its status as an economic leader in South America.</p>\n            ","contentSnippet":"Brazil is set to launch a Central Bank Digital Currency (CBDC) in 2024, a move that could contribute to its status as an economic leader in South America.","guid":"https://cointelegraph.com/news/brazil-could-cement-its-status-as-an-economic-leader-thanks-to-2024-cbdc-move","categories":["Brazil","CBDC","Stablecoins"],"isoDate":"2022-12-12T22:41:13.000Z","from":"https://cointelegraph.com/rss"},{"creator":" Danny Wesley","title":"Eugene Lisovskiy, Level up Basket Founder: ‚ÄúCommunity Is the Core of Everything; It Inspires Growth‚Äù","link":"https://hackernoon.com/eugene-lisovskiy-level-up-basket-founder-community-is-the-core-of-everything-it-inspires-growth?source=rss","pubDate":"Mon, 12 Dec 2022 22:48:28 GMT","content:encoded":"<div class=\"paragraph\">Eugene Lisovskiy has been spearheading global tech companies for over 18 years, building communities and raising capital everywhere he goes. </div><div class=\"paragraph\">From working on <a href=\"http://litres.com/\">LitRes.com</a>, now the leading eBook platform in Eastern Europe, to growing <a href=\"http://maps.me/\">MAPS.me</a> into a top offline map app with over 150 million users, Lisovskiy‚Äôs passion for analytics and bringing people together have combined to lead him on a unique journey to his current project, Level Up Basket, a basketball training platform powered by community and gamification.¬†</div><div class=\"paragraph\">In this interview, Eugene shares his opinions on growing a robust community in any niche, adapting your product to the metaverse, the power of outsourcing, and the future of AI.</div><h2><strong>Let&#x27;s talk about your backstory first. How did you get started in the tech industry?</strong></h2><div class=\"paragraph\">I started my career in 2004. Believe it or not, my educational background is actually in biotech and engineering rather than business! </div><div class=\"paragraph\">When I began college in 1999, I felt like biotech and medicine would be my future, and I expected to graduate and end up wearing a lab coat and creating things in a lab somewhere.¬†</div><div class=\"paragraph\">Life had different plans, though. My first kid was born right before I graduated from college, so, of course, I needed to make money and find something stable. </div><div class=\"paragraph\">I already had some entrepreneurial experience, so I took that and combined it with a side project I had at the time developing websites. </div><div class=\"paragraph\">This was fine as a short-term fix, but I knew it wasn&#x27;t what I wanted to keep doing.¬†</div><div class=\"paragraph\">As I was looking around for system administrator or web developer jobs (again, because they were easy, reliable income), I got an offer from an international company to be their internet marketing manager. </div><div class=\"paragraph\">Did I have any experience with that? Absolutely not, but I thought it sounded like an interesting opportunity, so I went for it.¬†</div><div class=\"paragraph\">It turns out that I was good at internet marketing, and I built a network in Europe that let me eventually move on from that global software company to grow my experience. </div><div class=\"paragraph\">In 2010, I moved from internet marketing to the tech startup space. From there, I co-founded two companies, co-owned Russia&#x27;s top e-book store, LitRes, and became CEO of Maps.me, which is what people primarily know me for. </div><div class=\"paragraph\">I&#x27;ve also been involved with a few other tech startups, and I&#x27;m currently the co-founder and CEO of a new basketball training app company called Level Up Basketball.</div><h2><strong>Since Maps.me became so popular under your leadership, let&#x27;s talk about that a little more. What types of problems are you solving with projects like Maps.me?</strong></h2><div class=\"paragraph\">A lot of people don&#x27;t realize that giants like Google Maps don&#x27;t have very up-to-date or complete maps for lesser-traveled regions, and they are expensive for commercial use.</div><div class=\"paragraph\">While it makes sense for there to be a better map of New York City (a densely populated urban area) than, say, a village in Nepal (a small, remote location), it&#x27;s still just as important to have an accurate, complete map for both. </div><div class=\"paragraph\">First responders and humanitarian organizations rely on GPS and map tools to find people who are lost or to undertake search and rescue missions after natural disasters, so these maps can literally be a life-or-death thing.¬†</div><div class=\"paragraph\">Here are the problems Maps.me solves:¬†</div><div class=\"paragraph\">First, it puts mapping tools directly into the hands of anyone with a smartphone. Anyone can add or edit map locations and write reviews. </div><div class=\"paragraph\">Free, accessible maps are a core tenet of the OpenStreetMap project, which is what Maps.me&#x27;s data is built on.¬†</div><div class=\"paragraph\">Second, it creates a fun, rewarding community that encourages users to take charge of mapping out their locations. Nine months after the editor tool was added, over a million edits had already been made across 231 countries. </div><div class=\"paragraph\">The desire to help was there; people just needed an easy tool like Maps.me to make it happen. I like to think of it as &quot;Minecraft for adults,&quot; also serving the greater good.¬†</div><h2><strong>Access to complete, accurate maps is critical and beneficial for the global community. What do you think other businesses and regular internet users can do to address this problem?</strong></h2><div class=\"paragraph\">Yes, these maps are absolutely vital. Without accurate mapping, NGOs have a much harder time coordinating their efforts and aiding those who need it most, and first responders can&#x27;t do their jobs as well or as quickly.</div><div class=\"paragraph\">In 2017, Hurricane Maria was devastating Puerto Rico. The community came together to map the entire area within a week so that emergency teams could find where buildings and other structures had been to help people who were stuck or suffering much faster.</div><div class=\"paragraph\">I think one of the best things companies can do is remove things like copyright barriers and proprietary hardware or software requirements. </div><div class=\"paragraph\">It should be a relatively easy, inexpensive task to access a reliable map, regardless of where you are. </div><div class=\"paragraph\">Another thing that would be helpful is more cooperation. OpenStreetMap and Maps.me work so well because people from all over the globe cooperate to help improve the maps. Businesses could learn from this.¬†</div><div class=\"paragraph\">As for users? I think raising awareness that this is an issue would be a helpful step. Most people don&#x27;t think twice about just opening Google Maps to get to their destination; I&#x27;m sure some still don&#x27;t even know an open-source alternative exists. Something else to do would be to make their voices heard on the topic. The internet is great for sparking real change, so I think if more people were vocal about map accessibility, we could see a paradigm shift.¬†</div><h2><strong>You‚Äôve also been working on LitRes, the leading eBook platform in Eastern Europe. What are some important milestones you have reached during your tenure there? How did they affect the company&#x27;s growth</strong>?</h2><div class=\"paragraph\">When I joined LitRes in September 2011, we had a 300k user base, $50k monthly revenue from the website and a marketing team of just 3 people, including myself. </div><div class=\"paragraph\">When I left the company in 2016, we had 23M users (that‚Äôs 80x growth!) and $15M annual revenue. That happened mainly to these three innovations:</div><div class=\"paragraph\"><strong>1. An engineering approach to marketing:</strong></div><div class=\"paragraph\">I used the technical department as my resource. It was a unique approach in 2011 that helped to reach a full synergy of technical and marketing departments. </div><div class=\"paragraph\">Today we call this kind of top manager - CPO. With this approach, we integrated many marketing technologies into products that helped grow quickly.</div><div class=\"paragraph\"><strong>2. A passionate approach to team building and leadership:¬†</strong></div><div class=\"paragraph\">I always dreamed of building my own marketing team of growth hackers, who will share my passion for great achievements, and I did it. In 2016, the marketing team had already 12 people.</div><div class=\"paragraph\"><strong>3. Strong execution process:</strong></div><div class=\"paragraph\">I worked in several startups before LitRes, where I created my own task management methodology for startups, using Google Sheets as the tool for it. This approach helped to execute everything I implemented in marketing and product.</div><h2><strong>Why was the engineering approach to marketing so important?¬†</strong></h2><div class=\"paragraph\">When you have thousands of titles in your digital catalog, you must have very well-designed pages, folders, categories, and URL structures on the website to fit SEO, SEM, and direct marketing needs.</div><div class=\"paragraph\">Good catalog structure helped us to create a unique engine that generated over 5M high-quality ads for Google/Yandex search ads. This business case was highlighted on the Yandex website. </div><div class=\"paragraph\">At the same time, we had a boost in SEO traffic as a result of good structure and focus on UGC, where we incentivized users to leave book reviews.</div><div class=\"paragraph\">In 2012, I initiated a development of four key marketing services needed for fast growth:</div><ul><li>a personal recommendation engine that increased revenue coming from email marketing by up to 18% of the whole company&#x27;s revenue</li><li>an automated high-quality ads generator</li><li>a smart responsive direct marketing platform that could send a smart email to web users, push notifications for mobile users and check each channel&#x27;s health and user satisfaction</li><li>cohort-based traffic attribution system that helped to track each customer acquisition channel separately and reach better LTV/CAC numbers.</li></ul><div class=\"paragraph\">Also, I saw great potential in the development of the app for audiobooks. </div><div class=\"paragraph\">We started the development of the app called ‚ÄúListen!‚Äù in March 2012, launched the first version on October 2012, and in January 2013 we hit the top 10 overall grossing in the App Store and Google Play, becoming the #1 app with audiobooks.</div><div class=\"paragraph\">In 2015, the company generated $15M in revenue and became profitable and, soon after that, I decided to leave the company to become the CEO of MAPS.ME and expand my experience on a global scale.</div><div class=\"paragraph\">In 2013-2015, LitRes was #1 by revenue and installs in the non-gaming category in mobile stores in Russia.</div><h2><strong>That‚Äôs great. Let‚Äôs now talk about Level Up Basketball, your newest project. Why basketball? What prompted the idea for this company?</strong></h2><div class=\"paragraph\">Basketball has been a great love for me since I was a kid. I remember growing up in an area that didn&#x27;t have much interest in or community around the sport. </div><div class=\"paragraph\">I would have loved to have an online community of people who could help me get better and talk to me about basketball!¬†</div><div class=\"paragraph\">I like being able to leverage all of my experience with community building, app development and analytics to come in and carve out spaces that serve a purpose (mapping, sharing reviews, learning basketball, etc.) but also have a social, gamified element. </div><div class=\"paragraph\">In these communities, people can share whatever niche passion they have with others who will deeply understand them rather than feeling awkward talking about their interests to real-life friends and family who don&#x27;t share their passion.¬†</div><div class=\"paragraph\">So, Level Up Basketball is a true passion project for me. My co-founder is actually the guy I grew up playing basketball with. We would play until it was too dark to see the ball in front of our faces! </div><div class=\"paragraph\">He has been creating basketball-focused businesses since 2000, so when he came to me for advice about building a project for digitizing the training process, I was immediately all-in.¬†</div><div class=\"paragraph\">I was ready to immediately leverage all of my skills to build something huge that has never really been done before. </div><div class=\"paragraph\">It‚Äôs hard for basketball coaches and amateur players to find a reliable way to source training drills and create community around their love for basketball, which is crazy to me because it‚Äôs the number two team sport in the world with huge 450M players!</div><div class=\"image-container\"><img src=\"https://cdn.hackernoon.com/images/8wlyTs6rS1Ns9rTwC8LtCyE03B52-51a3zkb.jpeg\" alt=\"\" loading=\"auto\"/></div><div class=\"paragraph\">Sure, there are lots of YouTube videos and blogs, but it‚Äôs really difficult for people to aggregate the quality videos and tutorials on their own. </div><div class=\"paragraph\">With Level Up Basketball, we‚Äôve created a single hub for players around the world to access a unique kind of training app that adds features like gamification and ‚Äúsocial clout‚Äù to make the experience more fun.¬†</div><div class=\"paragraph\">Players can earn digital coins that can be used to upgrade their avatars and change their appearance. </div><div class=\"paragraph\">We‚Äôre also planning to connect to the metaverse in the future, allowing players‚Äô avatars to participate in virtual games based on their real-world skills for an even more immersive experience. </div><div class=\"paragraph\">We‚Äôre even working on adding blockchain rewards, which are really appealing to Gen Z.</div>","content:encodedSnippet":"Eugene Lisovskiy has been spearheading global tech companies for over 18 years, building communities and raising capital everywhere he goes. \nFrom working on LitRes.com, now the leading eBook platform in Eastern Europe, to growing MAPS.me into a top offline map app with over 150 million users, Lisovskiy‚Äôs passion for analytics and bringing people together have combined to lead him on a unique journey to his current project, Level Up Basket, a basketball training platform powered by community and gamification.¬†\nIn this interview, Eugene shares his opinions on growing a robust community in any niche, adapting your product to the metaverse, the power of outsourcing, and the future of AI.\nLet's talk about your backstory first. How did you get started in the tech industry?\nI started my career in 2004. Believe it or not, my educational background is actually in biotech and engineering rather than business! \nWhen I began college in 1999, I felt like biotech and medicine would be my future, and I expected to graduate and end up wearing a lab coat and creating things in a lab somewhere.¬†\nLife had different plans, though. My first kid was born right before I graduated from college, so, of course, I needed to make money and find something stable. \nI already had some entrepreneurial experience, so I took that and combined it with a side project I had at the time developing websites. \nThis was fine as a short-term fix, but I knew it wasn't what I wanted to keep doing.¬†\nAs I was looking around for system administrator or web developer jobs (again, because they were easy, reliable income), I got an offer from an international company to be their internet marketing manager. \nDid I have any experience with that? Absolutely not, but I thought it sounded like an interesting opportunity, so I went for it.¬†\nIt turns out that I was good at internet marketing, and I built a network in Europe that let me eventually move on from that global software company to grow my experience. \nIn 2010, I moved from internet marketing to the tech startup space. From there, I co-founded two companies, co-owned Russia's top e-book store, LitRes, and became CEO of Maps.me, which is what people primarily know me for. \nI've also been involved with a few other tech startups, and I'm currently the co-founder and CEO of a new basketball training app company called Level Up Basketball.\nSince Maps.me became so popular under your leadership, let's talk about that a little more. What types of problems are you solving with projects like Maps.me?\nA lot of people don't realize that giants like Google Maps don't have very up-to-date or complete maps for lesser-traveled regions, and they are expensive for commercial use.\nWhile it makes sense for there to be a better map of New York City (a densely populated urban area) than, say, a village in Nepal (a small, remote location), it's still just as important to have an accurate, complete map for both. \nFirst responders and humanitarian organizations rely on GPS and map tools to find people who are lost or to undertake search and rescue missions after natural disasters, so these maps can literally be a life-or-death thing.¬†\nHere are the problems Maps.me solves:¬†\nFirst, it puts mapping tools directly into the hands of anyone with a smartphone. Anyone can add or edit map locations and write reviews. \nFree, accessible maps are a core tenet of the OpenStreetMap project, which is what Maps.me's data is built on.¬†\nSecond, it creates a fun, rewarding community that encourages users to take charge of mapping out their locations. Nine months after the editor tool was added, over a million edits had already been made across 231 countries. \nThe desire to help was there; people just needed an easy tool like Maps.me to make it happen. I like to think of it as \"Minecraft for adults,\" also serving the greater good.¬†\nAccess to complete, accurate maps is critical and beneficial for the global community. What do you think other businesses and regular internet users can do to address this problem?\nYes, these maps are absolutely vital. Without accurate mapping, NGOs have a much harder time coordinating their efforts and aiding those who need it most, and first responders can't do their jobs as well or as quickly.\nIn 2017, Hurricane Maria was devastating Puerto Rico. The community came together to map the entire area within a week so that emergency teams could find where buildings and other structures had been to help people who were stuck or suffering much faster.\nI think one of the best things companies can do is remove things like copyright barriers and proprietary hardware or software requirements. \nIt should be a relatively easy, inexpensive task to access a reliable map, regardless of where you are. \nAnother thing that would be helpful is more cooperation. OpenStreetMap and Maps.me work so well because people from all over the globe cooperate to help improve the maps. Businesses could learn from this.¬†\nAs for users? I think raising awareness that this is an issue would be a helpful step. Most people don't think twice about just opening Google Maps to get to their destination; I'm sure some still don't even know an open-source alternative exists. Something else to do would be to make their voices heard on the topic. The internet is great for sparking real change, so I think if more people were vocal about map accessibility, we could see a paradigm shift.¬†\nYou‚Äôve also been working on LitRes, the leading eBook platform in Eastern Europe. What are some important milestones you have reached during your tenure there? How did they affect the company's growth?\nWhen I joined LitRes in September 2011, we had a 300k user base, $50k monthly revenue from the website and a marketing team of just 3 people, including myself. \nWhen I left the company in 2016, we had 23M users (that‚Äôs 80x growth!) and $15M annual revenue. That happened mainly to these three innovations:\n1. An engineering approach to marketing:\nI used the technical department as my resource. It was a unique approach in 2011 that helped to reach a full synergy of technical and marketing departments. \nToday we call this kind of top manager - CPO. With this approach, we integrated many marketing technologies into products that helped grow quickly.\n2. A passionate approach to team building and leadership:¬†\nI always dreamed of building my own marketing team of growth hackers, who will share my passion for great achievements, and I did it. In 2016, the marketing team had already 12 people.\n3. Strong execution process:\nI worked in several startups before LitRes, where I created my own task management methodology for startups, using Google Sheets as the tool for it. This approach helped to execute everything I implemented in marketing and product.\nWhy was the engineering approach to marketing so important?¬†\nWhen you have thousands of titles in your digital catalog, you must have very well-designed pages, folders, categories, and URL structures on the website to fit SEO, SEM, and direct marketing needs.\nGood catalog structure helped us to create a unique engine that generated over 5M high-quality ads for Google/Yandex search ads. This business case was highlighted on the Yandex website. \nAt the same time, we had a boost in SEO traffic as a result of good structure and focus on UGC, where we incentivized users to leave book reviews.\nIn 2012, I initiated a development of four key marketing services needed for fast growth:\n\na personal recommendation engine that increased revenue coming from email marketing by up to 18% of the whole company's revenue\nan automated high-quality ads generator\na smart responsive direct marketing platform that could send a smart email to web users, push notifications for mobile users and check each channel's health and user satisfaction\ncohort-based traffic attribution system that helped to track each customer acquisition channel separately and reach better LTV/CAC numbers.\n\nAlso, I saw great potential in the development of the app for audiobooks. \nWe started the development of the app called ‚ÄúListen!‚Äù in March 2012, launched the first version on October 2012, and in January 2013 we hit the top 10 overall grossing in the App Store and Google Play, becoming the #1 app with audiobooks.\nIn 2015, the company generated $15M in revenue and became profitable and, soon after that, I decided to leave the company to become the CEO of MAPS.ME and expand my experience on a global scale.\nIn 2013-2015, LitRes was #1 by revenue and installs in the non-gaming category in mobile stores in Russia.\nThat‚Äôs great. Let‚Äôs now talk about Level Up Basketball, your newest project. Why basketball? What prompted the idea for this company?\nBasketball has been a great love for me since I was a kid. I remember growing up in an area that didn't have much interest in or community around the sport. \nI would have loved to have an online community of people who could help me get better and talk to me about basketball!¬†\nI like being able to leverage all of my experience with community building, app development and analytics to come in and carve out spaces that serve a purpose (mapping, sharing reviews, learning basketball, etc.) but also have a social, gamified element. \nIn these communities, people can share whatever niche passion they have with others who will deeply understand them rather than feeling awkward talking about their interests to real-life friends and family who don't share their passion.¬†\nSo, Level Up Basketball is a true passion project for me. My co-founder is actually the guy I grew up playing basketball with. We would play until it was too dark to see the ball in front of our faces! \nHe has been creating basketball-focused businesses since 2000, so when he came to me for advice about building a project for digitizing the training process, I was immediately all-in.¬†\nI was ready to immediately leverage all of my skills to build something huge that has never really been done before. \nIt‚Äôs hard for basketball coaches and amateur players to find a reliable way to source training drills and create community around their love for basketball, which is crazy to me because it‚Äôs the number two team sport in the world with huge 450M players!\n\nSure, there are lots of YouTube videos and blogs, but it‚Äôs really difficult for people to aggregate the quality videos and tutorials on their own. \nWith Level Up Basketball, we‚Äôve created a single hub for players around the world to access a unique kind of training app that adds features like gamification and ‚Äúsocial clout‚Äù to make the experience more fun.¬†\nPlayers can earn digital coins that can be used to upgrade their avatars and change their appearance. \nWe‚Äôre also planning to connect to the metaverse in the future, allowing players‚Äô avatars to participate in virtual games based on their real-world skills for an even more immersive experience. \nWe‚Äôre even working on adding blockchain rewards, which are really appealing to Gen Z.","dc:creator":" Danny Wesley","content":"In this interview we dive into multiple topics, from growing a robust community for a startup in any niche, the power of outsourcing, adapting products to the metaverse, and the future of AI.","contentSnippet":"In this interview we dive into multiple topics, from growing a robust community for a startup in any niche, the power of outsourcing, adapting products to the metaverse, and the future of AI.","guid":"https://hackernoon.com/eugene-lisovskiy-level-up-basket-founder-community-is-the-core-of-everything-it-inspires-growth?source=rss","categories":["community","growth-hacking","metaverse","startups","interview","founders","founder-interview","founder-stories","hackernoon-es","hackernoon-hi","hackernoon-zh","hackernoon-vi","hackernoon-fr","hackernoon-pt","hackernoon-ja"],"isoDate":"2022-12-12T22:48:28.000Z","from":"https://hackernoon.com/feed"},{"creator":"Depth Hoar","title":"EDG Developer Update: Dec 4 - Dec 10, 2022","link":"https://blog.edgewa.re/edg-developer-update-nov-20-2/","pubDate":"Mon, 12 Dec 2022 22:48:57 GMT","content:encoded":"<h2 id=\"status-updates\">Status updates </h2><img src=\"https://blog.edgewa.re/content/images/2022/12/dec4.png\" alt=\"EDG Developer Update: Dec 4 - Dec 10, 2022\"><p></p><h3 id=\"all-node-operators-and-validators-are-asked-to-upgrade-their-nodes-to-v402\">All Node operators and Validators are asked to upgrade their nodes to <a href=\"https://github.com/edgeware-network/edgeware-node/releases/tag/v4.0.2\">V4.0.2</a></h3><ul><li><strong><a href=\"https://twitter.com/TheDepthHoar\">Depth Hoar</a> </strong>updated the <a href=\"https://escrow-sol.vercel.app/\">Escrow Dapp</a>, so now the IDs match the UI and the actual ID number. They have added more tests to a total of 15 unit tests. Also, the smart contract got some security updates. You can see the updates <a href=\"https://github.com/Depth-Hoar/escrow-sol/commits/main\">here</a>.</li><li><strong><u><a href=\"https://twitter.com/jankraus\">Jan Kraus</a></u> </strong>started making a new widget that will make using the Edgeware EVM more user-friendly. This automates some steps when converting from WASM to EVM and back, making things easier. You can see the example <a href=\"https://edgeware-website-fol2zulel-edgeware-agency.vercel.app/ecosystem\">here.</a></li></ul><h2 id=\"ecosystem-headlines\">Ecosystem Headlines</h2><h3></h3><h3 id=\"ecosystem-community\">Ecosystem &amp; Community </h3><ul><li><strong>Sub0</strong> is over. Although the events were not live-streamed, recordings of many of the talks <a href=\"https://twitter.com/Polkadot/status/1597711164225753088\" rel>will be available</a>. Watch the first day recap <a href=\"https://twitter.com/Polkadot/status/1597342066450767872\" rel>here</a>.</li><li>Watch <a href=\"https://www.youtube.com/watch?v=CnO_WC_i5vs\" rel>Gavin Woods&#x2019; talk</a> where he outlined Polkadot&#x2019;s path for 2023.</li><li>The Anti-Scam team has done quite a bit to help keep scams out of our ecosystem - see <a href=\"https://medium.com/polkadot-network/polkadots-anti-scam-initiatives-1660ef5787b7\" rel>here for a rundown</a> and how it is continuing to decentralize.</li><li>Listen to the latest <a href=\"https://twitter.com/Polkadot/status/1596825254982479873\" rel>Polkadot Community Call</a>, covering what is happening in the Polkadot ecosystem.</li><li>The <strong>Web3 Foundation</strong> research team has released a <a href=\"https://eprint.iacr.org/2022/1611\" rel>formal write-up</a> describing improvements that allow for more efficient verification for BLS signatures for individual as well as aggregated signatures.</li><li><strong>Joe Petrowski</strong> has written a blog post on the <a href=\"https://forum.polkadot.network/t/statemint-update-roadmap/1200\" rel>roadmap for Statemint and Statemine</a>.</li><li>The Fellowship has been seeded with the <a href=\"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.api.onfinality.io%2Fpublic-ws#/fellowship\" rel>first 45 members</a>. The Fellowship is essentially a more <a href=\"https://wiki.polkadot.network/docs/learn-gov2#polkadot-fellowship\" rel>decentralized version of the Technical Committee</a>, replacing it in OpenGov (Gov2).</li><li>On-chain <strong><a href=\"https://medium.com/acalanetwork/on-chain-polkadot-alliance-formed-to-recognize-ecosystem-contributors-and-establish-community-480d83eab136\" rel>Polkadot Alliance</a></strong><a href=\"https://medium.com/acalanetwork/on-chain-polkadot-alliance-formed-to-recognize-ecosystem-contributors-and-establish-community-480d83eab136\" rel> formed</a> to recognize ecosystem contributors and establish community code of ethics.</li></ul><h3 id=\"tools\">Tools</h3><ul><li><strong>Polkadot-JS API <a href=\"https://github.com/polkadot-js/api/releases/tag/v9.9.4\" rel>v9.9.4</a></strong> has been released.</li><li><strong>Acala</strong> has <a href=\"https://twitter.com/XiliangChen/status/1595656879509999616\" rel>released a tool</a>, Chopsticks, which allows you to view a &#x201C;parallel reality&#x201D; of any Substrate chain, to see the effects of extrinsics submitted.</li><li>The November ink! update has been <a href=\"https://use.ink/monthly-update/2022/11/\" rel>published</a>.</li></ul>","content:encodedSnippet":"Status updates \n\n\nAll Node operators and Validators are asked to upgrade their nodes to V4.0.2\n\nDepth Hoar updated the Escrow Dapp, so now the IDs match the UI and the actual ID number. They have added more tests to a total of 15 unit tests. Also, the smart contract got some security updates. You can see the updates here.\nJan Kraus started making a new widget that will make using the Edgeware EVM more user-friendly. This automates some steps when converting from WASM to EVM and back, making things easier. You can see the example here.\n\nEcosystem Headlines\n\nEcosystem & Community \n\nSub0 is over. Although the events were not live-streamed, recordings of many of the talks will be available. Watch the first day recap here.\nWatch Gavin Woods‚Äô talk where he outlined Polkadot‚Äôs path for 2023.\nThe Anti-Scam team has done quite a bit to help keep scams out of our ecosystem - see here for a rundown and how it is continuing to decentralize.\nListen to the latest Polkadot Community Call, covering what is happening in the Polkadot ecosystem.\nThe Web3 Foundation research team has released a formal write-up describing improvements that allow for more efficient verification for BLS signatures for individual as well as aggregated signatures.\nJoe Petrowski has written a blog post on the roadmap for Statemint and Statemine.\nThe Fellowship has been seeded with the first 45 members. The Fellowship is essentially a more decentralized version of the Technical Committee, replacing it in OpenGov (Gov2).\nOn-chain Polkadot Alliance formed to recognize ecosystem contributors and establish community code of ethics.\n\nTools\n\nPolkadot-JS API v9.9.4 has been released.\nAcala has released a tool, Chopsticks, which allows you to view a ‚Äúparallel reality‚Äù of any Substrate chain, to see the effects of extrinsics submitted.\nThe November ink! update has been published.","dc:creator":"Depth Hoar","content":"Keeping you up to date on all things technical related to Edgeware and more! Always in a human-readable form, we look at the code changes, so you don't have to.","contentSnippet":"Keeping you up to date on all things technical related to Edgeware and more! Always in a human-readable form, we look at the code changes, so you don't have to.","guid":"6397a3765c17f5003d54cf02","categories":["Weekly"],"isoDate":"2022-12-12T22:48:57.000Z","from":"https://blog.edgewa.re/rss/"},{"creator":"@xerophyte Shumo Chu","title":"SNARKed Merkle Sum Tree: A Practical Proof-of-Solvency Protocol based on Vitalik's Proposal","link":"https://ethresear.ch/t/snarked-merkle-sum-tree-a-practical-proof-of-solvency-protocol-based-on-vitaliks-proposal/14405/1","pubDate":"Mon, 12 Dec 2022 22:49:18 +0000","dc:creator":"@xerophyte Shumo Chu","content":" <p>Shumo Chu, Sebastien La Duca, and Brandon Gomes (<a class=\"mention\" href=\"https://ethresear.ch/u/bhgomes\">@bhgomes</a>) (ordered Alphabetically)</p>\n<p><em>Special thanks to Yi Sun on Proof-of-Asset discussion, and Dankrad Feist and Daniel Lubarov for helpful discussions on FRI</em></p>\n<h2>\n<a name=\"problem-definition-1\" class=\"anchor\" href=\"https://ethresear.ch#problem-definition-1\"></a>Problem Definition</h2>\n<p>Proof of Solvency (PoSol) answers a simple question:</p>\n<blockquote>\n<p>Can we build cryptographic proofs to show that a Centralized Exchange (CEX) has enough reserves to back all user funds?</p>\n</blockquote>\n<p><a href=\"https://vitalik.ca/general/2022/11/19/proof_of_solvency.html\" rel=\"noopener nofollow ugc\">In Vitalik‚Äôs own words</a>:</p>\n<blockquote>\n<p>If you prove that customers‚Äô deposits equal X (‚Äúproof of liabilities‚Äù), and prove ownership of the private keys of X coins (‚Äúproof of assets‚Äù), then you have a proof of solvency: you‚Äôve proven the exchange has the funds to pay back all of its depositors.</p>\n</blockquote>\n<p>So in very simple terms:</p>\n<p><span class=\"math\">\\text{Proof of Solvency}: \\textsf{PA}\\,\\,(\\text{Provable Assets}) - \\textsf{PL}\\,\\,(\\text{Provable Liabilities}) \\ge 0</span></p>\n<h2>\n<a name=\"proof-of-assets-2\" class=\"anchor\" href=\"https://ethresear.ch#proof-of-assets-2\"></a>Proof of Assets</h2>\n<p>The simplest solution is just signing transactions over the owned addresses:</p>\n<blockquote>\n<p>To prove that you hold X coins, you simply move X coins around at some pre-agreed time or in a transaction where the data field contains the words ‚Äúthese funds belong to Binance‚Äù. To avoid paying transaction fees, you could sign an off-chain message instead; both Bitcoin and Ethereum have standards for off-chain signed messages.</p>\n</blockquote>\n<p>To protect privacy and avoid revealing the entire set of the CEX‚Äôs addresses, a zero-knowlege proof can be used to prove ownership of assets. One example is using something like <a href=\"https://github.com/yi-sun/zk-attestor\" rel=\"noopener nofollow ugc\">zkAttestor</a>. The basic idea is to attest to the ownership of assets against a certain block-header. Efficiency of zkSNARK-based attestation can be improved significantly by batching through proof aggregation (for example, using Halo2). There is an ongoing effort from <a href=\"https://github.com/axiom-crypto\" rel=\"noopener nofollow ugc\">Axiom</a> (with overlapping authors of zkAttestor) working on this problem.</p>\n<h2>\n<a name=\"proof-of-liabilities-existing-solutions-3\" class=\"anchor\" href=\"https://ethresear.ch#proof-of-liabilities-existing-solutions-3\"></a>Proof of Liabilities: Existing Solutions</h2>\n<p>The idea behind proof of liabilities is to let the CEX publish a cryptographic accumulator <span class=\"math\">R</span> over the set of liabilities of the exchange (which we call the ‚Äúliability set‚Äù) and a total liability <span class=\"math\">B</span> such that:</p>\n<ol>\n<li>The accumulator binds to the total liability <span class=\"math\">B</span>, i.e. the exchange cannot change their answer after commiting</li>\n<li>Any user can check that their assets are included in the liability set via a proof that is consistent with the total <span class=\"math\">B</span> and <span class=\"math\">R</span>\n</li>\n</ol>\n<p>Vitalik provides two protocols that solve this problem, we discuss them below.</p>\n<h3>\n<a name=\"solution-1-merkle-sum-tree-4\" class=\"anchor\" href=\"https://ethresear.ch#solution-1-merkle-sum-tree-4\"></a>Solution 1: Merkle Sum Tree</h3>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44.png\" data-download-href=\"https://ethresear.ch/uploads/default/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44\" title=\"\"><img src=\"https://ethresear.ch/uploads/default/optimized/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44_2_690x354.png\" alt=\"\" data-base62-sha1=\"84MYrSdewgGaSZDBC2g2uEzBMwY\" width=\"690\" height=\"354\" srcset=\"https://ethresear.ch/uploads/default/optimized/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44_2_690x354.png, https://ethresear.ch/uploads/default/original/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44.png 1.5x, https://ethresear.ch/uploads/default/original/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44.png 2x\" data-small-upload=\"https://ethresear.ch/uploads/default/optimized/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44_2_10x10.png\"></a></div><p></p>\n<p>Merkle Sum Tree is a special kind of merkle tree, in which each inner node contains the sum of the balances of its child tree. The great advantage of this scheme is its simplicity (not a bad thing!). In fact, since Vitalik wrote about his design, Mazars already built a proof of liability product for Binance (<a href=\"https://veritas.mazars.com/binance/\" rel=\"noopener nofollow ugc\">here</a>). However, as we will articulate next, this solution has devastating privacy leakage.</p>\n<h3>\n<a name=\"solution-2-kzg-customized-iop-based-sum-proof-kzg-sum-iop-5\" class=\"anchor\" href=\"https://ethresear.ch#solution-2-kzg-customized-iop-based-sum-proof-kzg-sum-iop-5\"></a>Solution 2: KZG - Customized IOP based Sum Proof (KZG-Sum IOP)</h3>\n<p>To improve the privacy and robustness, Vitalik proposed a second scheme[^1] based on KZG and a customized proof system based on an IOP.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a.png\" data-download-href=\"https://ethresear.ch/uploads/default/6d95a162c98399fd73144e42eb60a9e1e6edf27a\" title=\"\"><img src=\"https://ethresear.ch/uploads/default/optimized/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a_2_690x344.png\" alt=\"\" data-base62-sha1=\"fDqCOcbjga26hLYBjnaMtY0qEki\" width=\"690\" height=\"344\" srcset=\"https://ethresear.ch/uploads/default/optimized/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a_2_690x344.png, https://ethresear.ch/uploads/default/original/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a.png 1.5x, https://ethresear.ch/uploads/default/original/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a.png 2x\" data-small-upload=\"https://ethresear.ch/uploads/default/optimized/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a_2_10x10.png\"></a></div><p></p>\n<p>As shown in the figure above, instead of committing each user‚Äôs username and balances in a merkle tree, we can commit a user‚Äôs username and balance at adjacent locations in a vector commitment like KZG. Each user only needs to remember her location (in the above example, Charlie‚Äôs username is committed in the index 4, his balance is committed in the index 5).</p>\n<p>Next, to prove the summation of the balances, Vitalik proposed a customized IOP-based proof system for efficiency.</p>\n<p>Unlike the Merkle Sum Tree solution, this preserves privacy for the user‚Äôs balance. A user doesn‚Äôt need anyone else‚Äôs balance to attest to the fact that their liability is included.</p>\n<h2>\n<a name=\"problems-with-existing-solutions-6\" class=\"anchor\" href=\"https://ethresear.ch#problems-with-existing-solutions-6\"></a>Problems with Existing Solutions</h2>\n<h3>\n<a name=\"merkle-sum-tree-solution-7\" class=\"anchor\" href=\"https://ethresear.ch#merkle-sum-tree-solution-7\"></a>Merkle Sum Tree Solution</h3>\n<p>As mentioned in Vitalik‚Äôs blog post, Merkle Sum Tree solution (the one adopted by Binance now) suffers a huge privacy loss for both CEXs and its customers. In more detail:</p>\n<p>When a user queries the CEX for a liability proof, the CEX needs to provide a merkle proof containing the balances of <em>other users‚Äô balances</em> along the merkle tree. In the above example, the merkle proof provided to Charlie leaks:</p>\n<ul>\n<li>David‚Äôs Balance</li>\n<li>The sum of Alice and Bob‚Äôs balance</li>\n<li>The sum of {Eve, Fred, Greta, Henry}'s balance</li>\n</ul>\n<p>By creating a number of spam accounts, adversaries can not only gain the information of real users balances, they can also discover the distribution of user‚Äôs balances across the CEX. What makes things worse is that this balance information can be correlated with other known infomation (such as on-chain data of token transfers). By correlating the balances, transfers on chain, and balance leakage from MST, many users‚Äô identities can be inferred. This could lead to disastrous privacy concerns for customer data in CEXs.</p>\n<blockquote>\n<p>We kill people based on metadata.<br>\n‚Äì Michael Hayden, Former Director of NSA and CIA</p>\n</blockquote>\n<h3>\n<a name=\"kzg-iop-sum-solution-8\" class=\"anchor\" href=\"https://ethresear.ch#kzg-iop-sum-solution-8\"></a>KZG - IOP Sum Solution</h3>\n<p>Compared with Merkle Sum Tree, KZG-IOP Sum is a well-balanced solution on a technical level; the major issues are at the practical and engineering level.</p>\n<h4>\n<a name=\"very-large-trusted-setup-9\" class=\"anchor\" href=\"https://ethresear.ch#very-large-trusted-setup-9\"></a>Very Large Trusted Setup</h4>\n<p>KZG-IOP Sum solution requires a trusted setup. Some big CEXs could have more than 200 million users. This could translate to more than 400 million elements in the vector commitment. Now, the biggest trusted setup so far (<a href=\"https://github.com/weijiekoh/perpetualpowersoftau\" rel=\"noopener nofollow ugc\">the Perpetual Powers of Tau</a>) has an effective size of <span class=\"math\">2^{28} \\simeq 270 \\text{ million}</span>. A trusted setup of at least twice this size would be needed. This requires a huge effort and also scarifices on decentralization since the larger the trusted setup size, the higher requirement that it places on the participants.</p>\n<h4>\n<a name=\"requiring-constructing-a-new-customized-proof-system-10\" class=\"anchor\" href=\"https://ethresear.ch#requiring-constructing-a-new-customized-proof-system-10\"></a>Requiring Constructing a New, Customized Proof System</h4>\n<p>In addition, Vitalik‚Äôs proposal, while elegant, requires building a customized proof system protocol. When implementing these systems using custom protocols we usually run into three main problems:</p>\n<ol>\n<li>In practice they are usually not more efficient (potential theoretical performance gain does not align with concrete performance)</li>\n<li>Vastly increased code complexity</li>\n<li>Reduced modularity with existing codebases and existing proof systems</li>\n<li>Harder to do a good security audit since the auditors are less familiar with these customized constructions</li>\n</ol>\n<h2>\n<a name=\"our-solution-snarked-merkle-sum-proof-of-liablities-11\" class=\"anchor\" href=\"https://ethresear.ch#our-solution-snarked-merkle-sum-proof-of-liablities-11\"></a>Our Solution: SNARKed Merkle Sum Proof of Liablities</h2>\n<p>We present below a simple SNARKed Merkle Sum Tree solution that addresses the above problems. There are two components to our protocol:</p>\n<ol>\n<li>A merkle sum tree (Same as Vitalik‚Äôs design) with Poseidon over the Goldilocks Field</li>\n<li>zkSNARK merkle proofs of inclusion of liabilities using Plonky2</li>\n</ol>\n<h4>\n<a name=\"design-philosophy-12\" class=\"anchor\" href=\"https://ethresear.ch#design-philosophy-12\"></a>Design Philosophy</h4>\n<p>In this setting, our primary concerns are:</p>\n<ol>\n<li>Construction time for the ‚ÄúSum Commitment‚Äù - The CEX should be able run these as frequently as possible even if they have hundreds of millions of users</li>\n<li>Prover time for user queries - It should be as easy as possible for users to attest to the fact that their assets are accounted for. The harder it is, the less likely it is they will do it, and having to wait more than a few seconds will add friction.</li>\n<li>Large exchanges have on the order of <span class=\"math\">2^{28}</span> users. Any public parameters the protocol uses should be practical to produce or verify.</li>\n</ol>\n<p>In this setting, we don‚Äôt really require proofs to be very small (e.g. &lt; 4KB). Since we are not verifying proofs on-chain, it‚Äôs totally fine if proofs are 2-3 MBs.</p>\n<p>Given these design goals, we think Poseidon over the Goldilocks field with Plonky2 inclusion proofs is the correct choice because:</p>\n<ol>\n<li>No trusted setup - this eliminates the issue with KZG, where the setup is prohibitively large to run and/or verify.</li>\n<li>Commitment Performance - Poseidon on Goldilocks is one of the fastest arithmetic (ZKP friendly) hash functions yet have a very good concrete performance. Since CEX needs to compute hashes (in the worst case) in the order of <span class=\"math\">2^{28}</span> at sub-microsecond per hash it takes on the order of a minute to build the merkle sum tree</li>\n<li>Prover Performance - Plonky2 is a very fast FRI-based PLONK implementation that can prove merkle tree inclusion (at sizes around <span class=\"math\">2^{28}</span>) in seconds that can be verified in milliseconds</li>\n</ol>\n<h4>\n<a name=\"individual-user-proofs-in-more-detail-13\" class=\"anchor\" href=\"https://ethresear.ch#individual-user-proofs-in-more-detail-13\"></a>Individual User Proofs in More Detail</h4>\n<p>To complete a proof of liabilities argument, the CEX will need to have proof available to any individual user to show that her account/balance is included.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4.png\" data-download-href=\"https://ethresear.ch/uploads/default/37be86ed50c6f4a3d9122c3f1aca57600f576ba4\" title=\"\"><img src=\"https://ethresear.ch/uploads/default/optimized/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4_2_690x338.png\" alt=\"\" data-base62-sha1=\"7X8sIBa382NaQDh0FyinZMQqxNi\" width=\"690\" height=\"338\" srcset=\"https://ethresear.ch/uploads/default/optimized/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4_2_690x338.png, https://ethresear.ch/uploads/default/optimized/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4_2_1035x507.png 1.5x, https://ethresear.ch/uploads/default/optimized/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4_2_1380x676.png 2x\" data-small-upload=\"https://ethresear.ch/uploads/default/optimized/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4_2_10x10.png\"></a></div><p></p>\n<p>If a user with id <span class=\"math\">i</span> asks for a proof that their assets are included in the sum, the prover will proceed as follows:</p>\n<ol>\n<li>Create a merkle proof over the leaf for user <span class=\"math\">i</span>\n</li>\n<li>Wrap that merkle proof in a SNARK proving the following statement:\n<ul>\n<li>Public Inputs:\n<ul>\n<li>user ID <span class=\"math\">i</span>\n</li>\n<li>claimed balance <span class=\"math\">b</span>\n</li>\n<li>merkle sum balance-root <span class=\"math\">(R, B)</span>\n</li>\n</ul>\n</li>\n<li>Private Witness:\n<ul>\n<li>merkle inclusion proof <span class=\"math\">\\pi_{\\textsf{MT}}</span> for the leaf</li>\n<li>intermediate partial sums along the tree</li>\n</ul>\n</li>\n<li>Statement:\n<ul>\n<li>merkle inclusion proof verifier accepts against <span class=\"math\">R</span> and <span class=\"math\">\\pi_{\\textsf{MT}}</span>\n</li>\n<li>the balances along the inclusion proof sum to <span class=\"math\">B</span>\n</li>\n<li>no intermediate balance overflows</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Send the SNARK proof <span class=\"math\">\\pi_{\\textsf{SNARK}}</span> for this statement to the user</li>\n</ol>\n<p>Then, the user will accept this proof if the SNARK verifier accepts <span class=\"math\">\\pi_{\\textsf{SNARK}}</span> with <span class=\"math\">b</span> and <span class=\"math\">i</span> matching the user‚Äôs exchange details and <span class=\"math\">(R, B)</span> matching the known balance-root for the exchange.</p>\n<h3>\n<a name=\"comparing-snark-based-proof-of-liabilities-with-merkle-sum-tree-and-kzg-iop-sum-14\" class=\"anchor\" href=\"https://ethresear.ch#comparing-snark-based-proof-of-liabilities-with-merkle-sum-tree-and-kzg-iop-sum-14\"></a>Comparing SNARK-based Proof of Liabilities with Merkle Sum Tree and KZG-IOP Sum</h3>\n<p>In our solution, for a CEX with 200 million users, we expect the proof size for the user proof be roughly 2-3 MB (we can tune the verifier/prover performance trade-off by changing the FRI blowup factor)and the proof verification time should be sub-second. While KZG-IOP Sum has a smaller proof size, the verifier efficiency is not the bottleneck of the PoSol implementation.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/ce1646c75f4f2f195b15120e124276ef8b538164\" title=\"Screen Shot 2022-12-12 at 17.37.46\"><img src=\"https://ethresear.ch/uploads/default/optimized/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164_2_533x500.jpeg\" alt=\"Screen Shot 2022-12-12 at 17.37.46\" data-base62-sha1=\"tp85kM9fmt3VNIrOvKyEV2POJFy\" width=\"533\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164_2_533x500.jpeg, https://ethresear.ch/uploads/default/optimized/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164_2_799x750.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164_2_1066x1000.jpeg 2x\" data-small-upload=\"https://ethresear.ch/uploads/default/optimized/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164_2_10x10.png\"></a></div><p></p>\n<p>The key advantage of our solution is efficient commitment construction with a relatively low engineering complexity. SNARK-ed Merkle Sum Tree leverages the hardware acceleration friendly Goldilocks field to gain a good concrete tree-building performance (see the details in the table below) and as well as reusing a mature existing proof system implementation (<code>plonky2</code>) for fast user proofs.</p> ","contentSnippet":"Shumo Chu, Sebastien La Duca, and Brandon Gomes (@bhgomes) (ordered Alphabetically)\nSpecial thanks to Yi Sun on Proof-of-Asset discussion, and Dankrad Feist and Daniel Lubarov for helpful discussions on FRI\nProblem Definition\nProof of Solvency (PoSol) answers a simple question:\nCan we build cryptographic proofs to show that a Centralized Exchange (CEX) has enough reserves to back all user funds?\nIn Vitalik‚Äôs own words:\nIf you prove that customers‚Äô deposits equal X (‚Äúproof of liabilities‚Äù), and prove ownership of the private keys of X coins (‚Äúproof of assets‚Äù), then you have a proof of solvency: you‚Äôve proven the exchange has the funds to pay back all of its depositors.\nSo in very simple terms:\n\\text{Proof of Solvency}: \\textsf{PA}\\,\\,(\\text{Provable Assets}) - \\textsf{PL}\\,\\,(\\text{Provable Liabilities}) \\ge 0\nProof of Assets\nThe simplest solution is just signing transactions over the owned addresses:\nTo prove that you hold X coins, you simply move X coins around at some pre-agreed time or in a transaction where the data field contains the words ‚Äúthese funds belong to Binance‚Äù. To avoid paying transaction fees, you could sign an off-chain message instead; both Bitcoin and Ethereum have standards for off-chain signed messages.\nTo protect privacy and avoid revealing the entire set of the CEX‚Äôs addresses, a zero-knowlege proof can be used to prove ownership of assets. One example is using something like zkAttestor. The basic idea is to attest to the ownership of assets against a certain block-header. Efficiency of zkSNARK-based attestation can be improved significantly by batching through proof aggregation (for example, using Halo2). There is an ongoing effort from Axiom (with overlapping authors of zkAttestor) working on this problem.\nProof of Liabilities: Existing Solutions\nThe idea behind proof of liabilities is to let the CEX publish a cryptographic accumulator R over the set of liabilities of the exchange (which we call the ‚Äúliability set‚Äù) and a total liability B such that:\nThe accumulator binds to the total liability B, i.e. the exchange cannot change their answer after commiting\nAny user can check that their assets are included in the liability set via a proof that is consistent with the total B and R\n\n\nVitalik provides two protocols that solve this problem, we discuss them below.\nSolution 1: Merkle Sum Tree\n\n\n\nMerkle Sum Tree is a special kind of merkle tree, in which each inner node contains the sum of the balances of its child tree. The great advantage of this scheme is its simplicity (not a bad thing!). In fact, since Vitalik wrote about his design, Mazars already built a proof of liability product for Binance (here). However, as we will articulate next, this solution has devastating privacy leakage.\nSolution 2: KZG - Customized IOP based Sum Proof (KZG-Sum IOP)\nTo improve the privacy and robustness, Vitalik proposed a second scheme[^1] based on KZG and a customized proof system based on an IOP.\n\n\n\nAs shown in the figure above, instead of committing each user‚Äôs username and balances in a merkle tree, we can commit a user‚Äôs username and balance at adjacent locations in a vector commitment like KZG. Each user only needs to remember her location (in the above example, Charlie‚Äôs username is committed in the index 4, his balance is committed in the index 5).\nNext, to prove the summation of the balances, Vitalik proposed a customized IOP-based proof system for efficiency.\nUnlike the Merkle Sum Tree solution, this preserves privacy for the user‚Äôs balance. A user doesn‚Äôt need anyone else‚Äôs balance to attest to the fact that their liability is included.\nProblems with Existing Solutions\nMerkle Sum Tree Solution\nAs mentioned in Vitalik‚Äôs blog post, Merkle Sum Tree solution (the one adopted by Binance now) suffers a huge privacy loss for both CEXs and its customers. In more detail:\nWhen a user queries the CEX for a liability proof, the CEX needs to provide a merkle proof containing the balances of other users‚Äô balances along the merkle tree. In the above example, the merkle proof provided to Charlie leaks:\nDavid‚Äôs Balance\nThe sum of Alice and Bob‚Äôs balance\nThe sum of {Eve, Fred, Greta, Henry}'s balance\nBy creating a number of spam accounts, adversaries can not only gain the information of real users balances, they can also discover the distribution of user‚Äôs balances across the CEX. What makes things worse is that this balance information can be correlated with other known infomation (such as on-chain data of token transfers). By correlating the balances, transfers on chain, and balance leakage from MST, many users‚Äô identities can be inferred. This could lead to disastrous privacy concerns for customer data in CEXs.\nWe kill people based on metadata.\nKZG - IOP Sum Solution\nCompared with Merkle Sum Tree, KZG-IOP Sum is a well-balanced solution on a technical level; the major issues are at the practical and engineering level.\nVery Large Trusted Setup\nKZG-IOP Sum solution requires a trusted setup. Some big CEXs could have more than 200 million users. This could translate to more than 400 million elements in the vector commitment. Now, the biggest trusted setup so far (the Perpetual Powers of Tau) has an effective size of 2^{28} \\simeq 270 \\text{ million}. A trusted setup of at least twice this size would be needed. This requires a huge effort and also scarifices on decentralization since the larger the trusted setup size, the higher requirement that it places on the participants.\nRequiring Constructing a New, Customized Proof System\nIn addition, Vitalik‚Äôs proposal, while elegant, requires building a customized proof system protocol. When implementing these systems using custom protocols we usually run into three main problems:\nIn practice they are usually not more efficient (potential theoretical performance gain does not align with concrete performance)\nVastly increased code complexity\nReduced modularity with existing codebases and existing proof systems\nHarder to do a good security audit since the auditors are less familiar with these customized constructions\nOur Solution: SNARKed Merkle Sum Proof of Liablities\nWe present below a simple SNARKed Merkle Sum Tree solution that addresses the above problems. There are two components to our protocol:\nA merkle sum tree (Same as Vitalik‚Äôs design) with Poseidon over the Goldilocks Field\nzkSNARK merkle proofs of inclusion of liabilities using Plonky2\nDesign Philosophy\nIn this setting, our primary concerns are:\nConstruction time for the ‚ÄúSum Commitment‚Äù - The CEX should be able run these as frequently as possible even if they have hundreds of millions of users\nProver time for user queries - It should be as easy as possible for users to attest to the fact that their assets are accounted for. The harder it is, the less likely it is they will do it, and having to wait more than a few seconds will add friction.\nLarge exchanges have on the order of 2^{28} users. Any public parameters the protocol uses should be practical to produce or verify.\nIn this setting, we don‚Äôt really require proofs to be very small (e.g. < 4KB). Since we are not verifying proofs on-chain, it‚Äôs totally fine if proofs are 2-3 MBs.\nGiven these design goals, we think Poseidon over the Goldilocks field with Plonky2 inclusion proofs is the correct choice because:\nNo trusted setup - this eliminates the issue with KZG, where the setup is prohibitively large to run and/or verify.\nCommitment Performance - Poseidon on Goldilocks is one of the fastest arithmetic (ZKP friendly) hash functions yet have a very good concrete performance. Since CEX needs to compute hashes (in the worst case) in the order of 2^{28} at sub-microsecond per hash it takes on the order of a minute to build the merkle sum tree\nProver Performance - Plonky2 is a very fast FRI-based PLONK implementation that can prove merkle tree inclusion (at sizes around 2^{28}) in seconds that can be verified in milliseconds\nIndividual User Proofs in More Detail\nTo complete a proof of liabilities argument, the CEX will need to have proof available to any individual user to show that her account/balance is included.\n\n\n\nIf a user with id i asks for a proof that their assets are included in the sum, the prover will proceed as follows:\nCreate a merkle proof over the leaf for user i\n\nWrap that merkle proof in a SNARK proving the following statement:\n\nPublic Inputs:\n\nuser ID i\n\nclaimed balance b\n\nmerkle sum balance-root (R, B)\n\n\n\nPrivate Witness:\n\nmerkle inclusion proof \\pi_{\\textsf{MT}} for the leaf\nintermediate partial sums along the tree\nStatement:\n\nmerkle inclusion proof verifier accepts against R and \\pi_{\\textsf{MT}}\n\nthe balances along the inclusion proof sum to B\n\nno intermediate balance overflows\nSend the SNARK proof \\pi_{\\textsf{SNARK}} for this statement to the user\nThen, the user will accept this proof if the SNARK verifier accepts \\pi_{\\textsf{SNARK}} with b and i matching the user‚Äôs exchange details and (R, B) matching the known balance-root for the exchange.\nComparing SNARK-based Proof of Liabilities with Merkle Sum Tree and KZG-IOP Sum\nIn our solution, for a CEX with 200 million users, we expect the proof size for the user proof be roughly 2-3 MB (we can tune the verifier/prover performance trade-off by changing the FRI blowup factor)and the proof verification time should be sub-second. While KZG-IOP Sum has a smaller proof size, the verifier efficiency is not the bottleneck of the PoSol implementation.\n\n\n\nThe key advantage of our solution is efficient commitment construction with a relatively low engineering complexity. SNARK-ed Merkle Sum Tree leverages the hardware acceleration friendly Goldilocks field to gain a good concrete tree-building performance (see the details in the table below) and as well as reusing a mature existing proof system implementation (plonky2) for fast user proofs.","guid":"ethresear.ch-post-36718","isoDate":"2022-12-12T22:49:18.000Z","from":"https://ethresear.ch/posts.rss"},{"creator":"xerophyte","title":"SNARKed Merkle Sum Tree: A Practical Proof-of-Solvency Protocol based on Vitalik's Proposal","link":"https://ethresear.ch/t/snarked-merkle-sum-tree-a-practical-proof-of-solvency-protocol-based-on-vitaliks-proposal/14405","pubDate":"Mon, 12 Dec 2022 22:49:18 +0000","dc:creator":"xerophyte","content":"\n            <p>Shumo Chu, Sebastien La Duca, and Brandon Gomes (<a class=\"mention\" href=\"https://ethresear.ch/u/bhgomes\">@bhgomes</a>) (ordered Alphabetically)</p>\n<p><em>Special thanks to Yi Sun on Proof-of-Asset discussion, and Dankrad Feist and Daniel Lubarov for helpful discussions on FRI</em></p>\n<h2>\n<a name=\"problem-definition-1\" class=\"anchor\" href=\"https://ethresear.ch#problem-definition-1\"></a>Problem Definition</h2>\n<p>Proof of Solvency (PoSol) answers a simple question:</p>\n<blockquote>\n<p>Can we build cryptographic proofs to show that a Centralized Exchange (CEX) has enough reserves to back all user funds?</p>\n</blockquote>\n<p><a href=\"https://vitalik.ca/general/2022/11/19/proof_of_solvency.html\" rel=\"noopener nofollow ugc\">In Vitalik‚Äôs own words</a>:</p>\n<blockquote>\n<p>If you prove that customers‚Äô deposits equal X (‚Äúproof of liabilities‚Äù), and prove ownership of the private keys of X coins (‚Äúproof of assets‚Äù), then you have a proof of solvency: you‚Äôve proven the exchange has the funds to pay back all of its depositors.</p>\n</blockquote>\n<p>So in very simple terms:</p>\n<p><span class=\"math\">\\text{Proof of Solvency}: \\textsf{PA}\\,\\,(\\text{Provable Assets}) - \\textsf{PL}\\,\\,(\\text{Provable Liabilities}) \\ge 0</span></p>\n<h2>\n<a name=\"proof-of-assets-2\" class=\"anchor\" href=\"https://ethresear.ch#proof-of-assets-2\"></a>Proof of Assets</h2>\n<p>The simplest solution is just signing transactions over the owned addresses:</p>\n<blockquote>\n<p>To prove that you hold X coins, you simply move X coins around at some pre-agreed time or in a transaction where the data field contains the words ‚Äúthese funds belong to Binance‚Äù. To avoid paying transaction fees, you could sign an off-chain message instead; both Bitcoin and Ethereum have standards for off-chain signed messages.</p>\n</blockquote>\n<p>To protect privacy and avoid revealing the entire set of the CEX‚Äôs addresses, a zero-knowlege proof can be used to prove ownership of assets. One example is using something like <a href=\"https://github.com/yi-sun/zk-attestor\" rel=\"noopener nofollow ugc\">zkAttestor</a>. The basic idea is to attest to the ownership of assets against a certain block-header. Efficiency of zkSNARK-based attestation can be improved significantly by batching through proof aggregation (for example, using Halo2). There is an ongoing effort from <a href=\"https://github.com/axiom-crypto\" rel=\"noopener nofollow ugc\">Axiom</a> (with overlapping authors of zkAttestor) working on this problem.</p>\n<h2>\n<a name=\"proof-of-liabilities-existing-solutions-3\" class=\"anchor\" href=\"https://ethresear.ch#proof-of-liabilities-existing-solutions-3\"></a>Proof of Liabilities: Existing Solutions</h2>\n<p>The idea behind proof of liabilities is to let the CEX publish a cryptographic accumulator <span class=\"math\">R</span> over the set of liabilities of the exchange (which we call the ‚Äúliability set‚Äù) and a total liability <span class=\"math\">B</span> such that:</p>\n<ol>\n<li>The accumulator binds to the total liability <span class=\"math\">B</span>, i.e. the exchange cannot change their answer after commiting</li>\n<li>Any user can check that their assets are included in the liability set via a proof that is consistent with the total <span class=\"math\">B</span> and <span class=\"math\">R</span>\n</li>\n</ol>\n<p>Vitalik provides two protocols that solve this problem, we discuss them below.</p>\n<h3>\n<a name=\"solution-1-merkle-sum-tree-4\" class=\"anchor\" href=\"https://ethresear.ch#solution-1-merkle-sum-tree-4\"></a>Solution 1: Merkle Sum Tree</h3>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44.png\" data-download-href=\"https://ethresear.ch/uploads/default/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44\" title=\"\"><img src=\"https://ethresear.ch/uploads/default/optimized/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44_2_690x354.png\" alt=\"\" data-base62-sha1=\"84MYrSdewgGaSZDBC2g2uEzBMwY\" width=\"690\" height=\"354\" srcset=\"https://ethresear.ch/uploads/default/optimized/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44_2_690x354.png, https://ethresear.ch/uploads/default/original/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44.png 1.5x, https://ethresear.ch/uploads/default/original/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44.png 2x\" data-small-upload=\"https://ethresear.ch/uploads/default/optimized/2X/3/389c00fa82b1bc405e3ee59a14fe0c9c3b777e44_2_10x10.png\"></a></div><p></p>\n<p>Merkle Sum Tree is a special kind of merkle tree, in which each inner node contains the sum of the balances of its child tree. The great advantage of this scheme is its simplicity (not a bad thing!). In fact, since Vitalik wrote about his design, Mazars already built a proof of liability product for Binance (<a href=\"https://veritas.mazars.com/binance/\" rel=\"noopener nofollow ugc\">here</a>). However, as we will articulate next, this solution has devastating privacy leakage.</p>\n<h3>\n<a name=\"solution-2-kzg-customized-iop-based-sum-proof-kzg-sum-iop-5\" class=\"anchor\" href=\"https://ethresear.ch#solution-2-kzg-customized-iop-based-sum-proof-kzg-sum-iop-5\"></a>Solution 2: KZG - Customized IOP based Sum Proof (KZG-Sum IOP)</h3>\n<p>To improve the privacy and robustness, Vitalik proposed a second scheme[^1] based on KZG and a customized proof system based on an IOP.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a.png\" data-download-href=\"https://ethresear.ch/uploads/default/6d95a162c98399fd73144e42eb60a9e1e6edf27a\" title=\"\"><img src=\"https://ethresear.ch/uploads/default/optimized/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a_2_690x344.png\" alt=\"\" data-base62-sha1=\"fDqCOcbjga26hLYBjnaMtY0qEki\" width=\"690\" height=\"344\" srcset=\"https://ethresear.ch/uploads/default/optimized/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a_2_690x344.png, https://ethresear.ch/uploads/default/original/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a.png 1.5x, https://ethresear.ch/uploads/default/original/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a.png 2x\" data-small-upload=\"https://ethresear.ch/uploads/default/optimized/2X/6/6d95a162c98399fd73144e42eb60a9e1e6edf27a_2_10x10.png\"></a></div><p></p>\n<p>As shown in the figure above, instead of committing each user‚Äôs username and balances in a merkle tree, we can commit a user‚Äôs username and balance at adjacent locations in a vector commitment like KZG. Each user only needs to remember her location (in the above example, Charlie‚Äôs username is committed in the index 4, his balance is committed in the index 5).</p>\n<p>Next, to prove the summation of the balances, Vitalik proposed a customized IOP-based proof system for efficiency.</p>\n<p>Unlike the Merkle Sum Tree solution, this preserves privacy for the user‚Äôs balance. A user doesn‚Äôt need anyone else‚Äôs balance to attest to the fact that their liability is included.</p>\n<h2>\n<a name=\"problems-with-existing-solutions-6\" class=\"anchor\" href=\"https://ethresear.ch#problems-with-existing-solutions-6\"></a>Problems with Existing Solutions</h2>\n<h3>\n<a name=\"merkle-sum-tree-solution-7\" class=\"anchor\" href=\"https://ethresear.ch#merkle-sum-tree-solution-7\"></a>Merkle Sum Tree Solution</h3>\n<p>As mentioned in Vitalik‚Äôs blog post, Merkle Sum Tree solution (the one adopted by Binance now) suffers a huge privacy loss for both CEXs and its customers. In more detail:</p>\n<p>When a user queries the CEX for a liability proof, the CEX needs to provide a merkle proof containing the balances of <em>other users‚Äô balances</em> along the merkle tree. In the above example, the merkle proof provided to Charlie leaks:</p>\n<ul>\n<li>David‚Äôs Balance</li>\n<li>The sum of Alice and Bob‚Äôs balance</li>\n<li>The sum of {Eve, Fred, Greta, Henry}'s balance</li>\n</ul>\n<p>By creating a number of spam accounts, adversaries can not only gain the information of real users balances, they can also discover the distribution of user‚Äôs balances across the CEX. What makes things worse is that this balance information can be correlated with other known infomation (such as on-chain data of token transfers). By correlating the balances, transfers on chain, and balance leakage from MST, many users‚Äô identities can be inferred. This could lead to disastrous privacy concerns for customer data in CEXs.</p>\n<blockquote>\n<p>We kill people based on metadata.<br>\n‚Äì Michael Hayden, Former Director of NSA and CIA</p>\n</blockquote>\n<h3>\n<a name=\"kzg-iop-sum-solution-8\" class=\"anchor\" href=\"https://ethresear.ch#kzg-iop-sum-solution-8\"></a>KZG - IOP Sum Solution</h3>\n<p>Compared with Merkle Sum Tree, KZG-IOP Sum is a well-balanced solution on a technical level; the major issues are at the practical and engineering level.</p>\n<h4>\n<a name=\"very-large-trusted-setup-9\" class=\"anchor\" href=\"https://ethresear.ch#very-large-trusted-setup-9\"></a>Very Large Trusted Setup</h4>\n<p>KZG-IOP Sum solution requires a trusted setup. Some big CEXs could have more than 200 million users. This could translate to more than 400 million elements in the vector commitment. Now, the biggest trusted setup so far (<a href=\"https://github.com/weijiekoh/perpetualpowersoftau\" rel=\"noopener nofollow ugc\">the Perpetual Powers of Tau</a>) has an effective size of <span class=\"math\">2^{28} \\simeq 270 \\text{ million}</span>. A trusted setup of at least twice this size would be needed. This requires a huge effort and also scarifices on decentralization since the larger the trusted setup size, the higher requirement that it places on the participants.</p>\n<h4>\n<a name=\"requiring-constructing-a-new-customized-proof-system-10\" class=\"anchor\" href=\"https://ethresear.ch#requiring-constructing-a-new-customized-proof-system-10\"></a>Requiring Constructing a New, Customized Proof System</h4>\n<p>In addition, Vitalik‚Äôs proposal, while elegant, requires building a customized proof system protocol. When implementing these systems using custom protocols we usually run into three main problems:</p>\n<ol>\n<li>In practice they are usually not more efficient (potential theoretical performance gain does not align with concrete performance)</li>\n<li>Vastly increased code complexity</li>\n<li>Reduced modularity with existing codebases and existing proof systems</li>\n<li>Harder to do a good security audit since the auditors are less familiar with these customized constructions</li>\n</ol>\n<h2>\n<a name=\"our-solution-snarked-merkle-sum-proof-of-liablities-11\" class=\"anchor\" href=\"https://ethresear.ch#our-solution-snarked-merkle-sum-proof-of-liablities-11\"></a>Our Solution: SNARKed Merkle Sum Proof of Liablities</h2>\n<p>We present below a simple SNARKed Merkle Sum Tree solution that addresses the above problems. There are two components to our protocol:</p>\n<ol>\n<li>A merkle sum tree (Same as Vitalik‚Äôs design) with Poseidon over the Goldilocks Field</li>\n<li>zkSNARK merkle proofs of inclusion of liabilities using Plonky2</li>\n</ol>\n<h4>\n<a name=\"design-philosophy-12\" class=\"anchor\" href=\"https://ethresear.ch#design-philosophy-12\"></a>Design Philosophy</h4>\n<p>In this setting, our primary concerns are:</p>\n<ol>\n<li>Construction time for the ‚ÄúSum Commitment‚Äù - The CEX should be able run these as frequently as possible even if they have hundreds of millions of users</li>\n<li>Prover time for user queries - It should be as easy as possible for users to attest to the fact that their assets are accounted for. The harder it is, the less likely it is they will do it, and having to wait more than a few seconds will add friction.</li>\n<li>Large exchanges have on the order of <span class=\"math\">2^{28}</span> users. Any public parameters the protocol uses should be practical to produce or verify.</li>\n</ol>\n<p>In this setting, we don‚Äôt really require proofs to be very small (e.g. &lt; 4KB). Since we are not verifying proofs on-chain, it‚Äôs totally fine if proofs are 2-3 MBs.</p>\n<p>Given these design goals, we think Poseidon over the Goldilocks field with Plonky2 inclusion proofs is the correct choice because:</p>\n<ol>\n<li>No trusted setup - this eliminates the issue with KZG, where the setup is prohibitively large to run and/or verify.</li>\n<li>Commitment Performance - Poseidon on Goldilocks is one of the fastest arithmetic (ZKP friendly) hash functions yet have a very good concrete performance. Since CEX needs to compute hashes (in the worst case) in the order of <span class=\"math\">2^{28}</span> at sub-microsecond per hash it takes on the order of a minute to build the merkle sum tree</li>\n<li>Prover Performance - Plonky2 is a very fast FRI-based PLONK implementation that can prove merkle tree inclusion (at sizes around <span class=\"math\">2^{28}</span>) in seconds that can be verified in milliseconds</li>\n</ol>\n<h4>\n<a name=\"individual-user-proofs-in-more-detail-13\" class=\"anchor\" href=\"https://ethresear.ch#individual-user-proofs-in-more-detail-13\"></a>Individual User Proofs in More Detail</h4>\n<p>To complete a proof of liabilities argument, the CEX will need to have proof available to any individual user to show that her account/balance is included.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4.png\" data-download-href=\"https://ethresear.ch/uploads/default/37be86ed50c6f4a3d9122c3f1aca57600f576ba4\" title=\"\"><img src=\"https://ethresear.ch/uploads/default/optimized/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4_2_690x338.png\" alt=\"\" data-base62-sha1=\"7X8sIBa382NaQDh0FyinZMQqxNi\" width=\"690\" height=\"338\" srcset=\"https://ethresear.ch/uploads/default/optimized/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4_2_690x338.png, https://ethresear.ch/uploads/default/optimized/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4_2_1035x507.png 1.5x, https://ethresear.ch/uploads/default/optimized/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4_2_1380x676.png 2x\" data-small-upload=\"https://ethresear.ch/uploads/default/optimized/2X/3/37be86ed50c6f4a3d9122c3f1aca57600f576ba4_2_10x10.png\"></a></div><p></p>\n<p>If a user with id <span class=\"math\">i</span> asks for a proof that their assets are included in the sum, the prover will proceed as follows:</p>\n<ol>\n<li>Create a merkle proof over the leaf for user <span class=\"math\">i</span>\n</li>\n<li>Wrap that merkle proof in a SNARK proving the following statement:\n<ul>\n<li>Public Inputs:\n<ul>\n<li>user ID <span class=\"math\">i</span>\n</li>\n<li>claimed balance <span class=\"math\">b</span>\n</li>\n<li>merkle sum balance-root <span class=\"math\">(R, B)</span>\n</li>\n</ul>\n</li>\n<li>Private Witness:\n<ul>\n<li>merkle inclusion proof <span class=\"math\">\\pi_{\\textsf{MT}}</span> for the leaf</li>\n<li>intermediate partial sums along the tree</li>\n</ul>\n</li>\n<li>Statement:\n<ul>\n<li>merkle inclusion proof verifier accepts against <span class=\"math\">R</span> and <span class=\"math\">\\pi_{\\textsf{MT}}</span>\n</li>\n<li>the balances along the inclusion proof sum to <span class=\"math\">B</span>\n</li>\n<li>no intermediate balance overflows</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Send the SNARK proof <span class=\"math\">\\pi_{\\textsf{SNARK}}</span> for this statement to the user</li>\n</ol>\n<p>Then, the user will accept this proof if the SNARK verifier accepts <span class=\"math\">\\pi_{\\textsf{SNARK}}</span> with <span class=\"math\">b</span> and <span class=\"math\">i</span> matching the user‚Äôs exchange details and <span class=\"math\">(R, B)</span> matching the known balance-root for the exchange.</p>\n<h3>\n<a name=\"comparing-snark-based-proof-of-liabilities-with-merkle-sum-tree-and-kzg-iop-sum-14\" class=\"anchor\" href=\"https://ethresear.ch#comparing-snark-based-proof-of-liabilities-with-merkle-sum-tree-and-kzg-iop-sum-14\"></a>Comparing SNARK-based Proof of Liabilities with Merkle Sum Tree and KZG-IOP Sum</h3>\n<p>In our solution, for a CEX with 200 million users, we expect the proof size for the user proof be roughly 2-3 MB (we can tune the verifier/prover performance trade-off by changing the FRI blowup factor)and the proof verification time should be sub-second. While KZG-IOP Sum has a smaller proof size, the verifier efficiency is not the bottleneck of the PoSol implementation.</p>\n<p></p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://ethresear.ch/uploads/default/original/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164.jpeg\" data-download-href=\"https://ethresear.ch/uploads/default/ce1646c75f4f2f195b15120e124276ef8b538164\" title=\"Screen Shot 2022-12-12 at 17.37.46\"><img src=\"https://ethresear.ch/uploads/default/optimized/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164_2_533x500.jpeg\" alt=\"Screen Shot 2022-12-12 at 17.37.46\" data-base62-sha1=\"tp85kM9fmt3VNIrOvKyEV2POJFy\" width=\"533\" height=\"500\" srcset=\"https://ethresear.ch/uploads/default/optimized/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164_2_533x500.jpeg, https://ethresear.ch/uploads/default/optimized/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164_2_799x750.jpeg 1.5x, https://ethresear.ch/uploads/default/optimized/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164_2_1066x1000.jpeg 2x\" data-small-upload=\"https://ethresear.ch/uploads/default/optimized/2X/c/ce1646c75f4f2f195b15120e124276ef8b538164_2_10x10.png\"></a></div><p></p>\n<p>The key advantage of our solution is efficient commitment construction with a relatively low engineering complexity. SNARK-ed Merkle Sum Tree leverages the hardware acceleration friendly Goldilocks field to gain a good concrete tree-building performance (see the details in the table below) and as well as reusing a mature existing proof system implementation (<code>plonky2</code>) for fast user proofs.</p>\n            <p><small>1 post - 1 participant</small></p>\n            <p><a href=\"https://ethresear.ch/t/snarked-merkle-sum-tree-a-practical-proof-of-solvency-protocol-based-on-vitaliks-proposal/14405\">Read full topic</a></p>\n          ","contentSnippet":"Shumo Chu, Sebastien La Duca, and Brandon Gomes (@bhgomes) (ordered Alphabetically)\nSpecial thanks to Yi Sun on Proof-of-Asset discussion, and Dankrad Feist and Daniel Lubarov for helpful discussions on FRI\nProblem Definition\nProof of Solvency (PoSol) answers a simple question:\nCan we build cryptographic proofs to show that a Centralized Exchange (CEX) has enough reserves to back all user funds?\nIn Vitalik‚Äôs own words:\nIf you prove that customers‚Äô deposits equal X (‚Äúproof of liabilities‚Äù), and prove ownership of the private keys of X coins (‚Äúproof of assets‚Äù), then you have a proof of solvency: you‚Äôve proven the exchange has the funds to pay back all of its depositors.\nSo in very simple terms:\n\\text{Proof of Solvency}: \\textsf{PA}\\,\\,(\\text{Provable Assets}) - \\textsf{PL}\\,\\,(\\text{Provable Liabilities}) \\ge 0\nProof of Assets\nThe simplest solution is just signing transactions over the owned addresses:\nTo prove that you hold X coins, you simply move X coins around at some pre-agreed time or in a transaction where the data field contains the words ‚Äúthese funds belong to Binance‚Äù. To avoid paying transaction fees, you could sign an off-chain message instead; both Bitcoin and Ethereum have standards for off-chain signed messages.\nTo protect privacy and avoid revealing the entire set of the CEX‚Äôs addresses, a zero-knowlege proof can be used to prove ownership of assets. One example is using something like zkAttestor. The basic idea is to attest to the ownership of assets against a certain block-header. Efficiency of zkSNARK-based attestation can be improved significantly by batching through proof aggregation (for example, using Halo2). There is an ongoing effort from Axiom (with overlapping authors of zkAttestor) working on this problem.\nProof of Liabilities: Existing Solutions\nThe idea behind proof of liabilities is to let the CEX publish a cryptographic accumulator R over the set of liabilities of the exchange (which we call the ‚Äúliability set‚Äù) and a total liability B such that:\nThe accumulator binds to the total liability B, i.e. the exchange cannot change their answer after commiting\nAny user can check that their assets are included in the liability set via a proof that is consistent with the total B and R\n\n\nVitalik provides two protocols that solve this problem, we discuss them below.\nSolution 1: Merkle Sum Tree\n\n\n\nMerkle Sum Tree is a special kind of merkle tree, in which each inner node contains the sum of the balances of its child tree. The great advantage of this scheme is its simplicity (not a bad thing!). In fact, since Vitalik wrote about his design, Mazars already built a proof of liability product for Binance (here). However, as we will articulate next, this solution has devastating privacy leakage.\nSolution 2: KZG - Customized IOP based Sum Proof (KZG-Sum IOP)\nTo improve the privacy and robustness, Vitalik proposed a second scheme[^1] based on KZG and a customized proof system based on an IOP.\n\n\n\nAs shown in the figure above, instead of committing each user‚Äôs username and balances in a merkle tree, we can commit a user‚Äôs username and balance at adjacent locations in a vector commitment like KZG. Each user only needs to remember her location (in the above example, Charlie‚Äôs username is committed in the index 4, his balance is committed in the index 5).\nNext, to prove the summation of the balances, Vitalik proposed a customized IOP-based proof system for efficiency.\nUnlike the Merkle Sum Tree solution, this preserves privacy for the user‚Äôs balance. A user doesn‚Äôt need anyone else‚Äôs balance to attest to the fact that their liability is included.\nProblems with Existing Solutions\nMerkle Sum Tree Solution\nAs mentioned in Vitalik‚Äôs blog post, Merkle Sum Tree solution (the one adopted by Binance now) suffers a huge privacy loss for both CEXs and its customers. In more detail:\nWhen a user queries the CEX for a liability proof, the CEX needs to provide a merkle proof containing the balances of other users‚Äô balances along the merkle tree. In the above example, the merkle proof provided to Charlie leaks:\nDavid‚Äôs Balance\nThe sum of Alice and Bob‚Äôs balance\nThe sum of {Eve, Fred, Greta, Henry}'s balance\nBy creating a number of spam accounts, adversaries can not only gain the information of real users balances, they can also discover the distribution of user‚Äôs balances across the CEX. What makes things worse is that this balance information can be correlated with other known infomation (such as on-chain data of token transfers). By correlating the balances, transfers on chain, and balance leakage from MST, many users‚Äô identities can be inferred. This could lead to disastrous privacy concerns for customer data in CEXs.\nWe kill people based on metadata.\nKZG - IOP Sum Solution\nCompared with Merkle Sum Tree, KZG-IOP Sum is a well-balanced solution on a technical level; the major issues are at the practical and engineering level.\nVery Large Trusted Setup\nKZG-IOP Sum solution requires a trusted setup. Some big CEXs could have more than 200 million users. This could translate to more than 400 million elements in the vector commitment. Now, the biggest trusted setup so far (the Perpetual Powers of Tau) has an effective size of 2^{28} \\simeq 270 \\text{ million}. A trusted setup of at least twice this size would be needed. This requires a huge effort and also scarifices on decentralization since the larger the trusted setup size, the higher requirement that it places on the participants.\nRequiring Constructing a New, Customized Proof System\nIn addition, Vitalik‚Äôs proposal, while elegant, requires building a customized proof system protocol. When implementing these systems using custom protocols we usually run into three main problems:\nIn practice they are usually not more efficient (potential theoretical performance gain does not align with concrete performance)\nVastly increased code complexity\nReduced modularity with existing codebases and existing proof systems\nHarder to do a good security audit since the auditors are less familiar with these customized constructions\nOur Solution: SNARKed Merkle Sum Proof of Liablities\nWe present below a simple SNARKed Merkle Sum Tree solution that addresses the above problems. There are two components to our protocol:\nA merkle sum tree (Same as Vitalik‚Äôs design) with Poseidon over the Goldilocks Field\nzkSNARK merkle proofs of inclusion of liabilities using Plonky2\nDesign Philosophy\nIn this setting, our primary concerns are:\nConstruction time for the ‚ÄúSum Commitment‚Äù - The CEX should be able run these as frequently as possible even if they have hundreds of millions of users\nProver time for user queries - It should be as easy as possible for users to attest to the fact that their assets are accounted for. The harder it is, the less likely it is they will do it, and having to wait more than a few seconds will add friction.\nLarge exchanges have on the order of 2^{28} users. Any public parameters the protocol uses should be practical to produce or verify.\nIn this setting, we don‚Äôt really require proofs to be very small (e.g. < 4KB). Since we are not verifying proofs on-chain, it‚Äôs totally fine if proofs are 2-3 MBs.\nGiven these design goals, we think Poseidon over the Goldilocks field with Plonky2 inclusion proofs is the correct choice because:\nNo trusted setup - this eliminates the issue with KZG, where the setup is prohibitively large to run and/or verify.\nCommitment Performance - Poseidon on Goldilocks is one of the fastest arithmetic (ZKP friendly) hash functions yet have a very good concrete performance. Since CEX needs to compute hashes (in the worst case) in the order of 2^{28} at sub-microsecond per hash it takes on the order of a minute to build the merkle sum tree\nProver Performance - Plonky2 is a very fast FRI-based PLONK implementation that can prove merkle tree inclusion (at sizes around 2^{28}) in seconds that can be verified in milliseconds\nIndividual User Proofs in More Detail\nTo complete a proof of liabilities argument, the CEX will need to have proof available to any individual user to show that her account/balance is included.\n\n\n\nIf a user with id i asks for a proof that their assets are included in the sum, the prover will proceed as follows:\nCreate a merkle proof over the leaf for user i\n\nWrap that merkle proof in a SNARK proving the following statement:\n\nPublic Inputs:\n\nuser ID i\n\nclaimed balance b\n\nmerkle sum balance-root (R, B)\n\n\n\nPrivate Witness:\n\nmerkle inclusion proof \\pi_{\\textsf{MT}} for the leaf\nintermediate partial sums along the tree\nStatement:\n\nmerkle inclusion proof verifier accepts against R and \\pi_{\\textsf{MT}}\n\nthe balances along the inclusion proof sum to B\n\nno intermediate balance overflows\nSend the SNARK proof \\pi_{\\textsf{SNARK}} for this statement to the user\nThen, the user will accept this proof if the SNARK verifier accepts \\pi_{\\textsf{SNARK}} with b and i matching the user‚Äôs exchange details and (R, B) matching the known balance-root for the exchange.\nComparing SNARK-based Proof of Liabilities with Merkle Sum Tree and KZG-IOP Sum\nIn our solution, for a CEX with 200 million users, we expect the proof size for the user proof be roughly 2-3 MB (we can tune the verifier/prover performance trade-off by changing the FRI blowup factor)and the proof verification time should be sub-second. While KZG-IOP Sum has a smaller proof size, the verifier efficiency is not the bottleneck of the PoSol implementation.\n\n\n\nThe key advantage of our solution is efficient commitment construction with a relatively low engineering complexity. SNARK-ed Merkle Sum Tree leverages the hardware acceleration friendly Goldilocks field to gain a good concrete tree-building performance (see the details in the table below) and as well as reusing a mature existing proof system implementation (plonky2) for fast user proofs.\n1 post - 1 participant\nRead full topic","guid":"ethresear.ch-topic-14405","categories":["zk-s[nt]arks"],"isoDate":"2022-12-12T22:49:18.000Z","from":"https://ethresear.ch/latest.rss"},{"creator":"@bhgomes Brandon H. Gomes","title":"Do not add bls12 precompile, implement Pasta curves w/o trusted setup instead","link":"https://ethresear.ch/t/do-not-add-bls12-precompile-implement-pasta-curves-w-o-trusted-setup-instead/12808/24","pubDate":"Mon, 12 Dec 2022 22:54:26 +0000","dc:creator":"@bhgomes Brandon H. Gomes","content":" <p>Do we really need Pallas and Vesta when we already have <a href=\"https://hackmd.io/@aztec-network/ByzgNxBfd#2-Grumpkin---A-curve-on-top-of-BN-254-for-SNARK-efficient-group-operations\" rel=\"noopener nofollow ugc\">Grumpkin</a>?</p> ","contentSnippet":"Do we really need Pallas and Vesta when we already have Grumpkin?","guid":"ethresear.ch-post-36719","isoDate":"2022-12-12T22:54:26.000Z","from":"https://ethresear.ch/posts.rss"}]