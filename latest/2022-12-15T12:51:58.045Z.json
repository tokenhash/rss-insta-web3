[{"creator":"중고 개발자","title":"BitBucket Server와 Jenkins Integration 설정","link":"https://medium.com/used-developer/bitbucket-server%EC%99%80-jenkins-integration-%EC%84%A4%EC%A0%95-f47f967b8fb4?source=rss------devops-5","pubDate":"Thu, 15 Dec 2022 12:17:28 GMT","dc:creator":"중고 개발자","content":"<div class=\"medium-feed-item\"><p class=\"medium-feed-image\"><a href=\"https://medium.com/used-developer/bitbucket-server%EC%99%80-jenkins-integration-%EC%84%A4%EC%A0%95-f47f967b8fb4?source=rss------devops-5\"><img src=\"https://cdn-images-1.medium.com/max/600/1*FoTH0neuXqMdSN3HbXdE3g.jpeg\" width=\"600\"></a></p><p class=\"medium-feed-snippet\">&#xBC84;&#xC804;, &#xC804;&#xC81C; &#xC870;&#xAC74;, BitBucket Integration &#xC124;&#xC815;, Jenkins Pipeline &#xC124;&#xC815;, BitBucket&#xACFC; Jenkins &#xC5F0;&#xACC4; &#xD655;&#xC778;</p><p class=\"medium-feed-link\"><a href=\"https://medium.com/used-developer/bitbucket-server%EC%99%80-jenkins-integration-%EC%84%A4%EC%A0%95-f47f967b8fb4?source=rss------devops-5\">Continue reading on 중고 개발자의 기술 블로그 »</a></p></div>","contentSnippet":"버전, 전제 조건, BitBucket Integration 설정, Jenkins Pipeline 설정, BitBucket과 Jenkins 연계 확인\nContinue reading on 중고 개발자의 기술 블로그 »","guid":"https://medium.com/p/f47f967b8fb4","categories":["devops","jenkins","bitbucket"],"isoDate":"2022-12-15T12:17:28.000Z","from":"https://medium.com/feed/tag/devops","hashId":"d380fdc59192cfed9a91ea1d78a365dd"},{"creator":"Nick Babich","title":"Empty states: 5 practical tips for designers","link":"https://uxplanet.org/empty-states-5-practical-tips-for-designers-8958b2e68c66?source=rss----819cc2aaeee0---4","pubDate":"Thu, 15 Dec 2022 12:30:00 GMT","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0HQu_UNLdlfQCoQit_XHlg.png\" /></figure><p>Content is what provides value for most apps. Along with features, content is a primary reason why people start using products. This is why it’s critical to consider how we design empty states, those moments in a user’s journey when an app might not have content for a user yet.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FKIPuLa4wqGY%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DKIPuLa4wqGY&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FKIPuLa4wqGY%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/c1d54b659e2fab62b805a4bfb383f8e4/href\">https://medium.com/media/c1d54b659e2fab62b805a4bfb383f8e4/href</a></iframe><p>In this article, we will learn 5 tips on how to design an ideal empty state.</p><h3>Why is an empty state important?</h3><p>A useful empty state lets the user know:</p><ul><li><em>what’s happening,</em></li><li><em>why it’s happening,</em></li><li>and <em>what the user can do about it.</em></li></ul><p>Here are a few situations when users can encounter empty states within an application:</p><ul><li>Error state, such as getting a no internet connection.</li><li>No content in a particular category of items. Such as no incoming emails, albums, or connections.</li><li>User action is required. The app cannot show the data because the user didn’t do something. For example, the user didn’t connect a payment method in the app. This type of empty state is especially common during the onboarding and initial use stages when the user didn’t fully configure the app.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*T-ccQJ5syfedXPoW4_4tTg.png\" /><figcaption>Different cases when users can encounter an empty state.</figcaption></figure><h3>Anatomy of empty state</h3><ul><li><em>Header and description</em>. First and foremost, the empty state should communicate the system status. It should create a context for users on what’s happening. It is important to provide a summary of a system state in the header and description. The header and description should tell users why they see the empty state.</li><li><em>Call to action button. </em>Effective empty states allow users to act. When users read the text description and see the action, they understand what they should do next.</li><li><em>Imagery. </em>While your app should be functional and usable, it should also be pleasurable. Empty states are an excellent opportunity to make a human connection with your users. Well-crafted illustrations at the top of the screen can help create a more memorable experience for your users.</li></ul><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YU8drWD0cwpCswpz7C76_w.png\" /><figcaption>Anatomy of empty state. Image by Nick Babich.</figcaption></figure><p>Here is an example of a well-designed empty state from the Dropbox mobile app. Notice the image. The image should have a neutral or humorous tone, and it should be consistent with your brand</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wIpTmairg7ZXCMumYQVCew.png\" /><figcaption>Empty states in the Dropbox mobile app.</figcaption></figure><h3>5 Tips on how to design empty states</h3><p>Now let’s discuss a few tips on how to design an ideal empty state. Empty states are often overlooked in UI design. When we design a product, we normally design for a populated interface where everything in the layout looks well arranged. However, it’s equally important to design pages on which the content is pending user action.</p><h4>1. Analyze user flow</h4><p>And the first thing that we need to do is to find places where users can face empty states. How to find such places? We need to analyze user flow.</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F9rZj2cjcevw%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D9rZj2cjcevw&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F9rZj2cjcevw%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"854\" height=\"480\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/1713bf9b98936049045995ac338b6e29/href\">https://medium.com/media/1713bf9b98936049045995ac338b6e29/href</a></iframe><p>For example, when we design an eCommerce app, “No search results” is an excellent place for an empty state.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*n9m5aE3DRd5A7bQZtBDFpQ.png\" /><figcaption>User flow in the eCommerce app. Image by Nick Babich.</figcaption></figure><p>An empty state can show a quick update, “No results found,” along with a call to action, “Clear all filters.”</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_0vxMuRYps6ZrHyhMcIkdA.png\" /><figcaption>No results page on Google Flights.</figcaption></figure><h4>2. Avoid creating dead-end pages</h4><p>Next, we need to avoid creating dead-end pages. The absolute worst thing we can do with an empty state is to drop our users into a dead-end. Dead-ends page don’t provide a next step, they confuse uesrs and make them leave a product.</p><p>Here are two examples of empty states. The first one is an ineffective empty state that provides no guidance — only a dead end. The second example reduces friction by helping the user start the task. It gives a direct pathway to the action that the user needs to complete.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*HfPTdWX_b4kZNwBCOWmynQ.png\" /><figcaption>Bad vs. good empty state design. Image by Modspot’s.</figcaption></figure><h4>3. Keep empty state visually simple</h4><p>The beauty of a great empty state design is its simplicity. You should use a minimalist design approach to bring the most critical content to the forefront and minimize distractions. Try to include well-written and easily scannable copy and wrap it together with good visuals.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OK9QAkC3epVvkxFvzqV2lw.png\" /><figcaption>Simple empty state design.</figcaption></figure><h4>4. Bake emotions into the UI</h4><p>Empty states can help you show the human side of your product. The positive emotional response from using a product can improve user engagement.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*uClA59yslFlasd98XAp60Q.gif\" /><figcaption>Funny illustration creates the right mood. Image by Andrew McKay.</figcaption></figure><h4>5. Introduce success states</h4><p>Last but not least, we need to think about success states. The moment a user completes their first milestone in an app is an excellent opportunity for you to create a positive emotional connection between them and your product. You can congratulate users on a job well done and prompt them toward new interactions. To the left, you see the resulting screen after the user completes all tasks in a to-do list, and to the right is inbox zero animation.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BEiKk41BLQi4uF3RV8I8Lg.png\" /><figcaption>Success states in mobile app. Image by <em>WriteUpp, and Google.</em></figcaption></figure><p><em>Originally published at </em><a href=\"https://babich.biz/empty-states/\"><em>babich.biz</em></a></p><p>Follow me on <a href=\"https://twitter.com/101babich\">Twitter</a> | <a href=\"https://www.instagram.com/101babich/\">Instagram</a> | <a href=\"https://www.youtube.com/channel/UCnvVoAUlmljcetRMyQQRyUg\">YouTube</a></p><h3>Want to learn UX design?</h3><p>Try <a href=\"https://uxcel.com/?ref=nickbabich\">Uxcel</a>. Uxcel will help you learn and improve your design skills with interactive UX courses and skill tests built specifically for professional designers. You will get <strong>25% off discount for the Pro Yearly subscription</strong> if join through this link.</p><p><a href=\"https://uxcel.com/?ref=nickbabich\">Build your UX design skills online</a></p><p><em>This post contains affiliate link(s)</em></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8958b2e68c66\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://uxplanet.org/empty-states-5-practical-tips-for-designers-8958b2e68c66\">Empty states: 5 practical tips for designers</a> was originally published in <a href=\"https://uxplanet.org\">UX Planet</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"Content is what provides value for most apps. Along with features, content is a primary reason why people start using products. This is why it’s critical to consider how we design empty states, those moments in a user’s journey when an app might not have content for a user yet.\nhttps://medium.com/media/c1d54b659e2fab62b805a4bfb383f8e4/href\nIn this article, we will learn 5 tips on how to design an ideal empty state.\nWhy is an empty state important?\nA useful empty state lets the user know:\n\nwhat’s happening,\nwhy it’s happening,\nand what the user can do about it.\n\nHere are a few situations when users can encounter empty states within an application:\n\nError state, such as getting a no internet connection.\nNo content in a particular category of items. Such as no incoming emails, albums, or connections.\nUser action is required. The app cannot show the data because the user didn’t do something. For example, the user didn’t connect a payment method in the app. This type of empty state is especially common during the onboarding and initial use stages when the user didn’t fully configure the app.\nDifferent cases when users can encounter an empty state.\nAnatomy of empty state\n\nHeader and description. First and foremost, the empty state should communicate the system status. It should create a context for users on what’s happening. It is important to provide a summary of a system state in the header and description. The header and description should tell users why they see the empty state.\nCall to action button. Effective empty states allow users to act. When users read the text description and see the action, they understand what they should do next.\nImagery. While your app should be functional and usable, it should also be pleasurable. Empty states are an excellent opportunity to make a human connection with your users. Well-crafted illustrations at the top of the screen can help create a more memorable experience for your users.\nAnatomy of empty state. Image by Nick Babich.\nHere is an example of a well-designed empty state from the Dropbox mobile app. Notice the image. The image should have a neutral or humorous tone, and it should be consistent with your brand\nEmpty states in the Dropbox mobile app.\n5 Tips on how to design empty states\nNow let’s discuss a few tips on how to design an ideal empty state. Empty states are often overlooked in UI design. When we design a product, we normally design for a populated interface where everything in the layout looks well arranged. However, it’s equally important to design pages on which the content is pending user action.\n1. Analyze user flow\nAnd the first thing that we need to do is to find places where users can face empty states. How to find such places? We need to analyze user flow.\nhttps://medium.com/media/1713bf9b98936049045995ac338b6e29/href\nFor example, when we design an eCommerce app, “No search results” is an excellent place for an empty state.\nUser flow in the eCommerce app. Image by Nick Babich.\nAn empty state can show a quick update, “No results found,” along with a call to action, “Clear all filters.”\nNo results page on Google Flights.\n2. Avoid creating dead-end pages\nNext, we need to avoid creating dead-end pages. The absolute worst thing we can do with an empty state is to drop our users into a dead-end. Dead-ends page don’t provide a next step, they confuse uesrs and make them leave a product.\nHere are two examples of empty states. The first one is an ineffective empty state that provides no guidance — only a dead end. The second example reduces friction by helping the user start the task. It gives a direct pathway to the action that the user needs to complete.\nBad vs. good empty state design. Image by Modspot’s.\n3. Keep empty state visually simple\nThe beauty of a great empty state design is its simplicity. You should use a minimalist design approach to bring the most critical content to the forefront and minimize distractions. Try to include well-written and easily scannable copy and wrap it together with good visuals.\nSimple empty state design.\n4. Bake emotions into the UI\nEmpty states can help you show the human side of your product. The positive emotional response from using a product can improve user engagement.\nFunny illustration creates the right mood. Image by Andrew McKay.\n5. Introduce success states\nLast but not least, we need to think about success states. The moment a user completes their first milestone in an app is an excellent opportunity for you to create a positive emotional connection between them and your product. You can congratulate users on a job well done and prompt them toward new interactions. To the left, you see the resulting screen after the user completes all tasks in a to-do list, and to the right is inbox zero animation.\nSuccess states in mobile app. Image by WriteUpp, and Google.\nOriginally published at babich.biz\nFollow me on Twitter | Instagram | YouTube\nWant to learn UX design?\nTry Uxcel. Uxcel will help you learn and improve your design skills with interactive UX courses and skill tests built specifically for professional designers. You will get 25% off discount for the Pro Yearly subscription if join through this link.\nBuild your UX design skills online\nThis post contains affiliate link(s)\n\nEmpty states: 5 practical tips for designers was originally published in UX Planet on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"Nick Babich","guid":"https://medium.com/p/8958b2e68c66","categories":["ux","user-experience","ui","ux-design","product-design"],"isoDate":"2022-12-15T12:30:00.000Z","from":"https://uxplanet.org/feed","hashId":"f352a83afc6a421b50535113f5ed4152"},{"creator":"João Brito","title":"Kubernetes 1.26","link":"https://blog.getupcloud.com/kubernetes-1-26-2943db0624ea?source=rss------devops-5","pubDate":"Thu, 15 Dec 2022 12:33:16 GMT","dc:creator":"João Brito","content":"<div class=\"medium-feed-item\"><p class=\"medium-feed-image\"><a href=\"https://blog.getupcloud.com/kubernetes-1-26-2943db0624ea?source=rss------devops-5\"><img src=\"https://cdn-images-1.medium.com/max/1920/1*2_OOB79WK59gDCFvxTw5WQ.jpeg\" width=\"1920\"></a></p><p class=\"medium-feed-snippet\">O que voc&#xEA; precisa saber?</p><p class=\"medium-feed-link\"><a href=\"https://blog.getupcloud.com/kubernetes-1-26-2943db0624ea?source=rss------devops-5\">Continue reading on Getup »</a></p></div>","contentSnippet":"O que você precisa saber?\nContinue reading on Getup »","guid":"https://medium.com/p/2943db0624ea","categories":["new-version","containers","kubernetes","devops","release-notes"],"isoDate":"2022-12-15T12:33:16.000Z","from":"https://medium.com/feed/tag/devops","hashId":"12443b17d7446972454319a2ba3d47f9"},{"creator":"Cybertrinchera","title":"Tryhackme: Simple CTF","link":"https://infosecwriteups.com/tryhackme-simple-ctf-879a19561438?source=rss----7b722bfd1b8d---4","pubDate":"Thu, 15 Dec 2022 12:42:05 GMT","content:encoded":"<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*etxWNTjbAmx-E6Id.png\" /></figure><p>Simple CTF is an easy machine from TryHackMe. On it, we will exploit a SQL injection in a CMS and use vim to elevate privileges (without getting trapped in the attempt).</p><p>As usual in TryHackMe, we must connect to the VPN or use the AttackBox. I will choose the VPN. We press the Start Machine button, and a minute after, they show us the IP address. Now, we proceed to do the initial recognition with Nmap:</p><pre>nmap -p- -sV -Pn $IP</pre><p>The -p parameter with the hyphen indicates to scan all ports, the -sV parameter to fingerprint the versions used, and -Pn to scan the machine even if it does not respond to ping.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/777/1*JgsdBApK1dchKx78XlaEVg.png\" /></figure><p>We can see that the machine has three services open, SSH , FTP and a web server.</p><p><strong>FTP enumeration</strong></p><p>We can see that login anonymous is enabled and we can retrieve a file:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PGap-JntcUfQ90rLu6gxzQ.png\" /></figure><p>The file is a message to Mitch talking about a weak password. Could we perform a brute force attack against the user Mitch in the SSH service?</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1002/1*rCGjDj_Ln04kKEPAZVmvWA.png\" /></figure><p><strong>Web Server Enumeration</strong></p><p>Alternatively, we can obtain this password from the web. First of all, by fuzzing we could find the /simple directory.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/826/1*zkQcujn9PimZUimtcZzqLg.png\" /></figure><p>If we access it, we will see a display of CMS Made Simple in version 2.2.8.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*77T8KcQiuo-2pDYmMevAqA.png\" /></figure><p>A quick Google search will lead to a PoC for exploiting a SQL injection in this CMS at this version.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/725/1*zpTvmTeqMF5J2P9JYmZUEg.png\" /></figure><p>Analyzing the code, we will see that it is a time-based SQL injection on the m1_idlist parameter at the module interface. The original exploit works on python 2.7. We should modify it to use it with python3.</p><p><a href=\"https://github.com/pedrojosenavasperez/CVE-2019-9053-Python3\">GitHub - pedrojosenavasperez/CVE-2019-9053-Python3: CVE-2019-9053 exploit ported to python3</a></p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/427/1*uuHy614CAfAb9c1CnbC9tw.png\" /></figure><p><strong>Privilege Escalation</strong></p><p>We can see that we can run vim as root. Then, we can elevate privileges easily by abusing that.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/465/1*VVn-xKeaGNh80YcsOEXCDQ.png\" /></figure><p>Now using this gtfobins trick (<a href=\"https://gtfobins.github.io/gtfobins/vim/#sudo\">https://gtfobins.github.io/gtfobins/vim/#sudo</a>) we can elevate privileges using vim without more problems.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/419/1*_BbjreIQQoIqBhhFV-1LUA.png\" /><figcaption><strong>Pwned!</strong></figcaption></figure><p>I hope you enjoyed my article and found my content useful. See you in the next article.</p><h4>From Infosec Writeups: A lot is coming up in the Infosec every day that it’s hard to keep up with. <a href=\"https://weekly.infosecwriteups.com/\">Join our weekly newsletter</a> to get all the latest Infosec trends in the form of 5 articles, 4 Threads, 3 videos, 2 GitHub Repos and tools, and 1 job alert for FREE!</h4><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=879a19561438\" width=\"1\" height=\"1\" alt=\"\"><hr><p><a href=\"https://infosecwriteups.com/tryhackme-simple-ctf-879a19561438\">Tryhackme: Simple CTF</a> was originally published in <a href=\"https://infosecwriteups.com\">InfoSec Write-ups</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>","content:encodedSnippet":"Simple CTF is an easy machine from TryHackMe. On it, we will exploit a SQL injection in a CMS and use vim to elevate privileges (without getting trapped in the attempt).\nAs usual in TryHackMe, we must connect to the VPN or use the AttackBox. I will choose the VPN. We press the Start Machine button, and a minute after, they show us the IP address. Now, we proceed to do the initial recognition with Nmap:\nnmap -p- -sV -Pn $IP\nThe -p parameter with the hyphen indicates to scan all ports, the -sV parameter to fingerprint the versions used, and -Pn to scan the machine even if it does not respond to ping.\n\nWe can see that the machine has three services open, SSH , FTP and a web server.\nFTP enumeration\nWe can see that login anonymous is enabled and we can retrieve a file:\n\nThe file is a message to Mitch talking about a weak password. Could we perform a brute force attack against the user Mitch in the SSH service?\n\nWeb Server Enumeration\nAlternatively, we can obtain this password from the web. First of all, by fuzzing we could find the /simple directory.\n\nIf we access it, we will see a display of CMS Made Simple in version 2.2.8.\n\nA quick Google search will lead to a PoC for exploiting a SQL injection in this CMS at this version.\n\nAnalyzing the code, we will see that it is a time-based SQL injection on the m1_idlist parameter at the module interface. The original exploit works on python 2.7. We should modify it to use it with python3.\nGitHub - pedrojosenavasperez/CVE-2019-9053-Python3: CVE-2019-9053 exploit ported to python3\n\nPrivilege Escalation\nWe can see that we can run vim as root. Then, we can elevate privileges easily by abusing that.\n\nNow using this gtfobins trick (https://gtfobins.github.io/gtfobins/vim/#sudo) we can elevate privileges using vim without more problems.\nPwned!\nI hope you enjoyed my article and found my content useful. See you in the next article.\nFrom Infosec Writeups: A lot is coming up in the Infosec every day that it’s hard to keep up with. Join our weekly newsletter to get all the latest Infosec trends in the form of 5 articles, 4 Threads, 3 videos, 2 GitHub Repos and tools, and 1 job alert for FREE!\n\nTryhackme: Simple CTF was originally published in InfoSec Write-ups on Medium, where people are continuing the conversation by highlighting and responding to this story.","dc:creator":"Cybertrinchera","guid":"https://medium.com/p/879a19561438","categories":["cybersecurity","tryhackme","writeup"],"isoDate":"2022-12-15T12:42:05.000Z","from":"https://medium.com/feed/bugbountywriteup","hashId":"4e42810148352d74bdd7a8576f4c0f75"}]