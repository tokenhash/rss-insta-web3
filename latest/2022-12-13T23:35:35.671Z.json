[{"creator":"RareSkills","title":"Using Solidity RSA Signatures for Presales and Airdrops","link":"https://hackernoon.com/using-solidity-rsa-signatures-for-presales-and-airdrops?source=rss","pubDate":"Tue, 13 Dec 2022 17:17:29 GMT","content:encoded":"<h1 id=\"solidityrsasignaturesforaidropsandpresalesbeatingecdsaandmerkletreesingasefficiency\">Solidity RSA signatures for aidrops and presales: Beating ECDSA and Merkle Trees in Gas Efficiency</h1>\n<p>By <a href=\"https://twitter.com/peakycryptos\">Suthan Somadeva</a> and <a href=\"https://twitter.com/@ThisIsMikeDB\">Michael Burke</a></p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Creating a contract that gives certain addresses permissions goes by several names: airdrops, presale, whitelist, allowlist, and so forth. But the essence of the idea is there is a set of addresses that have special permission to buy a high-demand token for a desirable price (sometimes free).</p>\n<p>\\\nThere are three established solutions for this: mappings, Merkle trees, and ECDSA signatures.</p>\n<p>The relative merits of these approaches have already been <a href=\"https://medium.com/donkeverse/hardcore-gas-savings-in-nft-minting-part-2-signatures-vs-merkle-trees-917c43c59b07\">discussed elsewhere</a>, so we will summarize the results:</p>\n<p>\\</p>\n<ul>\n<li><p>ECDSA Signature Verification (Gas: 29,293)</p></li>\n<li><p>using Merkle proofs (Gas: 30,517, 128 addresses)</p>\n<p>\\</p></li>\n</ul>\n<p>A mapping presale works when the seller enters the addresses of the customers into a mapping that goes from address to boolean to note if the address is privileged or not. The mapping is set to false after the buyer completes the transaction. This ensures only addresses that are marked true can make a purchase. This is very gas efficient for the buyer, but the seller could <a href=\"https://jeffrey-scholz.medium.com/hardcore-gas-savings-in-nft-minting-part-3-save-30-000-in-presale-gas-c945406e89f0\">spend millions of gas</a> allow-listing thousands of addresses, (it will cost at least 22,100 gas to add an address to the allowlist).</p>\n<p>\\\nBecause of this, Merkle Trees and ECDSA signatures (using the precompile <a href=\"https://www.evm.codes/precompiled#0x01?fork=grayGlacier\">ecerecover</a>, or better yet, the <a href=\"https://docs.openzeppelin.com/contracts/2.x/api/cryptography#ECDSA\">more secure wrapper around it</a> published by OpenZeppelin), are often preferred to mappings. The gas cost (for the buyer) of executing the ECDSA signature verification is 29,293 gas. This includes the 21,000 to initiate the transaction, so the ECDSA cost is 8,293. Note that this includes reading the signing address from storage, but this cost is necessary or we won’t be able to invalidate signatures.</p>\n<p>\\\nMerkle Trees vary in cost based on tree size (larger trees require larger Merkle proofs), but if over 1,000 addresses are in the Merkle tree, it will cost at least 32,000 gas (or more) to verify the address. This cost is clearly inferior to ECDSA.</p>\n<p>\\\nThe goal, then, is to beat ECDSA which costs 8,293 gas. To keep solutions apples-to-apples, the alternative solution must:</p>\n<p>\\</p>\n<ol>\n<li>Be able to nullify allow-listed addresses. Merkle trees can change their root, ECDSA , can change their signing address, and mappings can set the value to false.</li>\n<li>Not impose a substantial cost burden on the seller the way mappings do</li>\n<li>Cost less than 8,200 gas for the buyer (including a storage load)</li>\n<li>Not be compromised on security</li>\n</ol>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>To understand the proposed methodology, the reader should be familiar with the following subjects:</p>\n<p>\\</p>\n<ul>\n<li>Precompiled smart contracts (<a href=\"https://www.evm.codes/precompiled?fork=grayGlacier\">recommended reading</a>, <a href=\"https://ethereum.stackexchange.com/questions/15479/list-of-pre-compiled-contracts\">stackexchange</a>)</li>\n<li>Metamorphic contracts (<a href=\"https://blog.openzeppelin.com/the-state-of-smart-contract-upgrades/#metamorphic-contracts\">introduction</a>, <a href=\"https://a16zcrypto.com/metamorphic-smart-contract-detector-tool/\">recommended reading</a>)</li>\n<li>Access lists (<a href=\"https://hackmd.io/@fvictorio/gas-costs-after-berlin#EIP-2930-Optional-Access-List-transactions\">recommended reading</a>)</li>\n<li>How to use digital signatures and their appropriate use cases in blockchain applications</li>\n<li>How gas cost is computed, especially as it relates to calldata, opcodes, storage, and memory usage.</li>\n</ul>\n<h2 id=\"thersaalgorithm\">The RSA Algorithm</h2>\n<p>If we want to substantially beat ECDSA, we need to find a different cryptographic algorithm that allows for the proof of set membership. ECDSA is actually the newer, cooler version of the original digital signature algorithm, RSA. ECDSA relies on discrete logarithms over elliptic curves being hard (hence the name – elliptic curve digital signature algorithm). RSA (named after its authors, Rivest, Shamir, Adleman) relies on large integers being hard to factor. In terms of age, RSA was published in the 1970s, but ECDSA became a formal specification in the early 2000s.</p>\n<p>\\\nWe will not explain RSA in detail here, but some prerequisites are in order.</p>\n<p>\\\nThe signer picks two large prime numbers p and q, and multiplies them together to produce n. This <code>n</code> is the first part of the public key. Second, the signer picks a small prime <code>e</code> (can be hardcoded to <code>3</code> for our usecase), and publishes the pair <code>(n, e)</code> as the public key. Behind the scenes, the signer computes</p>\n<p>\\</p>\n<pre><code class=\"javascript language-javascript\">t = (p - 1) * (q - 1)\nd = t^(-1) % n\n</code></pre>\n<p>\\\nThe number <code>d</code> is the private key. If an adversary could decompose <code>n</code> into <code>p</code> and <code>q</code>, then computing <code>d</code> would be trivial. But it is known that <a href=\"https://en.wikipedia.org/wiki/Integer_factorization\">integer factorization is hard</a>. To sign a message, the signer hashes the message <code>m</code> to get <code>h</code> and raises <code>h</code> to the power <code>d</code>. That is,</p>\n<p>\\</p>\n<pre><code class=\"javascript language-javascript\">s = h(m) ^ d % n\n</code></pre>\n<p>\\\nThe signer then publishes <code>(m, s)</code> as the message and signature.</p>\n<p>The verifier then hashes <code>m</code> and raises it to the power <code>e mod n</code>. Remember, <code>e</code> and <code>n</code> are the public key. If and only if</p>\n<p>\\</p>\n<pre><code class=\"javascript language-javascript\">s == s ^ e % n\n</code></pre>\n<p>\\\nthen the signature is valid for the public key <code>(n, e)</code>. Note that if <code>n</code> is extremely large, then the probability that <code>s == s ^ e % n</code> by random chance is vanishingly small. If the equality checks out, then we know the signature is valid for the public key.</p>\n<p>\\\nTo do this in Ethereum, we would simply sign an address as</p>\n<pre><code class=\"javascript language-javascript\">s = buyerAddress ^ d % n\n</code></pre>\n<p>\\\nand the smart contract would verify</p>\n<pre><code class=\"javascript language-javascript\">msg.sender == s ^ e % n\n</code></pre>\n<p>\\</p>\n<h2 id=\"usingonly256bitsisunsafe\">Using only 256 bits is unsafe</h2>\n<p>We say “factoring integers is hard” but clearly this implies that the number must be large enough. For example, 33 is composed of two prime numbers and is trivial to decompose. Thankfully, we have real-world benchmarks of what the state-of-the-art can accomplish in the <a href=\"https://en.wikipedia.org/wiki/RSA_Factoring_Challenge\">RSA Factoring Challenge</a>.</p>\n<p>\\\nTo clarify, the number of “bits” refers to the size of the public key. Therefore, when we say “RSA 2048”, this means the number n, the modulus, has 2048 bits. When comparing key sizes, it’s important to remember that each additional bit doubles the size of the number. So 700 bits is exponentially more secure than 350 bits, not twice as secure.</p>\n<p>\\\nThe largest key to be cracked (factored) so far had 829 bits, and it required a modern supercomputer to do it. The team utilized approximately 2700 CPU core-years, using a 2.1 GHz Intel Xeon Gold 6130 CPU. The cheapest 16 core CPU on AWS costs $0.40 cents per hour, so the cost to crack this key is in the order of $9.4 million dollars. Even assuming generous discounts from the cloud provider, the cost is in the millions.</p>\n<h2 id=\"modulararithmeticwithmorethan256bitsinsolidity\">Modular arithmetic with more than 256 bits in Solidity</h2>\n<p>Ethereum only supports 32-byte data types, so by default, we cannot carry out</p>\n<p><code>s ^ e % n</code></p>\n<p>\\\nThankfully, the Ethereum blockchain added a precompiled contract in <a href=\"https://eips.ethereum.org/EIPS/eip-198\">EIP 198</a> specifically to support modular arithmetic. To use it, the base, exponent, and modulus must be loaded into memory in abi encoded format. Then the contract living at address <code>0x05</code> is invoked.</p>\n<p>Storing the public key becomes a bit of an issue if you use a secure amount of bits. If the key size is 1024 bits, that necessitates 4 storage slots. To read the public key out of storage would be four <code>SLOAD</code> operations, for a total of 8,400 gas. This by itself is already less efficient than the ECDSA solution benchmarked above.</p>\n<p>\\\nIf we use immutable variables, this cost is largely eliminated, but this creates a weakness if we cannot retroactively remove someone from the presale. In traditional ECDSA or Merkle Trees, we would just replace the signing address or the Merkle Root. This isn’t possible if we use an immutable variable.</p>\n<p>\\\nHowever, storing the public key in the bytecode instead of storage is the key idea. Reading an external contract’s bytecode (<a href=\"https://ethervm.io/#3C\">EXTCODECOPY</a>) costs 2,600 gas, which is far less than the 8,400 gas of reading each part of the public key in four pieces.</p>\n<p>\\\nTo invalidate a public key, we could simply create a new contract, and update a storage variable to point to the new address. But that adds back an additional 2,100 gas.</p>\n<p>\\\nIt turns out, it is possible to store the external contract’s address (whose bytecode stores the public key) in an immutable variable, but still invalidate the public key by mutating the external smart contract’s bytecode.</p>\n<h2 id=\"invalidatingthepublickeywiththemetamorphiccontractpattern\">Invalidating the public key with the metamorphic contract pattern</h2>\n<p>A smart contract is created by loading the deployment bytecode into memory, then returning the range of the bytecode which contains the runtime code. See more <a href=\"https://monokh.com/posts/ethereum-contract-creation-bytecode\">here</a>.</p>\n<p>\\\nWhen a smart contract is created with the <code>create2</code> command, the address of the contract can be predicted in advance. The address is calculated from the combination of salt, the deployer, and the initialization bytecode. If the contract self-destructs, then a new contract at the same address can be deployed.</p>\n<p>\\\nNote that the address is a function of the initialization code, not the deployed code. It is possible to deploy different bytecode by having the initialization code load a different runtime code. By self-destructing and redeploying with the same initialization code but a different deployment code, the bytecode of the contract can mutate.</p>\n<p>\\\nTherefore, we can have a smart contract whose first <code>k</code> bytes are for self-destructing under a certain condition, but the rest of the bytes are just the RSA public key.</p>\n<p>\\\nBecause the address is determined in advance, we can store the address of this metamorphic contract in an immutable variable. We can <code>EXTCODECOPY</code> from that address when we need the public key. To replace the public key, we instruct the contract to <code>selfdestruct</code>, then deploy a new contract to that address.</p>\n<h2 id=\"savinganadditional100gaswithaccesslists\">Saving an additional 100 gas with access lists</h2>\n<p><a href=\"https://eips.ethereum.org/EIPS/eip-2930\">EIP 2930</a> added a new type of transaction that allows the user to specify in advance which addresses and storage slots will be accessed. This allows the nodes to prefetch those values from storage, thus speeding up execution time. Using an access list transaction when calling an external contract can save 100 gas. Note that this saving does not apply when a smart contract accesses its own storage variable. Because this RSA presale airdrop design relies on an external contract to store the public key, then using an access list is appropriate.</p>\n<h2 id=\"benchmarksgascostvskeysize\">Benchmarks: Gas cost vs key size</h2>\n<p>Most of the gas cost comes from having very large calldata as a result of large signatures. If the key size is set to 1024 bits, then the call data will be 128 bytes. Each byte costs 16 gas, so the total gas cost just to have calldata that large is 2,048 gas.</p>\n<p>\\\nCompared to most other use cases, ours uses a considerable amount of memory, and Ethereum charges for this.</p>\n<h2 id=\"whythissavesgasrelativetoecdsa\">Why this saves gas relative to ECDSA</h2>\n<p>The benchmarks make it clear that the larger the key (and hence the signature), the larger the gas cost. Our design exploits the fact that the precompile assigns a low price to raise numbers to low power. The cost of executing the precompiled contract under those conditions at <code>0x05</code> is only a few hundred gas compared to thousands for executing the precompile for ECDSA.</p>\n<h2 id=\"choosingakeysize\">Choosing a key size</h2>\n<p>Although a key with 829 bits has been factored in, it requires a modern supercomputer to do so. For applications such as airdropping lower-value tokens or putting NFTs on a presale, an attacker does not have the incentive to spend six figures to a million dollars to factor a public key and obtain an NFT in a presale. The most expensive Ethereum tokens at this time of writing (<a href=\"https://opensea.io/collection/fidenza-by-tyler-hobbs\">Fidenza</a> and <a href=\"https://opensea.io/collection/boredapeyachtclub\">Bored Ape Yacht Club</a>) cost approximately $100,000 a piece, so for the vast majority of applications, it is not economical for an attacker to try to factor the public key.</p>\n<p>Remember, each bit doubles the difficulty of factoring the integer, so as of 2022, most low-value token presales are probably safe with 896 bits. In this case, saving users over 2,500 gas compared to ECDSA is compelling.</p>\n<h2 id=\"keysizebenchmarks\">Key Size Benchmarks</h2>\n<p>This was conducted with Solidity compiler version 0.8.17 with the optimizer set to 1 million</p>\n<p>\\</p>\n<ul>\n<li>RSA-896 (Gas: 27,040)</li>\n<li>RSA-960 (Gas: 27,115)</li>\n<li>RSA-1024 (Gas: 27,311)</li>\n<li>RSA-2048 (Gas: 29,901)</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>We present a novel method for assigning addresses to a presale or airdrop that is more efficient than the known solutions today. By combining the modular exponentiation precompile with the metamorphic contract pattern and the access list transaction, we can validate secure RSA signatures on-chain in a gas-efficient manner.</p>\n<p>\\\nOur work is only a proof of concept at this stage. Developers are advised to use caution using the code in production.</p>\n<p>\\\nThis project was created by <a href=\"https://twitter.com/peakycryptos\">Suthan Somadeva</a> and <a href=\"https://twitter.com/ThisIsMikeDB\">Michael Burke</a> as part of the <a href=\"https://www.rareskills.io/solidity-bootcamp\">RareSkills Solidity Bootcamp</a>. The code implementation and unit tests are on <a href=\"https://github.com/RareSkills/RSA-presale-allowlist\">github</a>.</p>\n<p>\\</p>\n<hr />\n<p>Also published <a href=\"https://www.rareskills.io/post/solidity-rsa-signatures-for-aidrops-and-presales-beating-ecdsa-and-merkle-trees-in-gas-efficiency\">here.</a> </p>","content:encodedSnippet":"Solidity RSA signatures for aidrops and presales: Beating ECDSA and Merkle Trees in Gas Efficiency\nBy Suthan Somadeva and Michael Burke\nIntroduction\nCreating a contract that gives certain addresses permissions goes by several names: airdrops, presale, whitelist, allowlist, and so forth. But the essence of the idea is there is a set of addresses that have special permission to buy a high-demand token for a desirable price (sometimes free).\n\\\nThere are three established solutions for this: mappings, Merkle trees, and ECDSA signatures.\nThe relative merits of these approaches have already been discussed elsewhere, so we will summarize the results:\n\\\n\n\nECDSA Signature Verification (Gas: 29,293)\n\n\nusing Merkle proofs (Gas: 30,517, 128 addresses)\n\\\nA mapping presale works when the seller enters the addresses of the customers into a mapping that goes from address to boolean to note if the address is privileged or not. The mapping is set to false after the buyer completes the transaction. This ensures only addresses that are marked true can make a purchase. This is very gas efficient for the buyer, but the seller could spend millions of gas allow-listing thousands of addresses, (it will cost at least 22,100 gas to add an address to the allowlist).\n\\\nBecause of this, Merkle Trees and ECDSA signatures (using the precompile ecerecover, or better yet, the more secure wrapper around it published by OpenZeppelin), are often preferred to mappings. The gas cost (for the buyer) of executing the ECDSA signature verification is 29,293 gas. This includes the 21,000 to initiate the transaction, so the ECDSA cost is 8,293. Note that this includes reading the signing address from storage, but this cost is necessary or we won’t be able to invalidate signatures.\n\\\nMerkle Trees vary in cost based on tree size (larger trees require larger Merkle proofs), but if over 1,000 addresses are in the Merkle tree, it will cost at least 32,000 gas (or more) to verify the address. This cost is clearly inferior to ECDSA.\n\\\nThe goal, then, is to beat ECDSA which costs 8,293 gas. To keep solutions apples-to-apples, the alternative solution must:\n\\\n\nBe able to nullify allow-listed addresses. Merkle trees can change their root, ECDSA , can change their signing address, and mappings can set the value to false.\nNot impose a substantial cost burden on the seller the way mappings do\nCost less than 8,200 gas for the buyer (including a storage load)\nNot be compromised on security\nPrerequisites\nTo understand the proposed methodology, the reader should be familiar with the following subjects:\n\\\n\nPrecompiled smart contracts (recommended reading, stackexchange)\nMetamorphic contracts (introduction, recommended reading)\nAccess lists (recommended reading)\nHow to use digital signatures and their appropriate use cases in blockchain applications\nHow gas cost is computed, especially as it relates to calldata, opcodes, storage, and memory usage.\nThe RSA Algorithm\nIf we want to substantially beat ECDSA, we need to find a different cryptographic algorithm that allows for the proof of set membership. ECDSA is actually the newer, cooler version of the original digital signature algorithm, RSA. ECDSA relies on discrete logarithms over elliptic curves being hard (hence the name – elliptic curve digital signature algorithm). RSA (named after its authors, Rivest, Shamir, Adleman) relies on large integers being hard to factor. In terms of age, RSA was published in the 1970s, but ECDSA became a formal specification in the early 2000s.\n\\\nWe will not explain RSA in detail here, but some prerequisites are in order.\n\\\nThe signer picks two large prime numbers p and q, and multiplies them together to produce n. This n is the first part of the public key. Second, the signer picks a small prime e (can be hardcoded to 3 for our usecase), and publishes the pair (n, e) as the public key. Behind the scenes, the signer computes\n\\\nt = (p - 1) * (q - 1)\nd = t^(-1) % n\n\n\\\nThe number d is the private key. If an adversary could decompose n into p and q, then computing d would be trivial. But it is known that integer factorization is hard. To sign a message, the signer hashes the message m to get h and raises h to the power d. That is,\n\\\ns = h(m) ^ d % n\n\n\\\nThe signer then publishes (m, s) as the message and signature.\nThe verifier then hashes m and raises it to the power e mod n. Remember, e and n are the public key. If and only if\n\\\ns == s ^ e % n\n\n\\\nthen the signature is valid for the public key (n, e). Note that if n is extremely large, then the probability that s == s ^ e % n by random chance is vanishingly small. If the equality checks out, then we know the signature is valid for the public key.\n\\\nTo do this in Ethereum, we would simply sign an address as\ns = buyerAddress ^ d % n\n\n\\\nand the smart contract would verify\nmsg.sender == s ^ e % n\n\n\\\nUsing only 256 bits is unsafe\nWe say “factoring integers is hard” but clearly this implies that the number must be large enough. For example, 33 is composed of two prime numbers and is trivial to decompose. Thankfully, we have real-world benchmarks of what the state-of-the-art can accomplish in the RSA Factoring Challenge.\n\\\nTo clarify, the number of “bits” refers to the size of the public key. Therefore, when we say “RSA 2048”, this means the number n, the modulus, has 2048 bits. When comparing key sizes, it’s important to remember that each additional bit doubles the size of the number. So 700 bits is exponentially more secure than 350 bits, not twice as secure.\n\\\nThe largest key to be cracked (factored) so far had 829 bits, and it required a modern supercomputer to do it. The team utilized approximately 2700 CPU core-years, using a 2.1 GHz Intel Xeon Gold 6130 CPU. The cheapest 16 core CPU on AWS costs $0.40 cents per hour, so the cost to crack this key is in the order of $9.4 million dollars. Even assuming generous discounts from the cloud provider, the cost is in the millions.\nModular arithmetic with more than 256 bits in Solidity\nEthereum only supports 32-byte data types, so by default, we cannot carry out\ns ^ e % n\n\\\nThankfully, the Ethereum blockchain added a precompiled contract in EIP 198 specifically to support modular arithmetic. To use it, the base, exponent, and modulus must be loaded into memory in abi encoded format. Then the contract living at address 0x05 is invoked.\nStoring the public key becomes a bit of an issue if you use a secure amount of bits. If the key size is 1024 bits, that necessitates 4 storage slots. To read the public key out of storage would be four SLOAD operations, for a total of 8,400 gas. This by itself is already less efficient than the ECDSA solution benchmarked above.\n\\\nIf we use immutable variables, this cost is largely eliminated, but this creates a weakness if we cannot retroactively remove someone from the presale. In traditional ECDSA or Merkle Trees, we would just replace the signing address or the Merkle Root. This isn’t possible if we use an immutable variable.\n\\\nHowever, storing the public key in the bytecode instead of storage is the key idea. Reading an external contract’s bytecode (EXTCODECOPY) costs 2,600 gas, which is far less than the 8,400 gas of reading each part of the public key in four pieces.\n\\\nTo invalidate a public key, we could simply create a new contract, and update a storage variable to point to the new address. But that adds back an additional 2,100 gas.\n\\\nIt turns out, it is possible to store the external contract’s address (whose bytecode stores the public key) in an immutable variable, but still invalidate the public key by mutating the external smart contract’s bytecode.\nInvalidating the public key with the metamorphic contract pattern\nA smart contract is created by loading the deployment bytecode into memory, then returning the range of the bytecode which contains the runtime code. See more here.\n\\\nWhen a smart contract is created with the create2 command, the address of the contract can be predicted in advance. The address is calculated from the combination of salt, the deployer, and the initialization bytecode. If the contract self-destructs, then a new contract at the same address can be deployed.\n\\\nNote that the address is a function of the initialization code, not the deployed code. It is possible to deploy different bytecode by having the initialization code load a different runtime code. By self-destructing and redeploying with the same initialization code but a different deployment code, the bytecode of the contract can mutate.\n\\\nTherefore, we can have a smart contract whose first k bytes are for self-destructing under a certain condition, but the rest of the bytes are just the RSA public key.\n\\\nBecause the address is determined in advance, we can store the address of this metamorphic contract in an immutable variable. We can EXTCODECOPY from that address when we need the public key. To replace the public key, we instruct the contract to selfdestruct, then deploy a new contract to that address.\nSaving an additional 100 gas with access lists\nEIP 2930 added a new type of transaction that allows the user to specify in advance which addresses and storage slots will be accessed. This allows the nodes to prefetch those values from storage, thus speeding up execution time. Using an access list transaction when calling an external contract can save 100 gas. Note that this saving does not apply when a smart contract accesses its own storage variable. Because this RSA presale airdrop design relies on an external contract to store the public key, then using an access list is appropriate.\nBenchmarks: Gas cost vs key size\nMost of the gas cost comes from having very large calldata as a result of large signatures. If the key size is set to 1024 bits, then the call data will be 128 bytes. Each byte costs 16 gas, so the total gas cost just to have calldata that large is 2,048 gas.\n\\\nCompared to most other use cases, ours uses a considerable amount of memory, and Ethereum charges for this.\nWhy this saves gas relative to ECDSA\nThe benchmarks make it clear that the larger the key (and hence the signature), the larger the gas cost. Our design exploits the fact that the precompile assigns a low price to raise numbers to low power. The cost of executing the precompiled contract under those conditions at 0x05 is only a few hundred gas compared to thousands for executing the precompile for ECDSA.\nChoosing a key size\nAlthough a key with 829 bits has been factored in, it requires a modern supercomputer to do so. For applications such as airdropping lower-value tokens or putting NFTs on a presale, an attacker does not have the incentive to spend six figures to a million dollars to factor a public key and obtain an NFT in a presale. The most expensive Ethereum tokens at this time of writing (Fidenza and Bored Ape Yacht Club) cost approximately $100,000 a piece, so for the vast majority of applications, it is not economical for an attacker to try to factor the public key.\nRemember, each bit doubles the difficulty of factoring the integer, so as of 2022, most low-value token presales are probably safe with 896 bits. In this case, saving users over 2,500 gas compared to ECDSA is compelling.\nKey Size Benchmarks\nThis was conducted with Solidity compiler version 0.8.17 with the optimizer set to 1 million\n\\\n\nRSA-896 (Gas: 27,040)\nRSA-960 (Gas: 27,115)\nRSA-1024 (Gas: 27,311)\nRSA-2048 (Gas: 29,901)\nConclusion\nWe present a novel method for assigning addresses to a presale or airdrop that is more efficient than the known solutions today. By combining the modular exponentiation precompile with the metamorphic contract pattern and the access list transaction, we can validate secure RSA signatures on-chain in a gas-efficient manner.\n\\\nOur work is only a proof of concept at this stage. Developers are advised to use caution using the code in production.\n\\\nThis project was created by Suthan Somadeva and Michael Burke as part of the RareSkills Solidity Bootcamp. The code implementation and unit tests are on github.\n\\\n\nAlso published here.","dc:creator":"RareSkills","content":"We can create a more efficient airdrop and presale mechanism with RSA cryptography, the modular arithmetic precompile, access lists, and metamorphic contracts in one smart contract.","contentSnippet":"We can create a more efficient airdrop and presale mechanism with RSA cryptography, the modular arithmetic precompile, access lists, and metamorphic contracts in one smart contract.","guid":"https://hackernoon.com/using-solidity-rsa-signatures-for-presales-and-airdrops?source=rss","categories":["smart-contract","solidity","ethereum-gas","cryptography","ethereum-blockchain","blockchain","blockchain-technology","good-company"],"isoDate":"2022-12-13T17:17:29.000Z","from":"https://hackernoon.com/feed","hashId":"e2bec796e21f5979cfb1961fe437e0af"},{"creator":"Max Zhuk","title":"The Factory Method pattern in TypeScript","link":"https://hackernoon.com/the-factory-method-pattern-in-typescript?source=rss","pubDate":"Tue, 13 Dec 2022 18:23:15 GMT","content:encoded":"<p>Hi!</p>\n<p>\\\nThe Factory Method pattern is a design pattern that is used to create objects without specifying the exact class of object that will be created. It is often used when the type of object to be created is determined at runtime, or when there is a need to create objects of different types based on the specific requirements of the application.</p>\n<p>\\\nIn TypeScript, the Factory Method pattern can be implemented using a <code>factory</code> function that takes a set of parameters and returns an object of a specific type. The <code>factory</code> function uses the parameters to determine the type of object to create, and then creates and returns the object.</p>\n<p>\\\nHere is an example of a <code>factory</code> function in TypeScript:</p>\n<pre><code class=\"typescript language-typescript\">function createProduct(type: string): Product {\n  switch (type) {\n    case 'book':\n      return new Book();\n    case 'software':\n      return new Software();\n    default:\n      throw new Error('Invalid product type');\n  }\n}\n</code></pre>\n<p>\\\nThis <code>factory</code> function takes a <code>type</code> parameter that specifies the type of product to create. It then uses a <code>switch</code> statement to determine the type of object to create based on the <code>type</code> parameter. If the <code>type</code> parameter is <code>book</code>, the <code>factory</code> function creates and returns a <code>Book</code> object. If the <code>type</code> parameter is <code>software</code>, the <code>factory</code> function creates and returns a <code>Software</code> object. Otherwise, it throws an error.</p>\n<p>\\\nTo use the <code>factory</code> function, other classes can call it with the appropriate <code>type</code> parameter to create an object of the desired type. </p>\n<p>\\\nHere is an example of how to use the <code>factory</code> function:</p>\n<pre><code class=\"typescript language-typescript\">const product = createProduct('book');\n</code></pre>\n<p>\\\nIn this example, the <code>createProduct</code> function is called with the <code>type</code> parameter set to <code>book</code>, which causes the <code>factory</code> function to create and return a <code>Book</code> object.</p>\n<p>\\\nThe Factory Method pattern is a useful design pattern for creating objects without specifying their exact class. In TypeScript, it can be implemented using a <code>factory</code> function that takes parameters and returns an object of the appropriate type. This allows other classes to create objects of different types based on the specific requirements of the application.</p>","content:encodedSnippet":"Hi!\n\\\nThe Factory Method pattern is a design pattern that is used to create objects without specifying the exact class of object that will be created. It is often used when the type of object to be created is determined at runtime, or when there is a need to create objects of different types based on the specific requirements of the application.\n\\\nIn TypeScript, the Factory Method pattern can be implemented using a factory function that takes a set of parameters and returns an object of a specific type. The factory function uses the parameters to determine the type of object to create, and then creates and returns the object.\n\\\nHere is an example of a factory function in TypeScript:\nfunction createProduct(type: string): Product {\n  switch (type) {\n    case 'book':\n      return new Book();\n    case 'software':\n      return new Software();\n    default:\n      throw new Error('Invalid product type');\n  }\n}\n\n\\\nThis factory function takes a type parameter that specifies the type of product to create. It then uses a switch statement to determine the type of object to create based on the type parameter. If the type parameter is book, the factory function creates and returns a Book object. If the type parameter is software, the factory function creates and returns a Software object. Otherwise, it throws an error.\n\\\nTo use the factory function, other classes can call it with the appropriate type parameter to create an object of the desired type. \n\\\nHere is an example of how to use the factory function:\nconst product = createProduct('book');\n\n\\\nIn this example, the createProduct function is called with the type parameter set to book, which causes the factory function to create and return a Book object.\n\\\nThe Factory Method pattern is a useful design pattern for creating objects without specifying their exact class. In TypeScript, it can be implemented using a factory function that takes parameters and returns an object of the appropriate type. This allows other classes to create objects of different types based on the specific requirements of the application.","dc:creator":"Max Zhuk","content":"Factory Method pattern is a design pattern that is used to create objects without specifying their exact class. In TypeScript, it can be implemented using a 'factory' function that takes a set of parameters and returns an object of a specific type. The `factory` function uses the parameters to determine the type of object to create, and then creates and returns the object. This allows other classes to create and return objects of different types based on the specific requirements of the application. To use the pattern, other classes can call it with the appropriate `type` parameter to create an object.","contentSnippet":"Factory Method pattern is a design pattern that is used to create objects without specifying their exact class. In TypeScript, it can be implemented using a 'factory' function that takes a set of parameters and returns an object of a specific type. The `factory` function uses the parameters to determine the type of object to create, and then creates and returns the object. This allows other classes to create and return objects of different types based on the specific requirements of the application. To use the pattern, other classes can call it with the appropriate `type` parameter to create an object.","guid":"https://hackernoon.com/the-factory-method-pattern-in-typescript?source=rss","categories":["web-development","typescript","oop-design-patterns","webdev","design","web-design","coding-skills","programming"],"isoDate":"2022-12-13T18:23:15.000Z","from":"https://hackernoon.com/feed","hashId":"584dd9a1e83baa4e4c3ee4e89d705e08"},{"creator":"Alessandro Ravanetti","title":"How to Get Press Coverage for Your Startup in 2023","link":"https://hackernoon.com/how-to-get-press-coverage-for-your-startup-in-2023?source=rss","pubDate":"Tue, 13 Dec 2022 22:07:12 GMT","content:encoded":"<p>\\\nAre you trying to get some media exposure for yourself and your startup but have no idea where to start? Worry not, because that's pretty common. And yes, you have now landed in the right place.</p>\n<p>\\\nThe reality is that there are plenty of ways to get press attention. And while I mainly work with fintech startups, what’s covered here, also applies to other verticals.</p>\n<p>\\\n<strong>Ready?</strong> Let's go! Here are a few tips for you to get some media exposure:</p>\n<p>\\</p>\n<h2 id=\"buildhumanrelationships\">Build human relationships 😊</h2>\n<p>Spray and pray don't make any sense here. You will not get any coverage by spamming a list of journalists with a generic message. On the contrary, it can be detrimental. Remember, you are sending your email to other humans who receive tons of meaningless press releases every day. Don't be just another «Dear [First name]» fool. Remember that journalists are humans, too.</p>\n<p>\\\nConnect with relevant journalists on LinkedIn and Twitter, follow their work, and comment when appropriate. Attend networking events, connect with local media and tell them your story one-on-one. It's all about building relationships and trust.</p>\n<p>\\\nAnd in the long run, it always pays out to be nice (in many different ways!).</p>\n<p>\\</p>\n<h2 id=\"craftagreatpitch\">Craft a great pitch 🎯</h2>\n<p>When pitching your story to the media, think of it from the journalists’ point of view: is it really something their readers will care about? Is there a social impact, or does it offer a new perspective on an existing topic?</p>\n<p>\\\nYou need to capture attention fast, so make sure your email subject line stands out and clearly states why what you have is newsworthy and why it matters for their specific audience. In the body of your email, be sure to introduce yourself and your startup quickly (e.g. in one sentence). Keep it short and sweet while avoiding jargon while including all the links and info needed for editors and reporters to check your story.</p>\n<p>\\\nAlso, if you are sending out a press release, clearly indicate whether or not it is an exclusive story and if there is an embargo, including the date and time of when the announcement will be made. And if you are looking for a quick call, be courteous in your request and explain why you want to talk.</p>\n<p>\\\nRemember, journalists like founders have no time to waste, so make sure to provide all the key info.</p>\n<p>\\</p>\n<h2 id=\"offersomethingnewsworthy\">Offer something newsworthy 📰</h2>\n<p>This may be the most crucial tip. If your story is not newsworthy, it probably won’t get picked up – no matter how well-crafted and accurate the pitch is. To ensure your message grabs journalists’ attention, try to come up with something fresh.</p>\n<p>\\\nSo, you may now think, ok, <strong>cool, but what can be considered newsworthy?</strong></p>\n<p>\\\nHere are some examples:</p>\n<p>\\</p>\n<ol>\n<li><strong>Startup and product launches</strong></li>\n</ol>\n<p>Easier to get some attention when your startup is the first to offer a specific service, you’re offering something totally new in your industry, or you have some well-known co-founders and backers.</p>\n<p>\\</p>\n<ol start=\"2\">\n<li><strong>Major company milestones</strong></li>\n</ol>\n<p>Whether hitting your first 10k users or reaching $100k MRR, these are milestones worth sharing (and celebrating!). Awards, recognitions, and certifications can also be newsworthy.</p>\n<p>\\</p>\n<ol start=\"3\">\n<li><strong>New customers or partnerships</strong></li>\n</ol>\n<p>This could be a partnership announcement with a well-known company, the fact that you got your product into a prominent retailer, or a case study with a customer you worked with. Here it's essential to have some evidence and data that can be shared with the media.</p>\n<p>\\</p>\n<ol start=\"4\">\n<li><strong>Industry insights and reports</strong></li>\n</ol>\n<p>Do you have data on the state of the industry? Is there something major happening that's affecting your sector? Write about it on your company blog and newsletter, as well as a guest author on external publications. Having a proper content strategy in place can do wonders in this sense. Data-driven stories, especially when some nice visuals are included, work pretty well for getting some media coverage. You need to offer concrete facts, not just opinions.</p>\n<p>\\</p>\n<ol start=\"5\">\n<li><strong>Fundraising round</strong></li>\n</ol>\n<p>Did you just get funding? If the amount is significant or involves some notable VC firms or angel investors, it will be easier to get some press. Still, you must provide all the relevant details.</p>\n<p>\\</p>\n<h2 id=\"bepatientandpersistent\">Be patient and persistent ✨</h2>\n<p>Yes, because getting press coverage does not happen overnight. You need to be consistent with your efforts and put yourself out there, making sure that people can easily find you and your startup - do yourself a favor and keep info in directories such as Crunchbase and on social media pages always up-to-date.</p>\n<p>\\\n<em>Bonus tip:</em> Be ready to respond quickly if a journalist or editor reaches out with questions – it's common to work under tight deadlines, so try to help out with research and inquiries as soon as possible.</p>\n<p>\\\nThat's all for now!  I hope this brief guide will help you get the press attention your startup deserves. Good luck, and don't forget to be nice, keep your pitch short and sweet, get in love with the process, and always keep going. Consistency will get you there 💪</p>\n<p>\\\n\\</p>","content:encodedSnippet":"\\\nAre you trying to get some media exposure for yourself and your startup but have no idea where to start? Worry not, because that's pretty common. And yes, you have now landed in the right place.\n\\\nThe reality is that there are plenty of ways to get press attention. And while I mainly work with fintech startups, what’s covered here, also applies to other verticals.\n\\\nReady? Let's go! Here are a few tips for you to get some media exposure:\n\\\nBuild human relationships 😊\nSpray and pray don't make any sense here. You will not get any coverage by spamming a list of journalists with a generic message. On the contrary, it can be detrimental. Remember, you are sending your email to other humans who receive tons of meaningless press releases every day. Don't be just another «Dear [First name]» fool. Remember that journalists are humans, too.\n\\\nConnect with relevant journalists on LinkedIn and Twitter, follow their work, and comment when appropriate. Attend networking events, connect with local media and tell them your story one-on-one. It's all about building relationships and trust.\n\\\nAnd in the long run, it always pays out to be nice (in many different ways!).\n\\\nCraft a great pitch 🎯\nWhen pitching your story to the media, think of it from the journalists’ point of view: is it really something their readers will care about? Is there a social impact, or does it offer a new perspective on an existing topic?\n\\\nYou need to capture attention fast, so make sure your email subject line stands out and clearly states why what you have is newsworthy and why it matters for their specific audience. In the body of your email, be sure to introduce yourself and your startup quickly (e.g. in one sentence). Keep it short and sweet while avoiding jargon while including all the links and info needed for editors and reporters to check your story.\n\\\nAlso, if you are sending out a press release, clearly indicate whether or not it is an exclusive story and if there is an embargo, including the date and time of when the announcement will be made. And if you are looking for a quick call, be courteous in your request and explain why you want to talk.\n\\\nRemember, journalists like founders have no time to waste, so make sure to provide all the key info.\n\\\nOffer something newsworthy 📰\nThis may be the most crucial tip. If your story is not newsworthy, it probably won’t get picked up – no matter how well-crafted and accurate the pitch is. To ensure your message grabs journalists’ attention, try to come up with something fresh.\n\\\nSo, you may now think, ok, cool, but what can be considered newsworthy?\n\\\nHere are some examples:\n\\\n\nStartup and product launches\nEasier to get some attention when your startup is the first to offer a specific service, you’re offering something totally new in your industry, or you have some well-known co-founders and backers.\n\\\n\nMajor company milestones\nWhether hitting your first 10k users or reaching $100k MRR, these are milestones worth sharing (and celebrating!). Awards, recognitions, and certifications can also be newsworthy.\n\\\n\nNew customers or partnerships\nThis could be a partnership announcement with a well-known company, the fact that you got your product into a prominent retailer, or a case study with a customer you worked with. Here it's essential to have some evidence and data that can be shared with the media.\n\\\n\nIndustry insights and reports\nDo you have data on the state of the industry? Is there something major happening that's affecting your sector? Write about it on your company blog and newsletter, as well as a guest author on external publications. Having a proper content strategy in place can do wonders in this sense. Data-driven stories, especially when some nice visuals are included, work pretty well for getting some media coverage. You need to offer concrete facts, not just opinions.\n\\\n\nFundraising round\nDid you just get funding? If the amount is significant or involves some notable VC firms or angel investors, it will be easier to get some press. Still, you must provide all the relevant details.\n\\\nBe patient and persistent ✨\nYes, because getting press coverage does not happen overnight. You need to be consistent with your efforts and put yourself out there, making sure that people can easily find you and your startup - do yourself a favor and keep info in directories such as Crunchbase and on social media pages always up-to-date.\n\\\nBonus tip: Be ready to respond quickly if a journalist or editor reaches out with questions – it's common to work under tight deadlines, so try to help out with research and inquiries as soon as possible.\n\\\nThat's all for now!  I hope this brief guide will help you get the press attention your startup deserves. Good luck, and don't forget to be nice, keep your pitch short and sweet, get in love with the process, and always keep going. Consistency will get you there 💪\n\\\n\\","dc:creator":"Alessandro Ravanetti","content":"There are plenty of ways to get press attention for your startup. Here's some guidance that can help you gain some media traction. It pays out to be nice (in many different ways!). Craft a great pitch to pitch your story to the media. If your story is not really newsworthy, then it probably won’t get picked up – no matter how well-crafted and accurate the pitch is. It's all about building relationships and trust so you'll be the first in line for coverage when the time is right.","contentSnippet":"There are plenty of ways to get press attention for your startup. Here's some guidance that can help you gain some media traction. It pays out to be nice (in many different ways!). Craft a great pitch to pitch your story to the media. If your story is not really newsworthy, then it probably won’t get picked up – no matter how well-crafted and accurate the pitch is. It's all about building relationships and trust so you'll be the first in line for coverage when the time is right.","guid":"https://hackernoon.com/how-to-get-press-coverage-for-your-startup-in-2023?source=rss","categories":["startup","startup-advice","content-strategy","business","business-strategy","startup-marketing","marketing","pr","web-monetization"],"isoDate":"2022-12-13T22:07:12.000Z","from":"https://hackernoon.com/feed","hashId":"fc4141bf17b97ff37feefb4c0d581e4f"},{"title":"Bahamas judge denies bail for FTX founder Sam Bankman-Fried","link":"https://seekingalpha.com/news/3916742-bahamas-judge-denies-bail-for-ftx-founder-sam-bankman-fried?utm_source=feed_news_crypto&utm_medium=referral","pubDate":"Tue, 13 Dec 2022 18:02:53 -0500","guid":"https://seekingalpha.com/news/3916742-bahamas-judge-denies-bail-for-ftx-founder-sam-bankman-fried?utm_source=feed_news_crypto&utm_medium=referral","categories":[{"_":"ftt-usd","$":{"domain":"https://seekingalpha.com/symbol/FTT-USD"}}],"isoDate":"2022-12-13T23:02:53.000Z","from":"https://seekingalpha.com/news/crypto/feed","hashId":"e226aaa80839fcd7af8f77dc64981102"},{"creator":"Will Nicoll","title":"Colony Q4 2022 Update","link":"https://blog.colony.io/colony-q4-2022-update/","pubDate":"Tue, 13 Dec 2022 23:11:49 GMT","content:encoded":"<h2 id=\"laying-the-groundwork-for-an-explosive-2023\"><strong>Laying the groundwork for an explosive 2023</strong></h2><img src=\"https://blog.colony.io/content/images/2022/12/q4-update-1.png\" alt=\"Colony Q4 2022 Update\"><p><em>Read on to find insights from this quarter, leading up to Colony&#x2019;s most impactful era yet</em></p><h3 id=\"cant-stop-wont-stop-building\"><strong>Can&apos;t stop (won&apos;t stop) building </strong></h3><p>A tumultuous industry landscape saw a wild ride for crypto this year. Despite the bear market blues and crazy news, Colony has continued development without skipping a beat.</p><p>After all, this isn&#x2019;t Colony&#x2019;s first ride on the market merry-go-round. Since time immemorial (2014), we&#x2019;ve kept our eyes on the prize throughout some historic crashes. The mission of supporting more equitable, transparent, and efficient organizations is as relevant today as it ever was, regardless of market conditions.</p><h3 id=\"coin-machine-taking-off-soon\">Coin Machine: taking off soon</h3><p>Coin Machine&#x2014;the Colony system for easy and fair token launches&#x2014;is set to launch early next year. Once live, Coin Machine will address the all-too common challenges of price manipulation, volatility, and front-running, while simplifying the process for all involved. Unlike traditional liquidity bootstrapping pools, Coin Machine will not require projects to provide stablecoins as collateral, removing one of the key barriers to entry for permissionless token launches.</p><p>Interested in running one of the first token sales on Coin Machine? <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeQHnOUTMeRAJYe8nLkbxhMTnvqtyxWn8JOkXp4XeTdkWch2w/viewform\">Fill out this form</a> and we&#x2019;ll be in touch.</p><h3 id=\"welcome-to-dao-club\">Welcome to DAO Club</h3><p>The <a href=\"https://colony.io/dao-club\">Colony DAO Club</a> concluded its maiden voyage in Q3, connecting DAO builders from all over the world with each other to share project ideas and learn the best practices of DAO building. The freshly-launched second cohort has brought on <a href=\"https://twitter.com/joincolony/status/1582395362576588802?s=20&amp;t=QrBGIaFKCX2gU7ejCulWeA\">another wave of fascinating orgs</a>, spanning a wide range of project goals and visions, yet united in the commitment to more equitable ways of working. Applications for Cohort 3 open in Q1 2023!</p><p>Want to witness the colony-building journey in action? You can hear from a community member launching a colony from scratch and sharing lessons learned along the way in the <a href=\"https://youtube.com/playlist?list=PLGruKlExlEBe-PYT2LcwAkyU4CVnjaQYC\">first season of Builder&#x2019;s Spotlight</a>, featuring PictureBookDAO. The <a href=\"https://www.youtube.com/watch?v=brjcenIf0kA\">second season</a>, featuring ELI5 DAO, is also one you don&apos;t want to miss!</p><p><a href=\"https://colony.io/daojones\">DAO Jones</a> also launched in Q3, with several established projects joining the program to explore decentralizing and optimizing their governance. Moving into next year, the parameters around this program will be finessed based on feedback from the initial cohort, paving the way for the next generation of online organizations.</p><h3 id=\"new-video-colony-key-features\">New video: Colony Key Features</h3><p>Looking for an overview of some of the most powerful Colony features? This five-minute video will get you started in the right direction: </p><figure class=\"kg-card kg-embed-card\"><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/kCQb_yl4rMk?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Building a DAO? You need this framework!\"></iframe></figure><h3 id=\"metacolony-blast-off\"><strong>Metacolony blast-off</strong></h3><p>One primary objective of Q3 was to get the <a href=\"https://xdai.colony.io/colony/meta\">Metacolony</a> off the ground. The Metacolony is the &#x201C;Colony colony&#x201D;&#x2014;the DAO that supports the development and growth of the Colony protocol. This launch was achieved, and Metacolony contributors now use the dapp to create expenditures and decide on governance decisions.</p><p>Building Colony with Colony&#x2014;how cool is that?</p><h3 id=\"new-colony-app-features-and-upgrades\">New Colony App features and upgrades</h3><p>This quarter will see the release of a totally new backend to the <a href=\"https://xdai.colony.io/landing\">Colony App</a>, providing major performance and usability improvements. The new architecture will also make building Colony much easier, laying the groundwork for a slew of new features that you can expect to roll out thick and fast over 2023. In addition, an improved UI/UX and onboarding experience will make it easier than ever to go from zero-to-DAO.</p><p>The new <a href=\"https://twitter.com/joincolony/status/1600231092744704000?s=20&amp;t=0HGw_UP136QkiY4bA6NVTw\">Simple Decisions</a> feature was recently rolled out, making it easy for contributors to put forward &#x201C;yes&#x201D; or &#x201C;no&#x201D; proposals which don&#x2019;t need to be executed automatically. That means you can use Simple Decisions to decide on choices such as:</p><ul><li>Should our colony&#x2019;s mascot be a pharaoh ant?</li><li>Should we let Jane run the Twitter account?</li><li>Should we elect Jimmy as our ambassador to ETH Denver?</li></ul><p>If you&#x2019;ve used <a href=\"https://twitter.com/joincolony/status/1598009846544191488?s=20&amp;t=0HGw_UP136QkiY4bA6NVTw\">Motions</a> on Colony before, the process of launching a Simple Decision will already be familiar to you. Simply navigate to the new <strong>Decisions</strong> tab on your colony, create a new Decision, and back it by staking native tokens, just as you would a Motion.</p><p>As new upgrades are deployed&#x2014;such as the forthcoming <strong>Gnosis Safe Control</strong> feature&#x2014;we&#x2019;ll be providing regular updates to the community: in <a href=\"https://discord.gg/feVZWwysqM\">Discord</a>, on <a href=\"https://twitter.com/joincolony\">Twitter</a>, and <a href=\"https://www.twitch.tv/joincolony\">streaming on Twitch</a>. </p><h3 id=\"enter-the-knowledge-realm\">Enter the Knowledge Realm</h3><p>The <a href=\"https://docs.colony.io/\">Colony user docs</a> are being restructured to guide users through the full process of starting or joining a DAO on Colony. The Knowledge Realm, set to launch in Q4, is where you can learn everything from the fundamentals of DAO building to advanced Colony features. As you level up your DAO-fu, you can put your knowledge to the test and earn NFT completion badges. Gotta mint &apos;em all!</p><h3 id=\"more-colony-events\">More Colony events!</h3><p>Did we see you at Devcon Bogot&#xE1;? If not, you missed chess grandmasters, escape rooms, and some of the most innovative minds in organizational design at our booth. It&#x2019;s always great to connect human faces with ENSs and we left as bullish as ever on the future of DAO building. We&#x2019;ll see you at ETH Denver 2023!<br></p><p>Happy building through the New Year!</p><p>&#x2014; Will and the Metacolony team</p><p>***</p><p><em>Colony makes it easy for people all over the world to build organizations together, online.</em></p><p><em>Join the conversation on </em><a href=\"https://discord.com/invite/feVZWwysqM\"><em>Discord</em></a><em>, follow us on </em><a href=\"https://twitter.com/joincolony\"><em>Twitter</em></a><em>, sign up for (occasional and awesome) </em><a href=\"https://colony.io/\"><em>email updates</em></a><em>, or if you&#x2019;re feeling old-skool, drop us an </em><a href=\"mailto:hello@colony.io\"><em>email</em></a><em>.</em><br><br></p>","content:encodedSnippet":"Laying the groundwork for an explosive 2023\n\nRead on to find insights from this quarter, leading up to Colony’s most impactful era yet\nCan't stop (won't stop) building \nA tumultuous industry landscape saw a wild ride for crypto this year. Despite the bear market blues and crazy news, Colony has continued development without skipping a beat.\nAfter all, this isn’t Colony’s first ride on the market merry-go-round. Since time immemorial (2014), we’ve kept our eyes on the prize throughout some historic crashes. The mission of supporting more equitable, transparent, and efficient organizations is as relevant today as it ever was, regardless of market conditions.\nCoin Machine: taking off soon\nCoin Machine—the Colony system for easy and fair token launches—is set to launch early next year. Once live, Coin Machine will address the all-too common challenges of price manipulation, volatility, and front-running, while simplifying the process for all involved. Unlike traditional liquidity bootstrapping pools, Coin Machine will not require projects to provide stablecoins as collateral, removing one of the key barriers to entry for permissionless token launches.\nInterested in running one of the first token sales on Coin Machine? Fill out this form and we’ll be in touch.\nWelcome to DAO Club\nThe Colony DAO Club concluded its maiden voyage in Q3, connecting DAO builders from all over the world with each other to share project ideas and learn the best practices of DAO building. The freshly-launched second cohort has brought on another wave of fascinating orgs, spanning a wide range of project goals and visions, yet united in the commitment to more equitable ways of working. Applications for Cohort 3 open in Q1 2023!\nWant to witness the colony-building journey in action? You can hear from a community member launching a colony from scratch and sharing lessons learned along the way in the first season of Builder’s Spotlight, featuring PictureBookDAO. The second season, featuring ELI5 DAO, is also one you don't want to miss!\nDAO Jones also launched in Q3, with several established projects joining the program to explore decentralizing and optimizing their governance. Moving into next year, the parameters around this program will be finessed based on feedback from the initial cohort, paving the way for the next generation of online organizations.\nNew video: Colony Key Features\nLooking for an overview of some of the most powerful Colony features? This five-minute video will get you started in the right direction: \n\nMetacolony blast-off\nOne primary objective of Q3 was to get the Metacolony off the ground. The Metacolony is the “Colony colony”—the DAO that supports the development and growth of the Colony protocol. This launch was achieved, and Metacolony contributors now use the dapp to create expenditures and decide on governance decisions.\nBuilding Colony with Colony—how cool is that?\nNew Colony App features and upgrades\nThis quarter will see the release of a totally new backend to the Colony App, providing major performance and usability improvements. The new architecture will also make building Colony much easier, laying the groundwork for a slew of new features that you can expect to roll out thick and fast over 2023. In addition, an improved UI/UX and onboarding experience will make it easier than ever to go from zero-to-DAO.\nThe new Simple Decisions feature was recently rolled out, making it easy for contributors to put forward “yes” or “no” proposals which don’t need to be executed automatically. That means you can use Simple Decisions to decide on choices such as:\n\nShould our colony’s mascot be a pharaoh ant?\nShould we let Jane run the Twitter account?\nShould we elect Jimmy as our ambassador to ETH Denver?\n\nIf you’ve used Motions on Colony before, the process of launching a Simple Decision will already be familiar to you. Simply navigate to the new Decisions tab on your colony, create a new Decision, and back it by staking native tokens, just as you would a Motion.\nAs new upgrades are deployed—such as the forthcoming Gnosis Safe Control feature—we’ll be providing regular updates to the community: in Discord, on Twitter, and streaming on Twitch. \nEnter the Knowledge Realm\nThe Colony user docs are being restructured to guide users through the full process of starting or joining a DAO on Colony. The Knowledge Realm, set to launch in Q4, is where you can learn everything from the fundamentals of DAO building to advanced Colony features. As you level up your DAO-fu, you can put your knowledge to the test and earn NFT completion badges. Gotta mint 'em all!\nMore Colony events!\nDid we see you at Devcon Bogotá? If not, you missed chess grandmasters, escape rooms, and some of the most innovative minds in organizational design at our booth. It’s always great to connect human faces with ENSs and we left as bullish as ever on the future of DAO building. We’ll see you at ETH Denver 2023!\n\nHappy building through the New Year!\n— Will and the Metacolony team\n***\nColony makes it easy for people all over the world to build organizations together, online.\nJoin the conversation on Discord, follow us on Twitter, sign up for (occasional and awesome) email updates, or if you’re feeling old-skool, drop us an email.","dc:creator":"Will Nicoll","content":"<h2 id=\"laying-the-groundwork-for-an-explosive-2023\"><strong>Laying the groundwork for an explosive 2023</strong></h2><p><em>Read on to find insights from this quarter, leading up to Colony&#x2019;s most impactful era yet</em></p><h3 id=\"cant-stop-wont-stop-building\"><strong>Can&apos;t stop (won&apos;t stop) building </strong></h3><p>A tumultuous industry landscape saw a wild ride for crypto this year. Despite the bear market</p>","contentSnippet":"Laying the groundwork for an explosive 2023\nRead on to find insights from this quarter, leading up to Colony’s most impactful era yet\nCan't stop (won't stop) building \nA tumultuous industry landscape saw a wild ride for crypto this year. Despite the bear market","guid":"6391107ec849d62212f7d15d","isoDate":"2022-12-13T23:11:49.000Z","from":"https://blog.colony.io/rss/","hashId":"5347368777dc44afd55b0b86ea48073f"},{"creator":"Cointelegraph By  Judith BannermanQuist ","title":"Algorand to support bank and insurance guarantees platform in Italy","link":"https://cointelegraph.com/news/algorand-to-support-bank-and-insurance-guarantees-platform-in-italy","pubDate":"Tue, 13 Dec 2022 23:13:04 +0000","enclosure":{"url":"https://images.cointelegraph.com/images/840_aHR0cHM6Ly9zMy5jb2ludGVsZWdyYXBoLmNvbS91cGxvYWRzLzIwMjItMTIvNmJmMjcxNjEtNDMwYy00ZGYxLWI0MzgtYTlhMjljYjdlMWU2LkpQRw==.jpg","length":"840","type":"image/jpg"},"dc:creator":"Cointelegraph By  Judith BannermanQuist ","content":"\n                <p style=\"float:right; margin:0 0 10px 15px; width:240px;\"><img src=\"https://images.cointelegraph.com/images/840_aHR0cHM6Ly9zMy5jb2ludGVsZWdyYXBoLmNvbS91cGxvYWRzLzIwMjItMTIvNmJmMjcxNjEtNDMwYy00ZGYxLWI0MzgtYTlhMjljYjdlMWU2LkpQRw==.jpg\"></p><p>This is the first time an EU Member State will use blockchain technology for bank and insurance guarantees, according to Algorand.</p>\n            ","contentSnippet":"This is the first time an EU Member State will use blockchain technology for bank and insurance guarantees, according to Algorand.","guid":"https://cointelegraph.com/news/algorand-to-support-bank-and-insurance-guarantees-platform-in-italy","categories":["Investments","Government","Technology","Digital Revolution","DLT"],"isoDate":"2022-12-13T23:13:04.000Z","from":"https://cointelegraph.com/rss","hashId":"160b5dd52c2c6febf2a3a3db27121815"}]