[{"title":"【导演】12.19日行情分析，黎明前的黑暗，低波动的震荡，基本没有太多的参与欲望，耐心等待。","link":"https://mirror.xyz/0x76276193e5e0c1aB752470A21BD9a93aCca23243/Sxc1OOHykdKxvDQiewtA2T71nx-mEGTjoN454rgoFAw","pubDate":"Sun, 18 Dec 2022 23:31:23 GMT","content:encoded":"<p>​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​<strong>导演第932篇原创每日行情分析</strong> \n <strong>2022.12.19</strong></p>\n<p><strong>​一、市场情绪：</strong> </p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/tWq7zP7s3XgZAYIXLITPD.png?height=378&width=807\" alt=\"\"></p>\n<p><strong>二、图表结构：</strong></p>\n<p><strong>​1、大饼</strong></p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/4Y8X4aV5L8IPjeVCsYmto.png?height=857&width=1654\" alt=\"\"></p>\n<p>大饼1H的结构：</p>\n<p>​       大饼第二笔还是在进行中，还是在MCAD回抽0轴的这个过程，这笔上升结束之后就会有第三笔1H的下跌。</p>\n<p>​       第三笔1H的下跌的入场的关键就是在于是否会形成一个1H的底背离，如果形成一个1H的底背离的话那么可能最少有一笔1H的反弹。后面就看是否是继续运行1H的中枢。</p>\n<p> </p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/Lgt6WbKBR0l5h91Z9-L5J.png?height=634&width=1977\" alt=\"\"></p>\n<p>大饼15F的结构：</p>\n<p>​       目前大饼15F的级别还是在这个中枢范围之内震荡，走势浮动很小，基本没有任何的参与的欲望，还是耐心等待，低波动走势只能去做小幅度的网格量化交易会比较好，不然的话正常操作这种的基本没有参与的欲望。</p>\n<p>​         属于躺平阶段。</p>\n<p> </p>\n<p><strong>2、姨太：</strong></p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/-jAI6GvanAItbpZEp2tVQ.png?height=697&width=1245\" alt=\"\"></p>\n<p>姨太的1H的结构：</p>\n<p>​      姨太的走势结构跟大饼一样，这笔还是在第二笔的1H的上的运行阶段，这笔走完还是会有第三笔1H的下跌是要走的。</p>\n<p>​       姨太现阶段也是跟随大饼走势为主，看今天晚上的美股如何走了。估计大概率也会是跟随的走势。</p>\n<p> </p>\n<p> ​​<strong>​3、交易策略</strong></p>\n<p><strong>行情变化太快，很多不能及时提醒，不能够在变化的情况下把行情说清楚，欢迎关注我的推特</strong> 导演<a href=\"https://weibo.com/n/DirectorBtc\">@DirectorBtc</a> ​ <strong>，会更及时更新更多的我的观点。|</strong> </p>\n<p> <strong>另外，微博群已经开放，会更多的跟大家在这里聊天聊行情。</strong> \n   </p>\n<p>Ps: 粉丝福利活动进行中： \n <strong>每月微博活跃粉丝榜第一名 和铁粉中抽奖1名，将获得现货群免费资格1个月。</strong> \n <strong>让我看到大家互动的点赞评论～</strong> </p>\n<p>  </p>\n<p><strong>END</strong></p>\n<p><strong>温馨提示</strong></p>\n<h2 id=\"投资有风险，闲钱投资，警记永不满仓，不贷款，我们只提供信息，不构成买卖建议，买卖自由，风险自担\">投资有风险，闲钱投资，警记永不满仓，不贷款，我们只提供信息，不构成买卖建议，买卖自由，风险自担</h2>\n<p><em>If you find submirror valuable, please consider donate to wong2.eth to help cover server cost.</em></p>\n","content:encodedSnippet":"​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​导演第932篇原创每日行情分析 \n 2022.12.19\n​一、市场情绪： \n\n二、图表结构：\n​1、大饼\n\n大饼1H的结构：\n​       大饼第二笔还是在进行中，还是在MCAD回抽0轴的这个过程，这笔上升结束之后就会有第三笔1H的下跌。\n​       第三笔1H的下跌的入场的关键就是在于是否会形成一个1H的底背离，如果形成一个1H的底背离的话那么可能最少有一笔1H的反弹。后面就看是否是继续运行1H的中枢。\n \n\n大饼15F的结构：\n​       目前大饼15F的级别还是在这个中枢范围之内震荡，走势浮动很小，基本没有任何的参与的欲望，还是耐心等待，低波动走势只能去做小幅度的网格量化交易会比较好，不然的话正常操作这种的基本没有参与的欲望。\n​         属于躺平阶段。\n \n2、姨太：\n\n姨太的1H的结构：\n​      姨太的走势结构跟大饼一样，这笔还是在第二笔的1H的上的运行阶段，这笔走完还是会有第三笔1H的下跌是要走的。\n​       姨太现阶段也是跟随大饼走势为主，看今天晚上的美股如何走了。估计大概率也会是跟随的走势。\n \n ​​​3、交易策略\n行情变化太快，很多不能及时提醒，不能够在变化的情况下把行情说清楚，欢迎关注我的推特 导演@DirectorBtc ​ ，会更及时更新更多的我的观点。| \n 另外，微博群已经开放，会更多的跟大家在这里聊天聊行情。 \n   \nPs: 粉丝福利活动进行中： \n 每月微博活跃粉丝榜第一名 和铁粉中抽奖1名，将获得现货群免费资格1个月。 \n 让我看到大家互动的点赞评论～ \n  \nEND\n温馨提示\n投资有风险，闲钱投资，警记永不满仓，不贷款，我们只提供信息，不构成买卖建议，买卖自由，风险自担\nIf you find submirror valuable, please consider donate to wong2.eth to help cover server cost.","guid":"https://mirror.xyz/0x76276193e5e0c1aB752470A21BD9a93aCca23243/Sxc1OOHykdKxvDQiewtA2T71nx-mEGTjoN454rgoFAw","isoDate":"2022-12-18T23:31:23.000Z","from":"https://submirror.xyz/0x76276193e5e0c1aB752470A21BD9a93aCca23243","hashId":"3a4c7abc1692886ed834f937cbb074bc"},{"title":"ERC-3525 开发入门指南","link":"https://mirror.xyz/0x07599B7E947A4F6240F826F41768F76149F490D5/TJUH3ymtN7N1cOdvr__GfHRblZiU9YXG7N7epilMuXA","pubDate":"Mon, 19 Dec 2022 03:29:19 GMT","content:encoded":"<p><strong>作者：Ethan Tsai, Alvis Du, Mike Meng</strong></p>\n<p>ERC-3525 标准是以太坊社区批准通过的半匀质化通证（Semifungible Token, 亦称为半同质化通证，简称 SFT）标准，由 Solv Protocol 提出。</p>\n<p>ERC-3525 标准定义了一类新型的数字资产，具有以下突出优势：</p>\n<ul>\n<li><p>与 ERC-721 标准兼容，具有唯一 ID 和可视化外观，可复用现有的大量 NFT 基础设施；</p>\n</li>\n<li><p>可拆分、可合并、可计算；</p>\n</li>\n<li><p>具有账户特征，可以容纳其他数字资产，如 ERC-20 通证、NFT 等，并支持在若干 SFT 之间的转账操作；</p>\n</li>\n<li><p>可以对外观、功能、资产存储、锁定、转账等各方面进行编程，并且为元数据的结构化进行了特别的优化，以支持动态变化、复杂金融逻辑等高级功能的开发。</p>\n</li>\n</ul>\n<p>由于具有以上的优势，ERC-3525 特别适合用来描述金融工具、数字票证、数字合同等高级数字资产，同时也正在被试用于 Web3 虚拟物品、动态 NFT 艺术品、虚拟装备、真实世界资产（RWA）通证化等领域，得到了非常广泛的关注。</p>\n<p>Solv Protocol 已经将 ERC-3525 参考实现开源，为有兴趣了解和快速尝试这一全新通证技术的开发者提供有力的支持。这一参考实现同时以开源代码库和 NPM 模块包的形式提供，开发者可以以此为起点，在这个参考实现代码的基础之上通过改写和扩展，开发自己的 ERC-3525 应用。</p>\n<p>本文档引导读者安装、配置和部署 ERC-3525 官方参考实现，并引导读者在此基础上开发一个简单的 ERC-3525 通证合约。这个合约没有任何特别的功能，但开发、测试和部署这个合约的过程却是通用的。开发者如果了解和熟练掌握了这个开发过程，就能够在此基础上开发复杂的、具有业务功能的 ERC-3525 通证合约了。</p>\n<p>本文档内容基于 ERC-3525 参考实现  1.1.0 版（2022 年 12 月发布）。</p>\n<h2 id=\"预备知识和技能\">预备知识和技能</h2>\n<p>ERC-3525 参考实现是基于 Hardhat 框架、以 Solidity 语言为主开发的。我们推荐读者在学习 ERC-3525 开发之前，首先掌握以下知识和技能：</p>\n<ul>\n<li><p>Solidity 语言和 EVM 智能合约开发的基本知识</p>\n</li>\n<li><p>Hardhat 智能合约开发框架的基本实用技能</p>\n</li>\n</ul>\n<p>当然，要使用 Hardhat 框架，也必须对于 JavaScript 或者 TypeScript 语言有基本的了解。本文档使用 TypeScript 进行介绍，但对于有经验的开发者来说，基于本文档介绍的内容，很容易可以用 JavaScript 完成相同的工作。</p>\n<p>我们推荐对于 Hardhat 不熟悉的读者首先通过 Hardhat 的官方文档 (<a href=\"https://hardhat.org/docs%EF%BC%89\">https://hardhat.org/docs</a>) 来熟悉这一流行的智能合约开发框架。</p>\n<h2 id=\"快速入门\">快速入门</h2>\n<h3 id=\"1-开发环境\">1. 开发环境</h3>\n<p>建议读者在 macOS 或 Linux 的命令行环境下进行 ERC-3525 开发。如果读者使用 Windows，我们强烈建议读者首先安装 Windows Subsystem for Linux （WSL），然后在 WSL 环境中进行如下操作。</p>\n<p>读者可以选择自己喜欢的任何一种代码编辑工具来编写代码，但我们推荐使用 Visual Studio Code，因为 Hardhat 的开发者 Nomic Foundation 为 Visual Studio Code 开发了一款 Solidity 插件，可以帮助提升 Solidity 和 Hardhat 开发效率。</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/LDw9DVTgAjflMWXiDlpH2.png?height=819&width=1080\" alt=\"\"></p>\n<p>此外，Hardhat 开发中大量使用 JavaScript 或者 TypeScript 编写测试用例，Visual Studio Code 本身对于 JavaScript 和 TypeScript 就提供了良好的支持。</p>\n<h3 id=\"2-创建-hardhat-typescript-项目\">2. 创建 Hardhat TypeScript 项目</h3>\n<p>首先在命令行环境下通过如下命令准备项目目录。本示例项目名称为 erc3525-getting-started。</p>\n<pre><code>mkdir erc3525-getting-startedcd erc3525-getting-startednpm init -ynpm install --save-dev hardhat\n</code></pre>\n<p>在命令行输入以下命令（以MacOSX为例）</p>\n<pre><code>npx hardhat\n</code></pre>\n<p>将看到以下界面</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/Kem540Ekz5to1fpVzauzK.png?height=654&width=1080\" alt=\"\"></p>\n<p>选择“Create a TypeScript project”后，Hardhat 会提示若干问题，读者直接通过回车选择缺省选项即可。</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/KCyngqgtQxL-gGMqNEH2t.png?height=154&width=1080\" alt=\"\"></p>\n<p>全部选择完毕后，系统自动执行一系列安装和准备工作。结束后，使用 Visual Studio Code打开目录，你可以看到如下项目结构：</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/gLifsGyNos05K85kneE8P.png?height=926&width=890\" alt=\"\"></p>\n<h3 id=\"3-引入和安装-erc-3525-参考实现模块包\">3. 引入和安装 ERC-3525 参考实现模块包</h3>\n<p>下面，通过 npm 命令在当前目录安装 ERC-3525 参考实现</p>\n<pre><code>npm install @solvprotocol/erc-3525@latest\n</code></pre>\n<p>由于我们需要用到 OpenZeppelin 的 String 库，因此需要使用以下命令安装 OpenZepplin：</p>\n<pre><code>npm install @openzeppelin/contracts@latest\n</code></pre>\n<p>安装完毕之后，可打开 package.json 文件，应该能够看到 @solvprotocol/erc-3525 相关信息，表明已经成功安装。</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/yWRclJX_72Qak6lquvJNF.png?height=1295&width=1080\" alt=\"\"></p>\n<h3 id=\"4-编写智能合约\">4. 编写智能合约</h3>\n<p>为了简单起见，我们规避复杂的业务逻辑，以一个最简单的应用案例来讲解 ERC-3525 的代码开发过程。这个案例中，我们创建一个最简单的 ERC-3525 通证，它只具备 ERC-3525 的基本功能，没有额外的功能。不过我们将为它创建一个“外表”，使它可以用 SVG 动态图像来显示内部的状态。</p>\n<p>在 Hardhat 项目创建过程中，自动添加了一个实例代码文件 Lock.sol。本范例中不需要这文件，因此首先请删除 contracts/Lock.sol，并在 contracts 目录中新建文件 ERC3525GettingStarted.sol，代码如下：</p>\n<pre><code>// SPDX-License-Identifier: MITpragma solidity ^0.8.9;\n\nimport &quot;@openzeppelin/contracts/utils/Strings.sol&quot;;\nimport &quot;@solvprotocol/erc-3525/ERC3525.sol&quot;;\n\ncontract ERC3525GettingStarted is ERC3525 {    \n    using Strings for uint256;   \n    address public owner;\n    \nconstructor(address owner_)\n    ERC3525(&quot;ERC3525GettingStarted&quot;, &quot;ERC3525GS&quot;, 18) {\n        owner = owner_;\n    }\n\n   function mint(address to_, uint256 slot_, uint256 amount_) external {\n   require(msg.sender == owner, \n     &quot;ERC3525GettingStarted: only owner can mint&quot;);\n   _mint(to_, slot_, amount_);\n    }\n}\n</code></pre>\n<p>在以上代码中，我们创建了一个新的合约 ERC3525GettingStarted。这个合约从 ERC3525 参考实现合约中派生，其构造函数直接调用 ERC3525 合约的构造函数，传入合约的全名、符号和小数位数，并为 owner 赋值。我们并且添加了一个 mint() 函数，确保只有 owner 能够铸造这个 ERC-3525 通证。具体的铸造过程，是通过调用 ERC3525 合约当中的 _mint() 实现的，这样我们就复用了 ERC3525 合约的参考实现，得到了一个最简单的 ERC-3525 通证合约。</p>\n<p>有了 ERC-3525 的参考实现，很多基本功能都可以直接调用相应的函数实现，开发者可以只聚焦于业务逻辑和创新功能，这样就大大简化了相关的开发。</p>\n<p>代码编写完毕之后，在命令行执行以下命令进行编译：</p>\n<pre><code>npx hardhat compile\n</code></pre>\n<p>编译成功结果如下：</p>\n<h3 id=\"5-编写测试用例\">5. 编写测试用例</h3>\n<p>使用 Hardhat 框架开发智能合约的主要好处之一是可以进行自动化测试。下面我们介绍如何使用 Hardhat 的测试框架对 ERC3525GettingStarted 合约进行自动化测试。</p>\n<p>测试代码集中在 test 目录下。同样，我们首先删除 test/Lock.ts，然后在 test 目录下新建ERC3525GettingStarted.ts，代码如下</p>\n<pre><code>import { loadFixture } from &quot;@nomicfoundation/hardhat-network-helpers&quot;;\nimport { expect } from &quot;chai&quot;;\nimport { ethers } from &quot;hardhat&quot;;\n\ndescribe(&quot;ERC3525GettingStarted&quot;, function () {\n  // We define a fixture to reuse the same setup in every test.\n  // We use loadFixture to run this setup once, snapshot that state,\n  // and reset Hardhat Network to that snapshot in every test.\n  async function deployGettingStartedFixture() {\n\n    // Contracts are deployed using the first signer/account by default\n    const [owner, otherAccount] = await ethers.getSigners();\n\n    const GettingStarted = await ethers.getContractFactory(\n      &quot;ERC3525GettingStarted&quot;);\n    const gettingStarted = await GettingStarted.deploy(owner.address);\n\n    return { gettingStarted, owner, otherAccount };\n  }\n\n  describe(&quot;Deployment&quot;, function () {\n    it(&quot;Should set the right owner&quot;, async function () {\n      const { gettingStarted, owner } = await loadFixture(\n        deployGettingStartedFixture);\n      expect(await gettingStarted.owner()).to.equal(owner.address);\n    });\n  });\n\n  describe(&quot;Mintable&quot;, function () {\n    describe(&quot;Validations&quot;, function () {\n      it(&quot;Should revert with not owner&quot;, async function () {\n        const { gettingStarted, owner, otherAccount } = \n          await loadFixture(deployGettingStartedFixture);\n        const slot = 3525\n        const value = ethers.utils.parseEther(&quot;9.5&quot;);\n        await expect(\n          gettingStarted.connect(otherAccount)\n                        .mint(owner.address, slot, value))\n                        .to.be.revertedWith(\n          &quot;ERC3525GettingStarted: only owner can mint&quot;\n        );\n      });\n    });\n\n    describe(&quot;Mint&quot;, function () {\n      it(&quot;Should mint to other account&quot;, async function () {\n        const { gettingStarted, owner, otherAccount } = \n          await loadFixture(deployGettingStartedFixture);\n        const slot = 3525\n        const value = await ethers.utils.parseEther(&quot;9.5&quot;);\n\n        await gettingStarted.mint(otherAccount.address, slot, value);\n        expect(await gettingStarted[&quot;balanceOf(uint256)&quot;](1)).to.eq(value);\n        expect(await gettingStarted.slotOf(1)).to.eq(slot);\n        expect(await gettingStarted.ownerOf(1))\n                                   .to.eq(otherAccount.address);\n      });\n    });\n  });\n});\n</code></pre>\n<p>在上面的测试代码中，我们编写了一个测试夹具和三个测试用例，分别测试了 owner 的正确性、mint 的操作权限和 mint 操作的功能。这些用例遵循了 Hardhat 中编写智能合约测试代码的标准方式，读者可通过 Hardhat 官方文档学习，此处不再赘述。</p>\n<h3 id=\"6-运行测试\">6. 运行测试</h3>\n<p>下面实际运行测试。方法是在项目主目录执行如下命令：</p>\n<pre><code>npx hardhat test\n</code></pre>\n<p>执行结果如下：</p>\n<p>这表明我们的智能合约成功通过了所有三个测试用例。</p>\n<h3 id=\"7-添加-svg-图像\">7. 添加 SVG 图像</h3>\n<p>ERC-3525 最初的设计目标是表达复杂的金融资产，特别是数字票据。既然是数字资产，就必须支持可拆分、可合并，能够像 ERC-20 通证一样进行各种数学计算。另一方面，ERC-3525 超越 ERC-20 的重要一点，就是具有可视化的外在形象，唯有如此才能够向用户传达丰富的信息，使复杂数字资产的复杂性能够被表达出来。这是 ERC-3525 选择兼容 ERC-721 的主要动机。因此，ERC-3525 支持元数据，并且通过从 IERC721Metadata 接口继承而来的 tokenURI 函数返回资源的 URL，或者直接返回图片的内容数据。在 NFT 当中，普遍的做法是将图片放在链外的存储上，然后让 tokenURI 函数返回其 URL。这种设计其实有一个非常大的风险，就是在 NFT 出售以后，控制存储的人可以更换 URL 上的图片，这样买家手里的 NFT 实际上就被篡改了。为了解决这个问题，大多数 NFT 采用了 IPFS 存储，通过哈希值来确保图片资源的唯一性。即使如此，也难以防范一些破坏，比如将 IPFS 上存储的图片资源删除。</p>\n<p>ERC-3525 的设计初衷是为了表达金融资产，金融资产的信息非常敏感和重要，决不能被更换和删除。因此，Solv 建议直接将展现层用 SVG 表达，并直接放在链上。具体方法就是让 tokenURI 函数直接返回 SVG 代码片段，而不是指向图像资源的链接。</p>\n<p>在 ERC3525GettingStarted 合约中加入以下函数：</p>\n<pre><code>     function tokenURI(uint256 tokenId_) public view virtual override returns (string memory) {\n        return string(\n            abi.encodePacked(\n                &#39;&lt;svg width=&quot;600&quot; height=&quot;600&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&#39;,\n                &#39; &lt;g&gt; &lt;title&gt;Layer 1&lt;/title&gt;&#39;,\n                &#39;  &lt;rect id=&quot;svg_1&quot; height=&quot;600&quot; width=&quot;600&quot; y=&quot;0&quot; x=&quot;0&quot; stroke=&quot;#000&quot; fill=&quot;#000000&quot;/&gt;&#39;,\n                &#39;  &lt;text xml:space=&quot;preserve&quot; text-anchor=&quot;start&quot; font-family=&quot;Noto Sans JP&quot; font-size=&quot;24&quot; id=&quot;svg_2&quot; y=&quot;340&quot; x=&quot;200&quot; stroke-width=&quot;0&quot; stroke=&quot;#000&quot; fill=&quot;#ffffff&quot;&gt;TokenId: &#39;,\n                tokenId_.toString(),\n                &#39;&lt;/text&gt;&#39;,\n                &#39;  &lt;text xml:space=&quot;preserve&quot; text-anchor=&quot;start&quot; font-family=&quot;Noto Sans JP&quot; font-size=&quot;24&quot; id=&quot;svg_3&quot; y=&quot;410&quot; x=&quot;200&quot; stroke-width=&quot;0&quot; stroke=&quot;#000&quot; fill=&quot;#ffffff&quot;&gt;Balance: &#39;,\n                balanceOf(tokenId_).toString(),\n                &#39;&lt;/text&gt;&#39;,\n                &#39;  &lt;text xml:space=&quot;preserve&quot; text-anchor=&quot;start&quot; font-family=&quot;Noto Sans JP&quot; font-size=&quot;24&quot; id=&quot;svg_3&quot; y=&quot;270&quot; x=&quot;200&quot; stroke-width=&quot;0&quot; stroke=&quot;#000&quot; fill=&quot;#ffffff&quot;&gt;Slot: &#39;,\n                slotOf(tokenId_).toString(),\n                &#39;&lt;/text&gt;&#39;,\n                &#39;  &lt;text xml:space=&quot;preserve&quot; text-anchor=&quot;start&quot; font-family=&quot;Noto Sans JP&quot; font-size=&quot;24&quot; id=&quot;svg_4&quot; y=&quot;160&quot; x=&quot;150&quot; stroke-width=&quot;0&quot; stroke=&quot;#000&quot; fill=&quot;#ffffff&quot;&gt;ERC3525 GETTING STARTED&lt;/text&gt;&#39;,\n                &#39; &lt;/g&gt; &lt;/svg&gt;&#39;\n            )\n        );\n     }\n</code></pre>\n<p>这将生成一张黑色背景的 SVG 图像，显示如下：</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/_EweaIGvGLHqW4RRS0lO3.png?height=754&width=926\" alt=\"\"></p>\n<p>注意，其中 Slot、TokenId 和 Balance 的数值都是直接从 ERC-3525 通证的当前状态中提取的。</p>\n<h3 id=\"8-部署到本地节点\">8. 部署到本地节点</h3>\n<p>Hardhat 框架自带一个以太坊本地节点的实现，特别针对开发过程中的需求做了不少优化。我们推荐在开发调试过程中将合约部署到这个节点上。</p>\n<p>在deploy目录修改deploy.ts如以下内容：</p>\n<pre><code>import { ethers } from &quot;hardhat&quot;;\n\nasync function main() {\n  const GettingStarted = await ethers.getContractFactory(&quot;ERC3525GettingStarted&quot;);\n  const gettingStarted = await GettingStarted.deploy();\n  gettingStarted.deployed();\n\n  console.log(`GettingStarted deployed to ${gettingStarted.address}`);\n}\n\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) =&gt; {\n  console.error(error);\n  process.exitCode = 1;\n});\n</code></pre>\n<p><strong>打开一个新的 Terminal，运行hardhat 内建节点</strong> </p>\n<pre><code>npx hardhat node\n</code></pre>\n<p>运行结果如下（为节约篇幅，省略其它账号）：</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/Yv40D9kEWz7XDbN2XoWtD.png?height=528&width=1080\" alt=\"\"></p>\n<p>在项目主目录执行以下命令：</p>\n<pre><code>npx hardhat run --network localhost scripts/deploy.ts\n</code></pre>\n<p>执行成功后将看到如下结果。注意红框的地址部分，后面的交互会用到</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/nMZj_bVgRdpRxrJBGu1zH.png?height=55&width=1080\" alt=\"\"></p>\n<p>智能合约部署之后，可以通过 hardhat console 命令与之进行交互，这是 Hardhat 节点的一个重要优势，能够大大简化测试和调试阶段的工作。输入以下命令：</p>\n<pre><code>npx hardhat console --network localhost\n</code></pre>\n<p>交互指令及结果如下：</p>\n<pre><code>~/Sources/erc3525-getting-started$ npx hardhat console --network localhost\n\nWelcome to Node.js v16.18.1.\nType &quot;.help&quot; for more information.\n&gt; const GettingStarted=await ethers.getContractFactory(&quot;ERC3525GettingStarted&quot;)\nundefined\n&gt; const gettingStarted=await GettingStarted.attach(&#39;&lt;此处替换成你部署的地址，也就是上一图的红框处的地址&gt;&#39;)\nundefined\n&gt; const [owner, otherAccount] = await ethers.getSigners()\nundefined\n&gt; await gettingStarted.mint(otherAccount.address, 3525, 10000)\n{\n  hash: &#39;0x94d428b32da7e66e8f0e2d48a37ddb9072dca54013130d95779495e1e443df2c&#39;,\n...\n}\n</code></pre>\n<p>读者可以自行输入一些 TypeScript 代码来尝试与智能合约进行交互。</p>\n<h3 id=\"9-在-sepolia-测试网络上部署\">9. 在 Sepolia 测试网络上部署</h3>\n<p>在开发环境下测试和调试完毕之后，就需要部署到测试链上了。测试链提供了基本等同于主链的运行环境，但在上面进行测试和调试无需缴纳高昂的 gas 费用。另一方面，有些智能合约的功能必须在测试链上才能运行，比如与 Oracle 的交互，在开发用的虚拟节点上是不支持的。我们这个案例非常简单，用不到 Oracle，但是作为一个原则，一个智能合约在上主链之前，一定是要在测试链上运行测试无误才可以。</p>\n<p>以太坊已经于 2022 年 9 月 15 日升级到 POS，因此之前几个流行的测试链，如 Ropsten, Rinkeby, Kovan 等已经被废弃。现在主要的两个测试链是 Goerli 和 Sepolia。其中 Goerli 历史较长，完全开放，比较适合于测试复杂的智能合约，而 Sepolia 较新，由一组确定的验证者节点组成，不能随意加入，是当前进行 DApp 开发测试的首选测试链。在这个例子中，我们选择 Sepolia 测试链。</p>\n<p>为了部署在 Sepolia 测试链，读者需要通过 <a href=\"https://www.infura.io/\">https://www.infura.io/</a> 申请 infura API KEY。我们假定读者已经完成这项工作，下面直接介绍部署的过程。</p>\n<p>修改 hardhat.config.ts 如下：</p>\n<pre><code>import { HardhatUserConfig } from &quot;hardhat/config&quot;;\nimport &quot;@nomicfoundation/hardhat-toolbox&quot;;\n\nconst config: HardhatUserConfig = {\n  solidity: &quot;0.8.17&quot;,\n  networks: {\n    sepolia: {\n      url: process.env.SEPOLIA_URL || `https://sepolia.infura.io/v3/${process.env.INFURA_KEY}`,\n      accounts:\n        process.env.PRIVATE_KEY !== undefined ? [process.env.PRIVATE_KEY] : [],\n    },\n  }\n};\n\nexport default config;\n</code></pre>\n<p>然后在 Terminal 命令行环境中执行以下命令，设置  infura api key 和 private key：</p>\n<pre><code>export INFURA_KEY=&lt;YOUR_INFURA_KEY&gt;; export PRIVATE_KEY=&lt;YOUR_PRIVATE_KEY&gt;;\n</code></pre>\n<p>请注意，将<YOUR_INFURA_KEY> 替换成你申请的 infura API KEY，将 <YOUR_PRIVATE_KEY> 替换成私钥。强烈建议测试网和主网的私钥隔离，不要使用已有的主网私钥。</p>\n<p>在 Sepolia 测试网中进行测试需要准备一些测试币，即 Sepolia FaucETH。读者可以到 <a href=\"https://faucet.sepolia.dev/\">https://faucet.sepolia.dev/</a> 去申领一些 FaucETH 以供测试之用。</p>\n<p>这些准备工作做好之后，就可以执行脚本进行部署了：</p>\n<pre><code>npx hardhat run --network sepolia scripts/deploy.ts\n</code></pre>\n<p>执行成功后，结果如下。请注意红框中的地址，我们将在下一步中使用到。</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/XsuVKWEObHPnetFcWVo7i.png?height=67&width=1080\" alt=\"\"></p>\n<h3 id=\"10-铸造-erc3525gettingstarted-通证\">10. 铸造 ERC3525GettingStarted 通证</h3>\n<p>下面我们来铸造一个 ERC3525GettingStarted 通证。我们采用的方法是使用 TypeScript 调用合约功能进行通证铸造，这与在 Web3 DApp 开发中的模式是一致的。</p>\n<p>首先在 scripts 目录下新建文件 mint.ts ，代码如下：</p>\n<pre><code>import { ethers } from &quot;hardhat&quot;;\n\nasync function main() {\n  const [owner] = await ethers.getSigners();\n  const GettingStarted = await ethers.getContractFactory(&quot;ERC3525GettingStarted&quot;);\n  const gettingStarted = await GettingStarted.attach(&#39;&lt;部署合约地址&gt;&#39;);\n  const tx = await gettingStarted.mint(owner.address, 3525, 20220905);\n  await tx.wait();\n  const uri = await gettingStarted.tokenURI(1);\n  console.log(uri);\n}\n\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) =&gt; {\n  console.error(error);\n  process.exitCode = 1;\n});\n</code></pre>\n<p>请注意，将代码中 &lt;部署合约地址&gt; 替换成上一节红框中的地址。</p>\n<p>最后，执行以下命令：</p>\n<pre><code>npx hardhat run --network sepolia scripts/mint.ts\n</code></pre>\n<p>这样，我们就成功的铸造了一张 ERC3525GettingStarted 通证。</p>\n<p>怎么确认这一点呢？可以到 Sepolia Etherscan (<a href=\"https://sepolia.etherscan.io/\">https://sepolia.etherscan.io/</a>) 上去查看铸造出来的 token。在浏览器地址栏里输入：</p>\n<p><a href=\"https://sepolia.etherscan.io/address/\">https://sepolia.etherscan.io/address/</a>&lt;部署合约地址&gt;</p>\n<p>请注意，将&lt;部署合约地址&gt; 替换成上一节红框中的地址。</p>\n<p>恭喜你！如果一切顺利，你就成功的开发和部署第一个 ERC-3525 通证了，可以对它进行各种新的操作了，比如拆分、合并、在两个通证之间转账，等等，赶快尝试一下吧！</p>\n<p>本文完整的示例代码参见 GitHub （<a href=\"https://github.com/solv-finance/erc3525-getting-started\">https://github.com/solv-finance/erc3525-getting-started</a>）。</p>\n<h2 id=\"进阶学习\">进阶学习</h2>\n<p>本教程对于 ERC-3525 半匀质化通证（SFT）应用开发的过程进行了简明扼要的阐述。读者可以由此出发，开发具有丰富功能和高级外观的 SFT。当然，如果想要深入学习 ERC-3525 的知识和开发技术，这只是一个起点，我们推荐您从以下几个方面入手深入学习：</p>\n<ul>\n<li><p>阅读 ERC-3525 白皮书（<a href=\"https://whitepaper.sftlabs.io/SFT%20Whitepaper.pdf\">https://whitepaper.sftlabs.io</a>/SFT%20Whitepaper.pdf）</p>\n</li>\n<li><p>研究 ERC-3525 参考实现 （<a href=\"https://github.com/solv-finance/erc-3525\">https://github.com/solv-finance/erc-3525</a>）</p>\n</li>\n<li><p>研究 SFTLabs 官方提供的 Showroom 案例 （<a href=\"https://showroom.sftlabs.io/showroom/basic\">https://showroom.sftlabs.io/showroom/</a>）</p>\n</li>\n<li><p>研究 ERC-3525 技术专家开发的以太币现金钞案例 Crypto Notes  (<a href=\"https://cryptonotes.fun/\">https://cryptonotes.fun/</a>)</p>\n</li>\n</ul>\n<p>**\n**我们也将继续发表一系列文章和教程来帮助开发者掌握 ERC-3525 技术。</p>\n<p>**</p>\n<h2 id=\"\">**</h2>\n<p><em>If you find submirror valuable, please consider donate to wong2.eth to help cover server cost.</em></p>\n","content:encodedSnippet":"作者：Ethan Tsai, Alvis Du, Mike Meng\nERC-3525 标准是以太坊社区批准通过的半匀质化通证（Semifungible Token, 亦称为半同质化通证，简称 SFT）标准，由 Solv Protocol 提出。\nERC-3525 标准定义了一类新型的数字资产，具有以下突出优势：\n与 ERC-721 标准兼容，具有唯一 ID 和可视化外观，可复用现有的大量 NFT 基础设施；\n可拆分、可合并、可计算；\n具有账户特征，可以容纳其他数字资产，如 ERC-20 通证、NFT 等，并支持在若干 SFT 之间的转账操作；\n可以对外观、功能、资产存储、锁定、转账等各方面进行编程，并且为元数据的结构化进行了特别的优化，以支持动态变化、复杂金融逻辑等高级功能的开发。\n由于具有以上的优势，ERC-3525 特别适合用来描述金融工具、数字票证、数字合同等高级数字资产，同时也正在被试用于 Web3 虚拟物品、动态 NFT 艺术品、虚拟装备、真实世界资产（RWA）通证化等领域，得到了非常广泛的关注。\nSolv Protocol 已经将 ERC-3525 参考实现开源，为有兴趣了解和快速尝试这一全新通证技术的开发者提供有力的支持。这一参考实现同时以开源代码库和 NPM 模块包的形式提供，开发者可以以此为起点，在这个参考实现代码的基础之上通过改写和扩展，开发自己的 ERC-3525 应用。\n本文档引导读者安装、配置和部署 ERC-3525 官方参考实现，并引导读者在此基础上开发一个简单的 ERC-3525 通证合约。这个合约没有任何特别的功能，但开发、测试和部署这个合约的过程却是通用的。开发者如果了解和熟练掌握了这个开发过程，就能够在此基础上开发复杂的、具有业务功能的 ERC-3525 通证合约了。\n本文档内容基于 ERC-3525 参考实现  1.1.0 版（2022 年 12 月发布）。\n预备知识和技能\nERC-3525 参考实现是基于 Hardhat 框架、以 Solidity 语言为主开发的。我们推荐读者在学习 ERC-3525 开发之前，首先掌握以下知识和技能：\nSolidity 语言和 EVM 智能合约开发的基本知识\nHardhat 智能合约开发框架的基本实用技能\n当然，要使用 Hardhat 框架，也必须对于 JavaScript 或者 TypeScript 语言有基本的了解。本文档使用 TypeScript 进行介绍，但对于有经验的开发者来说，基于本文档介绍的内容，很容易可以用 JavaScript 完成相同的工作。\n我们推荐对于 Hardhat 不熟悉的读者首先通过 Hardhat 的官方文档 (https://hardhat.org/docs) 来熟悉这一流行的智能合约开发框架。\n快速入门\n1. 开发环境\n建议读者在 macOS 或 Linux 的命令行环境下进行 ERC-3525 开发。如果读者使用 Windows，我们强烈建议读者首先安装 Windows Subsystem for Linux （WSL），然后在 WSL 环境中进行如下操作。\n读者可以选择自己喜欢的任何一种代码编辑工具来编写代码，但我们推荐使用 Visual Studio Code，因为 Hardhat 的开发者 Nomic Foundation 为 Visual Studio Code 开发了一款 Solidity 插件，可以帮助提升 Solidity 和 Hardhat 开发效率。\n\n此外，Hardhat 开发中大量使用 JavaScript 或者 TypeScript 编写测试用例，Visual Studio Code 本身对于 JavaScript 和 TypeScript 就提供了良好的支持。\n2. 创建 Hardhat TypeScript 项目\n首先在命令行环境下通过如下命令准备项目目录。本示例项目名称为 erc3525-getting-started。\nmkdir erc3525-getting-startedcd erc3525-getting-startednpm init -ynpm install --save-dev hardhat\n\n在命令行输入以下命令（以MacOSX为例）\nnpx hardhat\n\n将看到以下界面\n\n选择“Create a TypeScript project”后，Hardhat 会提示若干问题，读者直接通过回车选择缺省选项即可。\n\n全部选择完毕后，系统自动执行一系列安装和准备工作。结束后，使用 Visual Studio Code打开目录，你可以看到如下项目结构：\n\n3. 引入和安装 ERC-3525 参考实现模块包\n下面，通过 npm 命令在当前目录安装 ERC-3525 参考实现\nnpm install @solvprotocol/erc-3525@latest\n\n由于我们需要用到 OpenZeppelin 的 String 库，因此需要使用以下命令安装 OpenZepplin：\nnpm install @openzeppelin/contracts@latest\n\n安装完毕之后，可打开 package.json 文件，应该能够看到 @solvprotocol/erc-3525 相关信息，表明已经成功安装。\n\n4. 编写智能合约\n为了简单起见，我们规避复杂的业务逻辑，以一个最简单的应用案例来讲解 ERC-3525 的代码开发过程。这个案例中，我们创建一个最简单的 ERC-3525 通证，它只具备 ERC-3525 的基本功能，没有额外的功能。不过我们将为它创建一个“外表”，使它可以用 SVG 动态图像来显示内部的状态。\n在 Hardhat 项目创建过程中，自动添加了一个实例代码文件 Lock.sol。本范例中不需要这文件，因此首先请删除 contracts/Lock.sol，并在 contracts 目录中新建文件 ERC3525GettingStarted.sol，代码如下：\n// SPDX-License-Identifier: MITpragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@solvprotocol/erc-3525/ERC3525.sol\";\n\ncontract ERC3525GettingStarted is ERC3525 {    \n    using Strings for uint256;   \n    address public owner;\n    \nconstructor(address owner_)\n    ERC3525(\"ERC3525GettingStarted\", \"ERC3525GS\", 18) {\n        owner = owner_;\n    }\n\n   function mint(address to_, uint256 slot_, uint256 amount_) external {\n   require(msg.sender == owner, \n     \"ERC3525GettingStarted: only owner can mint\");\n   _mint(to_, slot_, amount_);\n    }\n}\n\n在以上代码中，我们创建了一个新的合约 ERC3525GettingStarted。这个合约从 ERC3525 参考实现合约中派生，其构造函数直接调用 ERC3525 合约的构造函数，传入合约的全名、符号和小数位数，并为 owner 赋值。我们并且添加了一个 mint() 函数，确保只有 owner 能够铸造这个 ERC-3525 通证。具体的铸造过程，是通过调用 ERC3525 合约当中的 _mint() 实现的，这样我们就复用了 ERC3525 合约的参考实现，得到了一个最简单的 ERC-3525 通证合约。\n有了 ERC-3525 的参考实现，很多基本功能都可以直接调用相应的函数实现，开发者可以只聚焦于业务逻辑和创新功能，这样就大大简化了相关的开发。\n代码编写完毕之后，在命令行执行以下命令进行编译：\nnpx hardhat compile\n\n编译成功结果如下：\n5. 编写测试用例\n使用 Hardhat 框架开发智能合约的主要好处之一是可以进行自动化测试。下面我们介绍如何使用 Hardhat 的测试框架对 ERC3525GettingStarted 合约进行自动化测试。\n测试代码集中在 test 目录下。同样，我们首先删除 test/Lock.ts，然后在 test 目录下新建ERC3525GettingStarted.ts，代码如下\nimport { loadFixture } from \"@nomicfoundation/hardhat-network-helpers\";\nimport { expect } from \"chai\";\nimport { ethers } from \"hardhat\";\n\ndescribe(\"ERC3525GettingStarted\", function () {\n  // We define a fixture to reuse the same setup in every test.\n  // We use loadFixture to run this setup once, snapshot that state,\n  // and reset Hardhat Network to that snapshot in every test.\n  async function deployGettingStartedFixture() {\n\n    // Contracts are deployed using the first signer/account by default\n    const [owner, otherAccount] = await ethers.getSigners();\n\n    const GettingStarted = await ethers.getContractFactory(\n      \"ERC3525GettingStarted\");\n    const gettingStarted = await GettingStarted.deploy(owner.address);\n\n    return { gettingStarted, owner, otherAccount };\n  }\n\n  describe(\"Deployment\", function () {\n    it(\"Should set the right owner\", async function () {\n      const { gettingStarted, owner } = await loadFixture(\n        deployGettingStartedFixture);\n      expect(await gettingStarted.owner()).to.equal(owner.address);\n    });\n  });\n\n  describe(\"Mintable\", function () {\n    describe(\"Validations\", function () {\n      it(\"Should revert with not owner\", async function () {\n        const { gettingStarted, owner, otherAccount } = \n          await loadFixture(deployGettingStartedFixture);\n        const slot = 3525\n        const value = ethers.utils.parseEther(\"9.5\");\n        await expect(\n          gettingStarted.connect(otherAccount)\n                        .mint(owner.address, slot, value))\n                        .to.be.revertedWith(\n          \"ERC3525GettingStarted: only owner can mint\"\n        );\n      });\n    });\n\n    describe(\"Mint\", function () {\n      it(\"Should mint to other account\", async function () {\n        const { gettingStarted, owner, otherAccount } = \n          await loadFixture(deployGettingStartedFixture);\n        const slot = 3525\n        const value = await ethers.utils.parseEther(\"9.5\");\n\n        await gettingStarted.mint(otherAccount.address, slot, value);\n        expect(await gettingStarted[\"balanceOf(uint256)\"](1)).to.eq(value);\n        expect(await gettingStarted.slotOf(1)).to.eq(slot);\n        expect(await gettingStarted.ownerOf(1))\n                                   .to.eq(otherAccount.address);\n      });\n    });\n  });\n});\n\n在上面的测试代码中，我们编写了一个测试夹具和三个测试用例，分别测试了 owner 的正确性、mint 的操作权限和 mint 操作的功能。这些用例遵循了 Hardhat 中编写智能合约测试代码的标准方式，读者可通过 Hardhat 官方文档学习，此处不再赘述。\n6. 运行测试\n下面实际运行测试。方法是在项目主目录执行如下命令：\nnpx hardhat test\n\n执行结果如下：\n这表明我们的智能合约成功通过了所有三个测试用例。\n7. 添加 SVG 图像\nERC-3525 最初的设计目标是表达复杂的金融资产，特别是数字票据。既然是数字资产，就必须支持可拆分、可合并，能够像 ERC-20 通证一样进行各种数学计算。另一方面，ERC-3525 超越 ERC-20 的重要一点，就是具有可视化的外在形象，唯有如此才能够向用户传达丰富的信息，使复杂数字资产的复杂性能够被表达出来。这是 ERC-3525 选择兼容 ERC-721 的主要动机。因此，ERC-3525 支持元数据，并且通过从 IERC721Metadata 接口继承而来的 tokenURI 函数返回资源的 URL，或者直接返回图片的内容数据。在 NFT 当中，普遍的做法是将图片放在链外的存储上，然后让 tokenURI 函数返回其 URL。这种设计其实有一个非常大的风险，就是在 NFT 出售以后，控制存储的人可以更换 URL 上的图片，这样买家手里的 NFT 实际上就被篡改了。为了解决这个问题，大多数 NFT 采用了 IPFS 存储，通过哈希值来确保图片资源的唯一性。即使如此，也难以防范一些破坏，比如将 IPFS 上存储的图片资源删除。\nERC-3525 的设计初衷是为了表达金融资产，金融资产的信息非常敏感和重要，决不能被更换和删除。因此，Solv 建议直接将展现层用 SVG 表达，并直接放在链上。具体方法就是让 tokenURI 函数直接返回 SVG 代码片段，而不是指向图像资源的链接。\n在 ERC3525GettingStarted 合约中加入以下函数：\n     function tokenURI(uint256 tokenId_) public view virtual override returns (string memory) {\n        return string(\n            abi.encodePacked(\n                '<svg width=\"600\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">',\n                ' <g> <title>Layer 1</title>',\n                '  <rect id=\"svg_1\" height=\"600\" width=\"600\" y=\"0\" x=\"0\" stroke=\"#000\" fill=\"#000000\"/>',\n                '  <text xml:space=\"preserve\" text-anchor=\"start\" font-family=\"Noto Sans JP\" font-size=\"24\" id=\"svg_2\" y=\"340\" x=\"200\" stroke-width=\"0\" stroke=\"#000\" fill=\"#ffffff\">TokenId: ',\n                tokenId_.toString(),\n                '</text>',\n                '  <text xml:space=\"preserve\" text-anchor=\"start\" font-family=\"Noto Sans JP\" font-size=\"24\" id=\"svg_3\" y=\"410\" x=\"200\" stroke-width=\"0\" stroke=\"#000\" fill=\"#ffffff\">Balance: ',\n                balanceOf(tokenId_).toString(),\n                '</text>',\n                '  <text xml:space=\"preserve\" text-anchor=\"start\" font-family=\"Noto Sans JP\" font-size=\"24\" id=\"svg_3\" y=\"270\" x=\"200\" stroke-width=\"0\" stroke=\"#000\" fill=\"#ffffff\">Slot: ',\n                slotOf(tokenId_).toString(),\n                '</text>',\n                '  <text xml:space=\"preserve\" text-anchor=\"start\" font-family=\"Noto Sans JP\" font-size=\"24\" id=\"svg_4\" y=\"160\" x=\"150\" stroke-width=\"0\" stroke=\"#000\" fill=\"#ffffff\">ERC3525 GETTING STARTED</text>',\n                ' </g> </svg>'\n            )\n        );\n     }\n\n这将生成一张黑色背景的 SVG 图像，显示如下：\n\n注意，其中 Slot、TokenId 和 Balance 的数值都是直接从 ERC-3525 通证的当前状态中提取的。\n8. 部署到本地节点\nHardhat 框架自带一个以太坊本地节点的实现，特别针对开发过程中的需求做了不少优化。我们推荐在开发调试过程中将合约部署到这个节点上。\n在deploy目录修改deploy.ts如以下内容：\nimport { ethers } from \"hardhat\";\n\nasync function main() {\n  const GettingStarted = await ethers.getContractFactory(\"ERC3525GettingStarted\");\n  const gettingStarted = await GettingStarted.deploy();\n  gettingStarted.deployed();\n\n  console.log(`GettingStarted deployed to ${gettingStarted.address}`);\n}\n\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n\n打开一个新的 Terminal，运行hardhat 内建节点 \nnpx hardhat node\n\n运行结果如下（为节约篇幅，省略其它账号）：\n\n在项目主目录执行以下命令：\nnpx hardhat run --network localhost scripts/deploy.ts\n\n执行成功后将看到如下结果。注意红框的地址部分，后面的交互会用到\n\n智能合约部署之后，可以通过 hardhat console 命令与之进行交互，这是 Hardhat 节点的一个重要优势，能够大大简化测试和调试阶段的工作。输入以下命令：\nnpx hardhat console --network localhost\n\n交互指令及结果如下：\n~/Sources/erc3525-getting-started$ npx hardhat console --network localhost\n\nWelcome to Node.js v16.18.1.\nType \".help\" for more information.\n> const GettingStarted=await ethers.getContractFactory(\"ERC3525GettingStarted\")\nundefined\n> const gettingStarted=await GettingStarted.attach('<此处替换成你部署的地址，也就是上一图的红框处的地址>')\nundefined\n> const [owner, otherAccount] = await ethers.getSigners()\nundefined\n> await gettingStarted.mint(otherAccount.address, 3525, 10000)\n{\n  hash: '0x94d428b32da7e66e8f0e2d48a37ddb9072dca54013130d95779495e1e443df2c',\n...\n}\n\n读者可以自行输入一些 TypeScript 代码来尝试与智能合约进行交互。\n9. 在 Sepolia 测试网络上部署\n在开发环境下测试和调试完毕之后，就需要部署到测试链上了。测试链提供了基本等同于主链的运行环境，但在上面进行测试和调试无需缴纳高昂的 gas 费用。另一方面，有些智能合约的功能必须在测试链上才能运行，比如与 Oracle 的交互，在开发用的虚拟节点上是不支持的。我们这个案例非常简单，用不到 Oracle，但是作为一个原则，一个智能合约在上主链之前，一定是要在测试链上运行测试无误才可以。\n以太坊已经于 2022 年 9 月 15 日升级到 POS，因此之前几个流行的测试链，如 Ropsten, Rinkeby, Kovan 等已经被废弃。现在主要的两个测试链是 Goerli 和 Sepolia。其中 Goerli 历史较长，完全开放，比较适合于测试复杂的智能合约，而 Sepolia 较新，由一组确定的验证者节点组成，不能随意加入，是当前进行 DApp 开发测试的首选测试链。在这个例子中，我们选择 Sepolia 测试链。\n为了部署在 Sepolia 测试链，读者需要通过 https://www.infura.io/ 申请 infura API KEY。我们假定读者已经完成这项工作，下面直接介绍部署的过程。\n修改 hardhat.config.ts 如下：\nimport { HardhatUserConfig } from \"hardhat/config\";\nimport \"@nomicfoundation/hardhat-toolbox\";\n\nconst config: HardhatUserConfig = {\n  solidity: \"0.8.17\",\n  networks: {\n    sepolia: {\n      url: process.env.SEPOLIA_URL || `https://sepolia.infura.io/v3/${process.env.INFURA_KEY}`,\n      accounts:\n        process.env.PRIVATE_KEY !== undefined ? [process.env.PRIVATE_KEY] : [],\n    },\n  }\n};\n\nexport default config;\n\n然后在 Terminal 命令行环境中执行以下命令，设置  infura api key 和 private key：\nexport INFURA_KEY=<YOUR_INFURA_KEY>; export PRIVATE_KEY=<YOUR_PRIVATE_KEY>;\n\n请注意，将 替换成你申请的 infura API KEY，将  替换成私钥。强烈建议测试网和主网的私钥隔离，不要使用已有的主网私钥。\n在 Sepolia 测试网中进行测试需要准备一些测试币，即 Sepolia FaucETH。读者可以到 https://faucet.sepolia.dev/ 去申领一些 FaucETH 以供测试之用。\n这些准备工作做好之后，就可以执行脚本进行部署了：\nnpx hardhat run --network sepolia scripts/deploy.ts\n\n执行成功后，结果如下。请注意红框中的地址，我们将在下一步中使用到。\n\n10. 铸造 ERC3525GettingStarted 通证\n下面我们来铸造一个 ERC3525GettingStarted 通证。我们采用的方法是使用 TypeScript 调用合约功能进行通证铸造，这与在 Web3 DApp 开发中的模式是一致的。\n首先在 scripts 目录下新建文件 mint.ts ，代码如下：\nimport { ethers } from \"hardhat\";\n\nasync function main() {\n  const [owner] = await ethers.getSigners();\n  const GettingStarted = await ethers.getContractFactory(\"ERC3525GettingStarted\");\n  const gettingStarted = await GettingStarted.attach('<部署合约地址>');\n  const tx = await gettingStarted.mint(owner.address, 3525, 20220905);\n  await tx.wait();\n  const uri = await gettingStarted.tokenURI(1);\n  console.log(uri);\n}\n\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n\n请注意，将代码中 <部署合约地址> 替换成上一节红框中的地址。\n最后，执行以下命令：\nnpx hardhat run --network sepolia scripts/mint.ts\n\n这样，我们就成功的铸造了一张 ERC3525GettingStarted 通证。\n怎么确认这一点呢？可以到 Sepolia Etherscan (https://sepolia.etherscan.io/) 上去查看铸造出来的 token。在浏览器地址栏里输入：\nhttps://sepolia.etherscan.io/address/<部署合约地址>\n请注意，将<部署合约地址> 替换成上一节红框中的地址。\n恭喜你！如果一切顺利，你就成功的开发和部署第一个 ERC-3525 通证了，可以对它进行各种新的操作了，比如拆分、合并、在两个通证之间转账，等等，赶快尝试一下吧！\n本文完整的示例代码参见 GitHub （https://github.com/solv-finance/erc3525-getting-started）。\n进阶学习\n本教程对于 ERC-3525 半匀质化通证（SFT）应用开发的过程进行了简明扼要的阐述。读者可以由此出发，开发具有丰富功能和高级外观的 SFT。当然，如果想要深入学习 ERC-3525 的知识和开发技术，这只是一个起点，我们推荐您从以下几个方面入手深入学习：\n阅读 ERC-3525 白皮书（https://whitepaper.sftlabs.io/SFT%20Whitepaper.pdf）\n研究 ERC-3525 参考实现 （https://github.com/solv-finance/erc-3525）\n研究 SFTLabs 官方提供的 Showroom 案例 （https://showroom.sftlabs.io/showroom/）\n研究 ERC-3525 技术专家开发的以太币现金钞案例 Crypto Notes  (https://cryptonotes.fun/)\n**\n**我们也将继续发表一系列文章和教程来帮助开发者掌握 ERC-3525 技术。\n**\n**\nIf you find submirror valuable, please consider donate to wong2.eth to help cover server cost.","guid":"https://mirror.xyz/0x07599B7E947A4F6240F826F41768F76149F490D5/TJUH3ymtN7N1cOdvr__GfHRblZiU9YXG7N7epilMuXA","isoDate":"2022-12-19T03:29:19.000Z","from":"https://submirror.xyz/0x07599B7E947A4F6240F826F41768F76149F490D5","hashId":"86a9eac41892cf242e67431f6442c256"},{"title":"信息真空期，美股会反弹吗？南方东英以太币期货 ETF 和南方东英比特币期货 ETF 目前均已跌破发行价~","link":"https://mirror.xyz/0x8c902B8839010BB1761201d42f788e7eD9FCFD77/KAe27gr_8z6bpW_e9oW0PpIdifK-J8_Pyh0zq-gp6oA","pubDate":"Mon, 19 Dec 2022 03:10:41 GMT","content:encoded":"<p>加密早餐（2022年12月 19日）--------推特：比特币橙子Trader；（看我推特，不迷路；如果你关注我、转发我、点赞我和评论我，你会暴富，不信你试试！~~）</p>\n<p>【最新动态】  纽约联储主席威廉姆斯表示，联邦基金利率不需要超过6%，加息幅度可能超过FOMC的终端利率预期。金山联储主席戴利表示，将利率峰值维持11个月是合理的起点，如有需要，将维持超过11个月。克利夫兰联储主席梅斯特称，没有看到服务业价格方面的通胀进展，明年需要让政策利率保持在5%以上。</p>\n<p>美国12月Markit制造业PMI初值录得46.2，为31个月新低。美国12月Markit服务业PMI初值录得44.4，为4个月新低。美国12月Markit综合PMI录得44.6，为4个月新低。美联储加息赌通胀产生了预期效果，但是经济成本正在增加，经济衰退的风险也随之增加。不过美国前财政萨默斯表示，美国最近的通胀数据令人鼓舞，即将到来的经济衰退可能会比此前预期的更晚到来。</p>\n<p>从美联储官员的讲话中不难看出，当前炒作美联储的政策转向为时尚早。现在最大的问题是市场与美联储产生了对抗，最新发布的经济预测显示明年年底的利率预期中值为5.1%，且2024年前不会降息。即便如此，投资者依然押注美联储2023年只会将利率上调至4.85%的峰值，之后将迅速转向，截止明年年底将降息50个基点。</p>\n<p>美国劳工统计局表示，没有发现任何证据表明其系统遭到破坏，也没有发现关于上周美国CPI数据的发布存在任何可疑活动。上周二，好于预期的通胀数据挂上劳工部网站前数秒内，美国国债期货大涨，这也导致了人们担心数据是否提前泄露。</p>\n<p>本周是信息真空的一周，没有任何美联储官员讲话，在刚刚宣布完成加息后，竟然没有一位官员站出来跟市场进行沟通。本周虽然没有官员讲话，但是有两个时间点的数据还是要关注下。</p>\n<p>本周四21:30，美国上周初请失业金人数公布，前值是21.1，最新公布的数据显示，美国上周首次申领失业救济人数意外降至9月以来最低，劳动力市场失衡持续。如果本次数据再低低于前值21.1万，有可能引发美股的下跌。</p>\n<p>本周五21:30，美国11月核心PCE物价指数公布，前值是5%，预测值为4.6%。这是美联储比较偏爱的通胀指标，所以要稍微重视下。</p>\n<p>未来值得关注的 12 个潜在叙事<a href=\"https://twitter.com/kindahangry/status/1603285156357251073?s=20&amp;t=7pz_Quh3GcY3DZy7sbeHhQ\">https://twitter.com/kindahangry/status/1603285156357251073?s=20&amp;t=7pz_Quh3GcY3DZy7sbeHhQ</a></p>\n<p>据港交所数据显示，南方东英以太币期货 ETF 和南方东英比特币期货 ETF 目前均已跌破发行价，其中南方东英以太币期货 ETF 当前价格为 7.280 港元，跌幅达到 6.73%；南方东英比特币期货 ETF 当前价格跌至 7.480 港元，跌幅为 4.23%。<a href=\"https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products/Exchange-Traded-Products-Quote?sym=3068&amp;sc_lang=zh-HK\">https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products/Exchange-Traded-Products-Quote?sym=3068&amp;sc_lang=zh-HK</a></p>\n<p>加密交易平台 Gemini 总裁兼首席执行官 Cameron Winklevoss 表示，债权人委员会财务顾问 Houlihan Lokey 已开始倡导一项计划，以解决 Genesis 和 DCG 的流动性问题，并为资金回收提供途径。目前仍处于早期阶段，讨论仍在进行中，但将会在有更多信息后发布通知。 据悉，Houlihan Lokey 是一家美国跨国独立投资银行和金融服务公司，主要服务领域包括并购、资本市场、财务重组和估值。</p>\n<p>据 DefiLlama 数据显示，全网 DeFi 协议总锁仓量（TVL）于昨日再度跌破 400 亿美元，创 2021 年 2 月 11 日以来新低。此前该数据于 11 月 23 日短时跌破 400 亿美元后迅速反弹至 420 亿美元附近。</p>\n<p>a16Z加密团队阅读的书籍和正在玩的游戏：<a href=\"https://a16zcrypto.com/some-books-were-reading-and-games-were-playing-this-winter/\">https://a16zcrypto.com/some-books-were-reading-and-games-were-playing-this-winter/</a></p>\n<p>Vitalik眼中22年的5件大事<a href=\"https://shows.banklesshq.com/p/vitaliks-top-5-crypto-wins-of-2022\">https://shows.banklesshq.com/p/vitaliks-top-5-crypto-wins-of-2022</a></p>\n<p>以太坊周报重点内容：核心开发者更新上海升级 EIP 细节及后续 Capella 升级的规划；扩容解决方案 EIP-4844 的 Devnet 3 预计将于下周发布；关于提议者构建者分离方案（PBS）拍卖机制的研究。<a href=\"https://weekinethereumnews.com/week-in-ethereum-news-december-17-2022/\">https://weekinethereumnews.com/week-in-ethereum-news-december-17-2022/</a></p>\n<p>Coinbase Ventures 投资版图：300 多个项目，重点布局基础设施<a href=\"https://foresightnews.pro/article/detail/21266\">https://foresightnews.pro/article/detail/21266</a></p>\n<p>没事来我们电报群吧，这里帅哥，美女多，代码也多，话题也多，机会多多，还可以防失联。（电报群搜索：橙子的朋友们）</p>\n<p>【行情分析】 比特币上周跟随美股下跌之后，目前为止没有任何起色，无论是从周线，日线级别，都无法看到积极的信号，更多的是弱势调整。</p>\n<p>4小时级别，反弹上升趋势终究被破坏，目前又要重新恢复调整态势，当前正处于再次验证底部支撑时候，所以下方15000附近的支撑将会变得至关重要。</p>\n<p>我们始终抱有大幅度反弹的期待，今年走熊以来市场一直没有像样的反弹走势，所以这种反弹一定会来，当然这也在某种程度上取决于宏观层面的市场数据和信心。</p>\n<h2 id=\"【风险提醒】-数字资产波动较大，风险极高，请谨慎参与，杜绝满仓梭哈，拒绝贷款杠杆；\">【风险提醒】 数字资产波动较大，风险极高，请谨慎参与，杜绝满仓梭哈，拒绝贷款杠杆；</h2>\n<p><em>If you find submirror valuable, please consider donate to wong2.eth to help cover server cost.</em></p>\n","content:encodedSnippet":"加密早餐（2022年12月 19日）--------推特：比特币橙子Trader；（看我推特，不迷路；如果你关注我、转发我、点赞我和评论我，你会暴富，不信你试试！~~）\n【最新动态】  纽约联储主席威廉姆斯表示，联邦基金利率不需要超过6%，加息幅度可能超过FOMC的终端利率预期。金山联储主席戴利表示，将利率峰值维持11个月是合理的起点，如有需要，将维持超过11个月。克利夫兰联储主席梅斯特称，没有看到服务业价格方面的通胀进展，明年需要让政策利率保持在5%以上。\n美国12月Markit制造业PMI初值录得46.2，为31个月新低。美国12月Markit服务业PMI初值录得44.4，为4个月新低。美国12月Markit综合PMI录得44.6，为4个月新低。美联储加息赌通胀产生了预期效果，但是经济成本正在增加，经济衰退的风险也随之增加。不过美国前财政萨默斯表示，美国最近的通胀数据令人鼓舞，即将到来的经济衰退可能会比此前预期的更晚到来。\n从美联储官员的讲话中不难看出，当前炒作美联储的政策转向为时尚早。现在最大的问题是市场与美联储产生了对抗，最新发布的经济预测显示明年年底的利率预期中值为5.1%，且2024年前不会降息。即便如此，投资者依然押注美联储2023年只会将利率上调至4.85%的峰值，之后将迅速转向，截止明年年底将降息50个基点。\n美国劳工统计局表示，没有发现任何证据表明其系统遭到破坏，也没有发现关于上周美国CPI数据的发布存在任何可疑活动。上周二，好于预期的通胀数据挂上劳工部网站前数秒内，美国国债期货大涨，这也导致了人们担心数据是否提前泄露。\n本周是信息真空的一周，没有任何美联储官员讲话，在刚刚宣布完成加息后，竟然没有一位官员站出来跟市场进行沟通。本周虽然没有官员讲话，但是有两个时间点的数据还是要关注下。\n本周四21:30，美国上周初请失业金人数公布，前值是21.1，最新公布的数据显示，美国上周首次申领失业救济人数意外降至9月以来最低，劳动力市场失衡持续。如果本次数据再低低于前值21.1万，有可能引发美股的下跌。\n本周五21:30，美国11月核心PCE物价指数公布，前值是5%，预测值为4.6%。这是美联储比较偏爱的通胀指标，所以要稍微重视下。\n未来值得关注的 12 个潜在叙事https://twitter.com/kindahangry/status/1603285156357251073?s=20&t=7pz_Quh3GcY3DZy7sbeHhQ\n据港交所数据显示，南方东英以太币期货 ETF 和南方东英比特币期货 ETF 目前均已跌破发行价，其中南方东英以太币期货 ETF 当前价格为 7.280 港元，跌幅达到 6.73%；南方东英比特币期货 ETF 当前价格跌至 7.480 港元，跌幅为 4.23%。https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products/Exchange-Traded-Products-Quote?sym=3068&sc_lang=zh-HK\n加密交易平台 Gemini 总裁兼首席执行官 Cameron Winklevoss 表示，债权人委员会财务顾问 Houlihan Lokey 已开始倡导一项计划，以解决 Genesis 和 DCG 的流动性问题，并为资金回收提供途径。目前仍处于早期阶段，讨论仍在进行中，但将会在有更多信息后发布通知。 据悉，Houlihan Lokey 是一家美国跨国独立投资银行和金融服务公司，主要服务领域包括并购、资本市场、财务重组和估值。\n据 DefiLlama 数据显示，全网 DeFi 协议总锁仓量（TVL）于昨日再度跌破 400 亿美元，创 2021 年 2 月 11 日以来新低。此前该数据于 11 月 23 日短时跌破 400 亿美元后迅速反弹至 420 亿美元附近。\na16Z加密团队阅读的书籍和正在玩的游戏：https://a16zcrypto.com/some-books-were-reading-and-games-were-playing-this-winter/\nVitalik眼中22年的5件大事https://shows.banklesshq.com/p/vitaliks-top-5-crypto-wins-of-2022\n以太坊周报重点内容：核心开发者更新上海升级 EIP 细节及后续 Capella 升级的规划；扩容解决方案 EIP-4844 的 Devnet 3 预计将于下周发布；关于提议者构建者分离方案（PBS）拍卖机制的研究。https://weekinethereumnews.com/week-in-ethereum-news-december-17-2022/\nCoinbase Ventures 投资版图：300 多个项目，重点布局基础设施https://foresightnews.pro/article/detail/21266\n没事来我们电报群吧，这里帅哥，美女多，代码也多，话题也多，机会多多，还可以防失联。（电报群搜索：橙子的朋友们）\n【行情分析】 比特币上周跟随美股下跌之后，目前为止没有任何起色，无论是从周线，日线级别，都无法看到积极的信号，更多的是弱势调整。\n4小时级别，反弹上升趋势终究被破坏，目前又要重新恢复调整态势，当前正处于再次验证底部支撑时候，所以下方15000附近的支撑将会变得至关重要。\n我们始终抱有大幅度反弹的期待，今年走熊以来市场一直没有像样的反弹走势，所以这种反弹一定会来，当然这也在某种程度上取决于宏观层面的市场数据和信心。\n【风险提醒】 数字资产波动较大，风险极高，请谨慎参与，杜绝满仓梭哈，拒绝贷款杠杆；\nIf you find submirror valuable, please consider donate to wong2.eth to help cover server cost.","guid":"https://mirror.xyz/0x8c902B8839010BB1761201d42f788e7eD9FCFD77/KAe27gr_8z6bpW_e9oW0PpIdifK-J8_Pyh0zq-gp6oA","isoDate":"2022-12-19T03:10:41.000Z","from":"https://submirror.xyz/0x8c902B8839010BB1761201d42f788e7eD9FCFD77","hashId":"9eace0466be855ed2bb6109c3502b782"},{"title":"How to choose a data provider for your web3 project?","link":"https://mirror.xyz/0x0A9ee078998e6ECe11e1FF75fCbc7BeD5be005bB/VavqnrhXX07QJndzo7v9k7Ds9-rDpv5VsDuMBTs3KiQ","pubDate":"Mon, 19 Dec 2022 03:30:05 GMT","content:encoded":"<p><img src=\"https://miro.medium.com/max/1400/1*P8VczQOzjRKlsMxiV4DM_w.webp\" alt=\"\"></p>\n<p>Beyond cryptocurrency tokens, the blockchain also enables analysts to get a clearer picture of practically any GameFi project, NFT, marketplace, or DeFi protocol, thanks to Footprint.</p>\n<p>At Footprint, we’ve created a methodology that compiles and meaningfully aggregates the raw blockchain data. And this applies to programming integrations.</p>\n<h2 id=\"1--ways-to-work-with-the-blockchain-data\">1 . Ways to work with the blockchain data</h2>\n<p>Let’s first talk about programming integration methods. There are a few different ways to work with blockchain data, and your chosen approach will depend on your specific needs and goals. Here is a quick overview:</p>\n<p><img src=\"https://miro.medium.com/max/1368/0*Q671KUTscYGhn626.webp\" alt=\"\"></p>\n<h2 id=\"11-blockchain-explorers\">1.1 Blockchain explorers</h2>\n<p>A blockchain explorer is a website or tool that allows you to view the data stored on a blockchain. This can be a quick and easy way to access information about specific transactions, blocks, and other data on the blockchain.</p>\n<p>Blockchain explorers can be a useful tool for accessing and viewing data stored on a blockchain, but they do have some limitations for software integrations. Here are a few examples of things that blockchain explorers may lack:</p>\n<ul>\n<li>Mainly focused on raw data. Blockchain explorers typically display raw data from the blockchain. That requires implementing the abstractions over the raw data, which can be tedious, especially for projects focused on delivery rather than on the technical details of certain blockchains.</li>\n<li>Customization options: Blockchain explorers are typically designed to be user-friendly and easy to use, which means they may not offer many customization options. This can make it difficult to tailor the explorer to your specific needs or preferences.</li>\n<li>Advanced search functionality: Blockchain explorers often have basic search functionality but may not support more advanced search features such as Boolean operators or regular expressions. This can make it difficult to search for specific information on the blockchain.</li>\n<li>Interactivity: Many blockchain explorers are essentially read-only tools.</li>\n</ul>\n<p>While blockchain explorers can be a helpful way to access and view blockchain raw data, they do have some limitations that you should be aware of before deciding to implement your solution infrastructure based on them.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*tOPXWRQTo8Ze8xGY.webp\" alt=\"\"></p>\n<h2 id=\"12-own-indexing-solution\">1.2 Own indexing solution</h2>\n<p>Setting up your own indexer to work with blockchain data can have several advantages and potential disadvantages. Here are a few examples of each:</p>\n<p>Advantages:</p>\n<ul>\n<li>Customization: When you set up your indexer, you have complete control over how the data is indexed and accessed. This can allow you to tailor the indexer to your specific needs and preferences.</li>\n<li>Independence: By setting up your indexer, you are not relying on a third-party service to maintain and update the index. This can provide greater control and flexibility in your work with blockchain data.</li>\n<li>Improved security: When you set up your own indexer, you can implement your own security measures to protect the data and prevent unauthorized access.</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>Complexity: Setting up your indexer can be a complex and time-consuming process, especially if you are new to working with blockchain technology. You will need to understand the underlying technology and be willing to invest the time and effort required to get the indexer up and running.</li>\n<li>Maintenance: Once you have set up your indexer, you will be responsible for maintaining and updating it. This can require ongoing technical expertise and resources, which can be a disadvantage if you do not have the necessary knowledge or support.</li>\n<li>Cost: Setting up your own indexer can be expensive, as you must purchase the hardware and software required to run the indexer and pay for any associated costs, such as electricity and bandwidth.</li>\n</ul>\n<p>Overall, setting up your own indexer to work with blockchain data can provide greater control and customization, but it can also be a complex and expensive process. It’s important to consider the advantages and disadvantages carefully before deciding if this is the right approach.</p>\n<h2 id=\"13-database-as-a-service\">1.3 Database as a service</h2>\n<p>Using a third-party indexer to work with blockchain data can have several advantages and potential disadvantages. Here are a few examples of each:</p>\n<p>Advantages:</p>\n<ul>\n<li>Ease of use: Third-party indexers are typically designed to be easy to use, which means you can start working with the blockchain data quickly and without having to learn a lot of technical details or running your custom indexing solution (doesn’t matter whether it is self-developed or a ready-made SDK)</li>\n<li>Advanced search functionality: Many third-party indexers offer advanced search functionality, such as Boolean operators and regular expressions, making searching for specific information on the blockchain easier. These can have many actual implementations, but the indexed data is often added to a relational database, which implies full SQL support.</li>\n<li>Scalability: Third-party indexers are often designed to handle large volumes of data, which means they can be a good option if you need to search or access data from a large blockchain.</li>\n<li>Reliability: Third-party indexers are typically run by professional organizations with the resources and expertise to ensure the index is always up-to-date and accurate. Solutions are not always decentralized, as they are focused on processing huge amounts of data, but the vast majority are open source, which increases user confidence in the service.</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>Dependency: Using a third-party indexer, you rely on that service to maintain and update the index. If the indexer experiences technical issues or goes offline, you may not be able to access the blockchain data.</li>\n<li>Limited customization: Third-party indexers are typically designed to be easy to use, which means they may not offer many customization options. This can make it difficult to tailor the indexer to your specific needs or preferences.</li>\n<li>Cost: Some third-party indexers may charge a fee for their services, which can be a disadvantage if you work on a tight budget.</li>\n</ul>\n<p>In summary, using a third-party indexer to work with blockchain data can be a convenient and effective option, but limited and sometimes lack customization.</p>\n<h2 id=\"14-summary\">1.4 Summary</h2>\n<p>The goal of Footprint is primarily to lower the bar for entering analytics and working with web3 data. This approach is a balance between ease of use and flexibility. That is why one of our services is DaaS (Database as the service type). Before we take a closer look at the advantages of our service, we will also look at another implementation option for the indexer, namely a self-written solution or SDK.</p>\n<p>In the next chapters, we will explore the core feature that read-only blockchain APIs should have. We will look at the problem from different angles and consider alternative solutions. Some of the most important features of blockchain APIs include the following:</p>\n<ul>\n<li>Ease of use and flexibility</li>\n<li>Scalability</li>\n<li>Compatibility</li>\n</ul>\n<p>Ease of use and flexibility are two important features of blockchain APIs. A blockchain API that is easy to use will make it easier for developers to start building blockchain-based applications, allowing them to quickly prototype and test their ideas without spending a lot of time learning how to use the API.</p>\n<p>Flexibility, on the other hand, refers to the ability of a blockchain API to support a wide range of use cases and applications. A flexible blockchain API will allow developers to access different parts of the blockchain and build applications that interact with different types of smart contracts and other blockchain-based assets. This can be especially important for developers looking to build applications that can be used in various industries and contexts.</p>\n<p>Overall, having a blockchain API that is both easy to use and flexible can make it easier for developers to build innovative and useful applications that can take advantage of blockchain technology’s unique features and capabilities.</p>\n<h2 id=\"15-footprint-analytics\">1.5 Footprint Analytics</h2>\n<p>Ease of use and flexibility is ensured by our data organization, which affects all aspects of interactions with the Footprint ecosystem. Footprint has an API built on top of this data model that allows users to build full-fledged data pipelines for data analysis and machine learning applications. We call it a Data API. We are simultaneously supporting two types of API and two sub-types within one of them to cover most of the cases: Rest API and SQL API.</p>\n<p>REST API allows us to quickly integrate an application since each endpoint is a pre-built, hard-coded script that we have identified as one of the most popular. All endpoints come with easy-to-use tools for filtering, sorting, and pagination.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*2GOPeYnNFvc7uEJR.webp\" alt=\"\"></p>\n<p>Thanks to the SQL API’s more adaptable interface, you can obtain this for more specific cases. One benefit of using the same SQL queries in both the web application and the API is that it can simplify development and maintenance. By using the same queries in both interfaces, developers can avoid the need to write and maintain separate sets of queries for the web application and the API. This can save time and effort and reduce the risk of errors or inconsistencies between the two interfaces.</p>\n<p><img src=\"https://miro.medium.com/max/1400/0*UdAjA4nIA2uBSk3n.webp\" alt=\"\"></p>\n<p>Additionally, using the same SQL queries in both the web application and the API can make it easier for developers to create a seamless user experience. By using the same queries, developers can ensure that the data accessed and manipulated by the web application and the API is consistent, allowing users to switch between the two interfaces without encountering any inconsistencies or disruptions.</p>\n<h2 id=\"16-other-platforms\">1.6 Other platforms</h2>\n<p>Many alternative analytics solutions allow the user to analyze different networks according to various levels of requirements. However, for the most part, alternative solutions tend to go to extremes, implementing either a very flexible product that requires knowledge of query languages ​​or even programming languages or ​​a very simple interface with prepared scripts and, accordingly, low flexibility.</p>\n<p>Solutions like Moralis and Quicknode only have a REST API interface. Even though there are many endpoints, it still limits the developer in the flexibility of the data returned.</p>\n<p>Dune has recently introduced its API. This asynchronous solution implies the preliminary existence of a query on the platform under a certain id (dune.com/query/{{query id}}), by which it is possible to execute queries in the form of SQL. The key limitation of this solution is the need to pre-modify the SQL on the platform so that the updated query is subsequently executed.</p>\n<p>Chainbase releases SQL API in the same way as Footprint. Still, unlike Footprint, Chainbase does not have such sophisticated ETL, so SQL queries can only be executed for raw transactions.</p>\n<h2 id=\"2-scalability\">2. Scalability</h2>\n<p>Blockchain APIs should be able to handle large volumes of data and transactions, allowing developers to build applications that can be used by many users simultaneously.</p>\n<h2 id=\"21-footprint-analytics\">2.1 Footprint Analytics</h2>\n<h2 id=\"211-modern-open-data-stack\">2.1.1 Modern open data stack</h2>\n<p>The Footprint team has made several architectural upgrades since its launch in August 2021, thanks to its span ability to explore and iterate on technology. In less than a year and a half, the team has been able to implement these changes successfully. This is a testament to the team’s skill and expertise in technology and data science.</p>\n<p>Through experimentation, Footprint iteratively made three global architectural updates, ultimately arriving at an architecture that meets the requirements of the platform’s various use cases. More information on the evolution of the implementation can be found in the next article:</p>\n<p><a href=\"https://www.footprint.network/article/iceberg-spark-trino-a-modern-opensource-data-stack-for-blockchain-fp-HGZpPm3D\">https://www.footprint.network/article/iceberg-spark-trino-a-modern-opensource-data-stack-for-blockchain-fp-HGZpPm3D</a></p>\n<h2 id=\"212-sync-and-async-executions\">2.1.2 Sync and async executions</h2>\n<p>Within Footprint, there are two modes for executing queries to the SQL API — synchronous and asynchronous. API calls to the synchronous endpoint imply the SQL query will be executed by the Footprint servers as soon as an HTTP request is received from the application, thereby maintaining the connection. This makes sense when using lightweight requests, as in this case, the application does not have to wait long for execution. The details can be found on the following page:</p>\n<p><a href=\"https://docs.footprint.network/reference/post_native\">https://docs.footprint.network/reference/post_native</a></p>\n<p>For heavy requests, it is recommended to use an asynchronous request. Unlike a synchronous one, the client application does not have to maintain a connection with the server during execution. Instead, it can get the request-id immediately, according to which, after some time, separately get the execution results. As part of the asynchronous API, two-step should be covered to fetch the data — the following endpoint will be used to send an “order” for SQL execution:</p>\n<p><a href=\"https://docs.footprint.network/reference/post_native-async\">https://docs.footprint.network/reference/post_native-async</a></p>\n<p>The second step is to send a request to receive results by the identifier obtained when accessing the previous endpoint. The endpoint for this second step is described on the following page:</p>\n<p><a href=\"https://docs.footprint.network/reference/get_native-execution-id-results\">https://docs.footprint.network/reference/get_native-execution-id-results</a></p>\n<h2 id=\"22-other-solutions\">2.2 Other solutions</h2>\n<p>DuneV2 changes the whole database architecture. Dune is now transitioning away from a PostgreSQL database to an Instance of [[Apache Spark]] hosted on [[Databricks]]. Only asynchronous API.</p>\n<h2 id=\"3-compatibility\">3. Compatibility</h2>\n<p>Blockchain APIs should be compatible with a wide range of programming languages and development environments so that developers can use the tools and frameworks they are most familiar with.</p>\n<p>REST is easier to integrate since each programming language has many libraries that provide comfortable work with this type of API. However, in the end, both SQL APIs and REST work over HTTP, so the development experience is almost identical regarding sending a request by default.</p>\n<h2 id=\"4-summary\">4. Summary</h2>\n<p>As we have analyzed, in most cases, it is enough for an application to use ready-made DaaS solutions for the reason that they can return abstractions (not just raw data) and save a lot of time and money, as they ultimately allow teams to focus not on infrastructure but on the value of the product. Going through various solutions in the DaaS market,</p>\n<p>Footprint seems to be the most optimal to integrate, as it has the most flexible model for generating requests while being both easy to use and also having the modern open-source data stack under the hood, which ensures uninterrupted and, most importantly, fast execution of the most complex requests.</p>\n<hr>\n<p><em>If you find submirror valuable, please consider donate to wong2.eth to help cover server cost.</em></p>\n","content:encodedSnippet":"Beyond cryptocurrency tokens, the blockchain also enables analysts to get a clearer picture of practically any GameFi project, NFT, marketplace, or DeFi protocol, thanks to Footprint.\nAt Footprint, we’ve created a methodology that compiles and meaningfully aggregates the raw blockchain data. And this applies to programming integrations.\n1 . Ways to work with the blockchain data\nLet’s first talk about programming integration methods. There are a few different ways to work with blockchain data, and your chosen approach will depend on your specific needs and goals. Here is a quick overview:\n\n1.1 Blockchain explorers\nA blockchain explorer is a website or tool that allows you to view the data stored on a blockchain. This can be a quick and easy way to access information about specific transactions, blocks, and other data on the blockchain.\nBlockchain explorers can be a useful tool for accessing and viewing data stored on a blockchain, but they do have some limitations for software integrations. Here are a few examples of things that blockchain explorers may lack:\nMainly focused on raw data. Blockchain explorers typically display raw data from the blockchain. That requires implementing the abstractions over the raw data, which can be tedious, especially for projects focused on delivery rather than on the technical details of certain blockchains.\nCustomization options: Blockchain explorers are typically designed to be user-friendly and easy to use, which means they may not offer many customization options. This can make it difficult to tailor the explorer to your specific needs or preferences.\nAdvanced search functionality: Blockchain explorers often have basic search functionality but may not support more advanced search features such as Boolean operators or regular expressions. This can make it difficult to search for specific information on the blockchain.\nInteractivity: Many blockchain explorers are essentially read-only tools.\nWhile blockchain explorers can be a helpful way to access and view blockchain raw data, they do have some limitations that you should be aware of before deciding to implement your solution infrastructure based on them.\n\n1.2 Own indexing solution\nSetting up your own indexer to work with blockchain data can have several advantages and potential disadvantages. Here are a few examples of each:\nAdvantages:\nCustomization: When you set up your indexer, you have complete control over how the data is indexed and accessed. This can allow you to tailor the indexer to your specific needs and preferences.\nIndependence: By setting up your indexer, you are not relying on a third-party service to maintain and update the index. This can provide greater control and flexibility in your work with blockchain data.\nImproved security: When you set up your own indexer, you can implement your own security measures to protect the data and prevent unauthorized access.\nDisadvantages:\nComplexity: Setting up your indexer can be a complex and time-consuming process, especially if you are new to working with blockchain technology. You will need to understand the underlying technology and be willing to invest the time and effort required to get the indexer up and running.\nMaintenance: Once you have set up your indexer, you will be responsible for maintaining and updating it. This can require ongoing technical expertise and resources, which can be a disadvantage if you do not have the necessary knowledge or support.\nCost: Setting up your own indexer can be expensive, as you must purchase the hardware and software required to run the indexer and pay for any associated costs, such as electricity and bandwidth.\nOverall, setting up your own indexer to work with blockchain data can provide greater control and customization, but it can also be a complex and expensive process. It’s important to consider the advantages and disadvantages carefully before deciding if this is the right approach.\n1.3 Database as a service\nUsing a third-party indexer to work with blockchain data can have several advantages and potential disadvantages. Here are a few examples of each:\nAdvantages:\nEase of use: Third-party indexers are typically designed to be easy to use, which means you can start working with the blockchain data quickly and without having to learn a lot of technical details or running your custom indexing solution (doesn’t matter whether it is self-developed or a ready-made SDK)\nAdvanced search functionality: Many third-party indexers offer advanced search functionality, such as Boolean operators and regular expressions, making searching for specific information on the blockchain easier. These can have many actual implementations, but the indexed data is often added to a relational database, which implies full SQL support.\nScalability: Third-party indexers are often designed to handle large volumes of data, which means they can be a good option if you need to search or access data from a large blockchain.\nReliability: Third-party indexers are typically run by professional organizations with the resources and expertise to ensure the index is always up-to-date and accurate. Solutions are not always decentralized, as they are focused on processing huge amounts of data, but the vast majority are open source, which increases user confidence in the service.\nDisadvantages:\nDependency: Using a third-party indexer, you rely on that service to maintain and update the index. If the indexer experiences technical issues or goes offline, you may not be able to access the blockchain data.\nLimited customization: Third-party indexers are typically designed to be easy to use, which means they may not offer many customization options. This can make it difficult to tailor the indexer to your specific needs or preferences.\nCost: Some third-party indexers may charge a fee for their services, which can be a disadvantage if you work on a tight budget.\nIn summary, using a third-party indexer to work with blockchain data can be a convenient and effective option, but limited and sometimes lack customization.\n1.4 Summary\nThe goal of Footprint is primarily to lower the bar for entering analytics and working with web3 data. This approach is a balance between ease of use and flexibility. That is why one of our services is DaaS (Database as the service type). Before we take a closer look at the advantages of our service, we will also look at another implementation option for the indexer, namely a self-written solution or SDK.\nIn the next chapters, we will explore the core feature that read-only blockchain APIs should have. We will look at the problem from different angles and consider alternative solutions. Some of the most important features of blockchain APIs include the following:\nEase of use and flexibility\nScalability\nCompatibility\nEase of use and flexibility are two important features of blockchain APIs. A blockchain API that is easy to use will make it easier for developers to start building blockchain-based applications, allowing them to quickly prototype and test their ideas without spending a lot of time learning how to use the API.\nFlexibility, on the other hand, refers to the ability of a blockchain API to support a wide range of use cases and applications. A flexible blockchain API will allow developers to access different parts of the blockchain and build applications that interact with different types of smart contracts and other blockchain-based assets. This can be especially important for developers looking to build applications that can be used in various industries and contexts.\nOverall, having a blockchain API that is both easy to use and flexible can make it easier for developers to build innovative and useful applications that can take advantage of blockchain technology’s unique features and capabilities.\n1.5 Footprint Analytics\nEase of use and flexibility is ensured by our data organization, which affects all aspects of interactions with the Footprint ecosystem. Footprint has an API built on top of this data model that allows users to build full-fledged data pipelines for data analysis and machine learning applications. We call it a Data API. We are simultaneously supporting two types of API and two sub-types within one of them to cover most of the cases: Rest API and SQL API.\nREST API allows us to quickly integrate an application since each endpoint is a pre-built, hard-coded script that we have identified as one of the most popular. All endpoints come with easy-to-use tools for filtering, sorting, and pagination.\n\nThanks to the SQL API’s more adaptable interface, you can obtain this for more specific cases. One benefit of using the same SQL queries in both the web application and the API is that it can simplify development and maintenance. By using the same queries in both interfaces, developers can avoid the need to write and maintain separate sets of queries for the web application and the API. This can save time and effort and reduce the risk of errors or inconsistencies between the two interfaces.\n\nAdditionally, using the same SQL queries in both the web application and the API can make it easier for developers to create a seamless user experience. By using the same queries, developers can ensure that the data accessed and manipulated by the web application and the API is consistent, allowing users to switch between the two interfaces without encountering any inconsistencies or disruptions.\n1.6 Other platforms\nMany alternative analytics solutions allow the user to analyze different networks according to various levels of requirements. However, for the most part, alternative solutions tend to go to extremes, implementing either a very flexible product that requires knowledge of query languages ​​or even programming languages or ​​a very simple interface with prepared scripts and, accordingly, low flexibility.\nSolutions like Moralis and Quicknode only have a REST API interface. Even though there are many endpoints, it still limits the developer in the flexibility of the data returned.\nDune has recently introduced its API. This asynchronous solution implies the preliminary existence of a query on the platform under a certain id (dune.com/query/{{query id}}), by which it is possible to execute queries in the form of SQL. The key limitation of this solution is the need to pre-modify the SQL on the platform so that the updated query is subsequently executed.\nChainbase releases SQL API in the same way as Footprint. Still, unlike Footprint, Chainbase does not have such sophisticated ETL, so SQL queries can only be executed for raw transactions.\n2. Scalability\nBlockchain APIs should be able to handle large volumes of data and transactions, allowing developers to build applications that can be used by many users simultaneously.\n2.1 Footprint Analytics\n2.1.1 Modern open data stack\nThe Footprint team has made several architectural upgrades since its launch in August 2021, thanks to its span ability to explore and iterate on technology. In less than a year and a half, the team has been able to implement these changes successfully. This is a testament to the team’s skill and expertise in technology and data science.\nThrough experimentation, Footprint iteratively made three global architectural updates, ultimately arriving at an architecture that meets the requirements of the platform’s various use cases. More information on the evolution of the implementation can be found in the next article:\nhttps://www.footprint.network/article/iceberg-spark-trino-a-modern-opensource-data-stack-for-blockchain-fp-HGZpPm3D\n2.1.2 Sync and async executions\nWithin Footprint, there are two modes for executing queries to the SQL API — synchronous and asynchronous. API calls to the synchronous endpoint imply the SQL query will be executed by the Footprint servers as soon as an HTTP request is received from the application, thereby maintaining the connection. This makes sense when using lightweight requests, as in this case, the application does not have to wait long for execution. The details can be found on the following page:\nhttps://docs.footprint.network/reference/post_native\nFor heavy requests, it is recommended to use an asynchronous request. Unlike a synchronous one, the client application does not have to maintain a connection with the server during execution. Instead, it can get the request-id immediately, according to which, after some time, separately get the execution results. As part of the asynchronous API, two-step should be covered to fetch the data — the following endpoint will be used to send an “order” for SQL execution:\nhttps://docs.footprint.network/reference/post_native-async\nThe second step is to send a request to receive results by the identifier obtained when accessing the previous endpoint. The endpoint for this second step is described on the following page:\nhttps://docs.footprint.network/reference/get_native-execution-id-results\n2.2 Other solutions\nDuneV2 changes the whole database architecture. Dune is now transitioning away from a PostgreSQL database to an Instance of [[Apache Spark]] hosted on [[Databricks]]. Only asynchronous API.\n3. Compatibility\nBlockchain APIs should be compatible with a wide range of programming languages and development environments so that developers can use the tools and frameworks they are most familiar with.\nREST is easier to integrate since each programming language has many libraries that provide comfortable work with this type of API. However, in the end, both SQL APIs and REST work over HTTP, so the development experience is almost identical regarding sending a request by default.\n4. Summary\nAs we have analyzed, in most cases, it is enough for an application to use ready-made DaaS solutions for the reason that they can return abstractions (not just raw data) and save a lot of time and money, as they ultimately allow teams to focus not on infrastructure but on the value of the product. Going through various solutions in the DaaS market,\nFootprint seems to be the most optimal to integrate, as it has the most flexible model for generating requests while being both easy to use and also having the modern open-source data stack under the hood, which ensures uninterrupted and, most importantly, fast execution of the most complex requests.\nIf you find submirror valuable, please consider donate to wong2.eth to help cover server cost.","guid":"https://mirror.xyz/0x0A9ee078998e6ECe11e1FF75fCbc7BeD5be005bB/VavqnrhXX07QJndzo7v9k7Ds9-rDpv5VsDuMBTs3KiQ","isoDate":"2022-12-19T03:30:05.000Z","from":"https://submirror.xyz/0x0A9ee078998e6ECe11e1FF75fCbc7BeD5be005bB","hashId":"df3b4e9b081476b408756bfb770d3d20"},{"title":"Kava: A Consensus Engine That Fuses the Cosmos and Ethereum ","link":"https://mirror.xyz/0x867A3f354c0eCB6622aEf1bF14C3BE79338AD889/AMPb0bHUpwu8RKt705dFC05JmdlydKNHq7fsVKNl3RI","pubDate":"Mon, 19 Dec 2022 03:59:36 GMT","content:encoded":"<p>Ethereum and Cosmos have always had a huge number of developers and users, but there has been a lack of a project that really brings the two together. Kava, a highly secure, lightning-fast Layer 1 blockchain, combines the two most commonly used permissionless execution environments into a single, scalable, developer-optimized network. It has successfully built a bridge between Ethereum and Cosmos, the world&#39;s two largest blockchain developer communities. It will also open up endless possibilities for Ethereum and Cosmos.</p>\n<h2 id=\"the-subtle-pattern-of-the-multi-chain-world\">The subtle pattern of the multi-chain world</h2>\n<p>Before 2021, many thought a new narrative should be born outside of Ethereum. But after the bear market cooling, those popular Layer1 public chains now began to retreat. There is no denying that most of the DeFi value occurs on Ethereum, although MakerDAO still accounts for the largest DeFi protocol within the ecosystem. While we remain optimistic about Ethereum-based projects, one of the new narratives to watch over the next 12 months is the introduction of more liquidity for Layer1s like Ethereum and Cosmos.</p>\n<p>The future of the blockchain world is definitely multi-chain. In response to Ethereum&#39;s demand for Web 3 application throughput, many Layer1 blockchains have emerged to replace it, and each Layer1 offers a different solution to the problem of transaction speed and scale.</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/WoqLRnEMHQ-IwTIUhOYKi.png?height=447&width=1280\" alt=\"Source: DefiLlama\"></p>\n<p>However, this did not lead to Ethereum being replaced, but rather to the recognition that different networks might be better suited to meet the needs of a vertical. As developers, applications, and users follow more opportunities and value, they also carry their assets from one chain to another.</p>\n<p>This multi-chain pattern means that optimizing for a specific set of developers or use cases is key. Kava has been positioned as a stand-alone Layer1 network that provides support for widely used DeFi products. Kava Network&#39;s technology enables the creation of trust between different blockchains and the trustworthiness of trading specific assets without centralizing member participants or custodians.</p>\n<h2 id=\"fast-and-efficient-on-chain-banking\">Fast and efficient on-chain banking</h2>\n<p>After the Kava 10 main network upgrade, the Kava network supports both Cosmos and ETH colinks. These two co-chains operate seamlessly with each other, enabling developers to build in whatever environment they want without sacrificing access to users and assets in another environment. It is like two hemispheres of the brain, one optimized for Cosmos ecology developers and the other optimized for Ethereum ecology developers.</p>\n<p>The entire network will be powered by the Tendermint Consensus engine, secured by validators and stakers, and governed by KavaDAO. In addition, its unique on-chain developer incentive model will drive growth through an open and transparent distribution process. In essence, Kava still looks like a decentralized on-chain bank. It makes sense to explore the long-term drivers of token demand.</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/wmB1-4CgfgsOLf8PMQoVa.PNG?height=656&width=1280\" alt=\"Source: Messari\"></p>\n<p>How to maintain existing stakeholders is a major problem. At present, the governance of Kava remains relatively centralized, because the big players are more inclined to have the right returns on Kava to offset the opportunity costs and risks. Although this idea is increasingly vulnerable in the current environment, as on-chain security is being tested in DeFi especially in the cross-chain area, capital appreciation is still the way to go. The combination of yield and capital appreciation is the twin engines, not yield for yield&#39;s sake.</p>\n<h2 id=\"the-kava-pioneer-program\">The Kava Pioneer Program</h2>\n<p>The success of Cosmos and ETH Cochain has brought Kava closer to other Web3 protocols. After the mainnet launch, Beefy Finance, Multichain, Ren Protocol, Autofarm and Curve also announced their plans to log on to the Kava Mainnet. With the success of the Kava Pioneer program, the Kava Rise incentive Program worth $750 million was officially launched after the launch of the Kava 10 mainnet. The new program will incentivize developers to build and deploy on the Kava Network.</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/tti8r9tnz4QWYPXXq3E0V.png?height=334&width=700\" alt=\"Source: Kava Network\"></p>\n<p>The disconnect between token demand and price appreciation also exists for protocols like Kava. However, it&#39;s not a big problem, especially considering platform growth, where Kava&#39;s application-oriented blockchain nature benefits from the interoperability of Ethereum&#39;s EVM network. DeFi&#39;s core competence lies not in solvency but in the security of its functions.</p>\n<p>Next, Kava should try to further expand the demand for on-chain debt. The need to allow leverage should be the primary driver of debt creation. If DeFi wants to get out of its current predicament, market expectations for outstanding debt will have to be raised or created and more deflationary token mechanisms will be devised. This is precisely where the governance value of DeFi tokens lies. Unfortunately, due to the weak centralized nature of the Kava network itself, the network can only be stimulated on the basis of the return rate on the basis of maintaining security, resulting in the lack of strong natural demand for tokens.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>There is no doubt that the opportunities created by combining the two head ecologies are enormous. On the Ethereum network, there are over 4,000 active open source eco-developers each month, and about 1,360 active dApps. In the Cosmos ecosystem, more than 260 projects are being built on the Cosmos SDK, with 33 active Zones integrated with the IBC, completing hundreds of thousands of cross-chain value transfers per day.</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/jJgQcgKckg-k602hnC-qz.PNG?height=685&width=1280\" alt=\"Source: Token Terminal\"></p>\n<p>Opening a development center that links these two ecosystems together will create a great deal of activity for projects that implement such connectivity, while also creating more value for Cosmos and Ethereum and greater revenue opportunities for each participant.</p>\n<p>This is where Kava&#39;s true value potential lies. Kava&#39;s token design can capture value as it serves as a central element of reserve currency, community rewards and incentives. Kava uses KAVA tokens to keep both parties safe and to create a flexible mechanism by paying fees to partners in high-risk situations. In addition, Kava will release balanced rewards to promote fair competition and evaluate new application scenarios.</p>\n<p><em><strong>Disclosure: Bing Ventures has never invested in KAVA. These statements above should not be misconstrued as a recommendation to purchase any token. This content is for informational purposes only and you should not make decisions based solely on it. This is not investment advice.</strong></em></p>\n<p><strong>About Bing Ventures</strong></p>\n<p>Bing Ventures is a venture capital firm supporting Web3 and blockchain startups and entrepreneurs. The founding members are from top financial institutions such as JPMorgan and Standard Chartered Bank. Our investment themes include Decentralized Finance (DeFi), Web3.0, Gaming and Metaverse.</p>\n<p>For more information, please visit us at the following channels:</p>\n<p>Website: <a href=\"https://www.bing-ventures.com/\">https://www.bing-ventures.com/</a></p>\n<p>Twitter: <a href=\"https://twitter.com/BingVentures\">https://twitter.com/BingVentures</a></p>\n<h2 id=\"medium-httpsmediumcombingventures\">Medium: <a href=\"https://medium.com/@BingVentures\">https://medium.com/@BingVentures</a></h2>\n<p><em>If you find submirror valuable, please consider donate to wong2.eth to help cover server cost.</em></p>\n","content:encodedSnippet":"Ethereum and Cosmos have always had a huge number of developers and users, but there has been a lack of a project that really brings the two together. Kava, a highly secure, lightning-fast Layer 1 blockchain, combines the two most commonly used permissionless execution environments into a single, scalable, developer-optimized network. It has successfully built a bridge between Ethereum and Cosmos, the world's two largest blockchain developer communities. It will also open up endless possibilities for Ethereum and Cosmos.\nThe subtle pattern of the multi-chain world\nBefore 2021, many thought a new narrative should be born outside of Ethereum. But after the bear market cooling, those popular Layer1 public chains now began to retreat. There is no denying that most of the DeFi value occurs on Ethereum, although MakerDAO still accounts for the largest DeFi protocol within the ecosystem. While we remain optimistic about Ethereum-based projects, one of the new narratives to watch over the next 12 months is the introduction of more liquidity for Layer1s like Ethereum and Cosmos.\nThe future of the blockchain world is definitely multi-chain. In response to Ethereum's demand for Web 3 application throughput, many Layer1 blockchains have emerged to replace it, and each Layer1 offers a different solution to the problem of transaction speed and scale.\n\nHowever, this did not lead to Ethereum being replaced, but rather to the recognition that different networks might be better suited to meet the needs of a vertical. As developers, applications, and users follow more opportunities and value, they also carry their assets from one chain to another.\nThis multi-chain pattern means that optimizing for a specific set of developers or use cases is key. Kava has been positioned as a stand-alone Layer1 network that provides support for widely used DeFi products. Kava Network's technology enables the creation of trust between different blockchains and the trustworthiness of trading specific assets without centralizing member participants or custodians.\nFast and efficient on-chain banking\nAfter the Kava 10 main network upgrade, the Kava network supports both Cosmos and ETH colinks. These two co-chains operate seamlessly with each other, enabling developers to build in whatever environment they want without sacrificing access to users and assets in another environment. It is like two hemispheres of the brain, one optimized for Cosmos ecology developers and the other optimized for Ethereum ecology developers.\nThe entire network will be powered by the Tendermint Consensus engine, secured by validators and stakers, and governed by KavaDAO. In addition, its unique on-chain developer incentive model will drive growth through an open and transparent distribution process. In essence, Kava still looks like a decentralized on-chain bank. It makes sense to explore the long-term drivers of token demand.\n\nHow to maintain existing stakeholders is a major problem. At present, the governance of Kava remains relatively centralized, because the big players are more inclined to have the right returns on Kava to offset the opportunity costs and risks. Although this idea is increasingly vulnerable in the current environment, as on-chain security is being tested in DeFi especially in the cross-chain area, capital appreciation is still the way to go. The combination of yield and capital appreciation is the twin engines, not yield for yield's sake.\nThe Kava Pioneer Program\nThe success of Cosmos and ETH Cochain has brought Kava closer to other Web3 protocols. After the mainnet launch, Beefy Finance, Multichain, Ren Protocol, Autofarm and Curve also announced their plans to log on to the Kava Mainnet. With the success of the Kava Pioneer program, the Kava Rise incentive Program worth $750 million was officially launched after the launch of the Kava 10 mainnet. The new program will incentivize developers to build and deploy on the Kava Network.\n\nThe disconnect between token demand and price appreciation also exists for protocols like Kava. However, it's not a big problem, especially considering platform growth, where Kava's application-oriented blockchain nature benefits from the interoperability of Ethereum's EVM network. DeFi's core competence lies not in solvency but in the security of its functions.\nNext, Kava should try to further expand the demand for on-chain debt. The need to allow leverage should be the primary driver of debt creation. If DeFi wants to get out of its current predicament, market expectations for outstanding debt will have to be raised or created and more deflationary token mechanisms will be devised. This is precisely where the governance value of DeFi tokens lies. Unfortunately, due to the weak centralized nature of the Kava network itself, the network can only be stimulated on the basis of the return rate on the basis of maintaining security, resulting in the lack of strong natural demand for tokens.\nConclusion\nThere is no doubt that the opportunities created by combining the two head ecologies are enormous. On the Ethereum network, there are over 4,000 active open source eco-developers each month, and about 1,360 active dApps. In the Cosmos ecosystem, more than 260 projects are being built on the Cosmos SDK, with 33 active Zones integrated with the IBC, completing hundreds of thousands of cross-chain value transfers per day.\n\nOpening a development center that links these two ecosystems together will create a great deal of activity for projects that implement such connectivity, while also creating more value for Cosmos and Ethereum and greater revenue opportunities for each participant.\nThis is where Kava's true value potential lies. Kava's token design can capture value as it serves as a central element of reserve currency, community rewards and incentives. Kava uses KAVA tokens to keep both parties safe and to create a flexible mechanism by paying fees to partners in high-risk situations. In addition, Kava will release balanced rewards to promote fair competition and evaluate new application scenarios.\nDisclosure: Bing Ventures has never invested in KAVA. These statements above should not be misconstrued as a recommendation to purchase any token. This content is for informational purposes only and you should not make decisions based solely on it. This is not investment advice.\nAbout Bing Ventures\nBing Ventures is a venture capital firm supporting Web3 and blockchain startups and entrepreneurs. The founding members are from top financial institutions such as JPMorgan and Standard Chartered Bank. Our investment themes include Decentralized Finance (DeFi), Web3.0, Gaming and Metaverse.\nFor more information, please visit us at the following channels:\nWebsite: https://www.bing-ventures.com/\nTwitter: https://twitter.com/BingVentures\nMedium: https://medium.com/@BingVentures\nIf you find submirror valuable, please consider donate to wong2.eth to help cover server cost.","guid":"https://mirror.xyz/0x867A3f354c0eCB6622aEf1bF14C3BE79338AD889/AMPb0bHUpwu8RKt705dFC05JmdlydKNHq7fsVKNl3RI","isoDate":"2022-12-19T03:59:36.000Z","from":"https://submirror.xyz/0x867A3f354c0eCB6622aEf1bF14C3BE79338AD889","hashId":"44a15943bc2bf531109987dee964c2f5"},{"title":"SeeDAO | 愿意为您效劳：深入分析三个服务类 DAO","link":"https://mirror.xyz/seedao.eth/735LXx5c5pccBpAeh9LigmCnZW9Z5wXy_r5ntXwyQVw","pubDate":"Mon, 19 Dec 2022 05:17:25 GMT","content:encoded":"<p><strong>摘要:</strong> 本文介绍了什么是服务类 DAO，并选择了三个代表性的服务类 DAO 进行介绍。</p>\n<hr>\n<p><em><strong>有些 DAO 喜欢办聚会，有些 DAO 喜欢玩艺术，服务类 DAO 则喜欢搞钱。</strong></em></p>\n<p>就形式而言，服务类 DAO 一半是社交俱乐部，一半是代理机构。可以想像成 FWB 有一个专注于服务 Web2 公司的咨询分公司。服务类 DAO 将贡献者与一个由志同道合的人组成的松散的社区连接起来，同时给他们提供机会用自身的技能赚钱。</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/hwxqL67-pveQo7f5AuqcL.jpg?height=659&width=1080\" alt=\"\"></p>\n<p>在传统机构里，存在所有者和雇员的关系。而在服务类 DAO 里，由于共享代币，每个人都是 DAO 的部分所有者，这为改善激励机制创造了可能。此外，服务类 DAO 是 Web3 原生的，这意味着它们既能吸引更优秀的贡献者，同时在服务 Web3 原生客户方面也能比传统机构做得更好。</p>\n<p>服务类 DAO 有好几百个，但我只选了三个来细讲。我认为它们三个能够代表服务类 DAO 未来的发展方向。</p>\n<h3 id=\"myosin\">Myosin</h3>\n<p>上周，我和 Myosin 的创始人 Blake Minho Kim 喝了咖啡，他向我详细介绍了 Myosin 的愿景。Myosin 是一个增长型营销 DAO，它与 Web2 公司以及 Web3 原生公司合作制定用户获取策略。</p>\n<p>通常而言，增长型营销人员以代理模式工作，但 Myosin 是以集体形式运作的，组织内部分成内容、策略、产品等不同的公会。截至目前，Myosin 已经与游戏平台 EveryRealm、Web3 消息平台 Notifi 以及迪斯尼著名的 Web3 加速器 Lockervere 进行了合作。</p>\n<p>Myosin 将其服务分成三大类：1) 寻找与市场匹配的产品；2) 加速增长；3）进入 Web3。这意味着 DAO 成员可以做任何事情，从提供进入市场的战略咨询，到建立 Discord，或提供每周文章作为交付物。</p>\n<p>具体到报酬分配，对于每个项目，75% 的收入归项目贡献者所有，15% 归 DAO 国库，10% 归撮合交易的人所有。此外，新成员加入 DAO 时 Myosin 都会向其赠送 1000 枚 MYOSIN 币。</p>\n<p>Blake 的愿景让我对 Web3 营销的未来充满期待。除了为其它公司提供服务之外，Myosin 还将利用其社区国库中的现金流来建立一套加密原生的数字产品。至于这些产品具体会是什么样，Blake 拒绝透露。</p>\n<h3 id=\"code4rena\">Code4rena</h3>\n<p>Code4rena 是一个通过区块链审计确保 Web3 安全性的 DAO，与众多 Web3 项目有合作，其中包括 OpenSea、ENS、Aave、Alchemix、 Nouns。</p>\n<p>这些 Web3 项目没有使用通常的漏洞赏金协议，而是采用 Code4rena 作为协议层来举办审计竞赛——奖池通常为 $50,000 以上的 USDC。在 Code4rena 竞技场中，有三类玩家：</p>\n<ol>\n<li><p>守护者 (Wardens) </p>\n<p>通过审计代码来保护 DeFi；</p>\n</li>\n<li><p>赞助商 (Sponsors) </p>\n<p>创建奖池以吸引守护者来审核其代码；</p>\n</li>\n<li><p>评委 (Judges) </p>\n<p>决定审计结果的严重性、有效性和质量水平，并对守护者的表现进行评分。</p>\n</li>\n</ol>\n<p>通过 Code4rena 的联合创始人 Scott Lewis，我认识了<a href=\"https://twitter.com/sockdrawermoney?s=21&amp;t=ewntb4o6Y9ic47BK0-3NfA\">@SockDrawerMoney</a>，后者告诉我，审计员通常分为两类：一类是学习者，每场比赛可得 50-500 美元；另一类是专业审计员，每赢得一场比赛可获得 2000 美元到 30000 美元不等。对于其他类型的贡献者（称为 「共济会」(Masons)），Code4rena 则使用 $ARENA 向其支付报酬。</p>\n<p>关于治理，@SockDrawerMoney 告诉我，其治理是在链上进行的，且「高度关注将合适的权力下放于合适的地方」。根据 DAO 章程，DAO 国库的使用、治理的变更以及代币的发行都需要进行投票；而在这些主题之外，DAO 则尽量避免投票，而是组成不同的工作小组，每个小组由 3-5 名具有相关专业知识的社区成员组成。</p>\n<h3 id=\"risk-dao\">Risk DAO</h3>\n<p>Risk DAO 是今年早些时候推出的一个服务类 DAO，旨在给企业提供一种创新的风险管理框架。任何在加密货币领域呆过的人都知道，对于糟糕的风险管理，这是非常急需的。</p>\n<p>Risk DAO 提供审计和相关服务，重点针对借贷市场和稳定币协议。</p>\n<p>协议创始人 Yaron Velner 告诉我，Risk DAO 已经与 Aurigami Finance、Vesta Finance、Gearbox 以及更多未披露的协议进行了合作。</p>\n<p>Risk DAO 目前尚未发行代币，但由几个成员控制着一个多签钱包。通常情况下，由多签钱包接收付款后再将其分配给贡献者，但有时会由协议直接支付给贡献者。Velner 说，虽然没有正式的头衔，但团队中各有分工，负责不同业务，比如业务拓展，开发潜在客户等。他们还发表<a href=\"https://blog.tally.xyz/at-your-service-a-deep-dive-into-3-service-daos-7e850105305c\">研究论文</a>和开源工具，这使他们获得了一些影响力，也给他们带来了新客户。</p>\n<p>Risk DAO 知道，Web3 领域是由那些有远见的人和创新者所推动的，但也认识到，许多影响成功的因素被忽略了。他们在风险管理方面找到了自己的利基市场。作为服务类 DAO，Risk DAO 使这些梦想家能够为开发者和客户们执行并简化安全第一的策略。</p>\n<h3 id=\"荣誉提名：opolis\">荣誉提名：Opolis</h3>\n<p>我们已经看到零工经济和 DAO 经济的大规模兴起。其中， DAO 工作者的待遇特别高，工作时间也很灵活，只是缺乏传统公司环境内的员工福利。而 Opolis 就像一艘为独立工作者提供员工福利的大船。它是一个为服务类 DAO 提供服务的集体。</p>\n<p>Opolis 分为雇员成员（独立工作者）和联盟成员（非美国自由职业者，想要推荐成员的 DAO，以及投资者）。Opolis 执行管事 Joshua Lapidus 告诉我，「就业 DAO」中大约有 450 名「就业会员」。</p>\n<p>这个生态系统的运作是围绕着一个叫做 $WORK 的代币进行的。是的，它是一个代币。不，这没有什么可激动的。就把它看作是一种激励协调工具。参与 DAO 内活动的所有成员都会得到 $WORK 代币奖励，可以是最基本的使用共享服务，也可以是推荐新成员等等。</p>\n<p>但是，为什么 Opolis 还要构建成 DAO 呢？因为这个由独立工作者组成的社区能够利用他们新成立的集体组织地位，来获得通常只有在传统公司才享有的福利。这意味着成员可以获得法币和加密货币的工资单工具、优惠的团体健康医疗保险，以及其他各种服务。</p>\n<p>成员仅在使用这些服务时需要付费，利润则根据活动在会员之间分享。参与者通过持有 $WORK 代币转换成为此共享网络的所有者。未来的行动会通过该代币的积累以及 DAO 的治理来决定。</p>\n<h3 id=\"结束语\">结束语</h3>\n<p>大学时，我在一家搜索引擎优化机构工作。规矩非常严格，每 10 秒还要截屏一次，确保你在工作。服务类 DAO 则正好相反。</p>\n<p>自从开始写这篇文章以来，我加入了前面提到的 Myosin ，并参与到了这个社区。参加产品电话会议真的很有趣，我希望能尽快通过他们找到一份自由工作。</p>\n<p>最后总结，去掉花哨的描述词和 DAO 术语，这些框架其实就是让连接更加人性化，同时又能增加个人灵活性。这些 DAO 鼓励一种可以扩展的连接和自我主权。就未来的工作而言，服务类 DAO 正朝着正确的方向迈进。</p>\n<hr>\n<p>原文链接：</p>\n<p><a href=\"https://blog.tally.xyz/at-your-service-a-deep-dive-into-3-service-daos-7e850105305c\">https://blog.tally.xyz/at-your-service-a-deep-dive-into-3-service-daos-7e850105305c</a></p>\n<hr>\n<p>原文作者：<a href=\"https://iamjasonlevin.medium.com/?source=post_page-----7e850105305c--------------------------------\">Jason Levin</a>｜译者：Rosa｜审校：Hana｜排版：<a href=\"https://twitter.com/0xwalton\">walton</a></p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/zAsVlKg3auNeuHm35lOrH.png?height=1371&width=860\" alt=\"\"></p>\n<hr>\n<p><em>If you find submirror valuable, please consider donate to wong2.eth to help cover server cost.</em></p>\n","content:encodedSnippet":"摘要: 本文介绍了什么是服务类 DAO，并选择了三个代表性的服务类 DAO 进行介绍。\n有些 DAO 喜欢办聚会，有些 DAO 喜欢玩艺术，服务类 DAO 则喜欢搞钱。\n就形式而言，服务类 DAO 一半是社交俱乐部，一半是代理机构。可以想像成 FWB 有一个专注于服务 Web2 公司的咨询分公司。服务类 DAO 将贡献者与一个由志同道合的人组成的松散的社区连接起来，同时给他们提供机会用自身的技能赚钱。\n\n在传统机构里，存在所有者和雇员的关系。而在服务类 DAO 里，由于共享代币，每个人都是 DAO 的部分所有者，这为改善激励机制创造了可能。此外，服务类 DAO 是 Web3 原生的，这意味着它们既能吸引更优秀的贡献者，同时在服务 Web3 原生客户方面也能比传统机构做得更好。\n服务类 DAO 有好几百个，但我只选了三个来细讲。我认为它们三个能够代表服务类 DAO 未来的发展方向。\nMyosin\n上周，我和 Myosin 的创始人 Blake Minho Kim 喝了咖啡，他向我详细介绍了 Myosin 的愿景。Myosin 是一个增长型营销 DAO，它与 Web2 公司以及 Web3 原生公司合作制定用户获取策略。\n通常而言，增长型营销人员以代理模式工作，但 Myosin 是以集体形式运作的，组织内部分成内容、策略、产品等不同的公会。截至目前，Myosin 已经与游戏平台 EveryRealm、Web3 消息平台 Notifi 以及迪斯尼著名的 Web3 加速器 Lockervere 进行了合作。\nMyosin 将其服务分成三大类：1) 寻找与市场匹配的产品；2) 加速增长；3）进入 Web3。这意味着 DAO 成员可以做任何事情，从提供进入市场的战略咨询，到建立 Discord，或提供每周文章作为交付物。\n具体到报酬分配，对于每个项目，75% 的收入归项目贡献者所有，15% 归 DAO 国库，10% 归撮合交易的人所有。此外，新成员加入 DAO 时 Myosin 都会向其赠送 1000 枚 MYOSIN 币。\nBlake 的愿景让我对 Web3 营销的未来充满期待。除了为其它公司提供服务之外，Myosin 还将利用其社区国库中的现金流来建立一套加密原生的数字产品。至于这些产品具体会是什么样，Blake 拒绝透露。\nCode4rena\nCode4rena 是一个通过区块链审计确保 Web3 安全性的 DAO，与众多 Web3 项目有合作，其中包括 OpenSea、ENS、Aave、Alchemix、 Nouns。\n这些 Web3 项目没有使用通常的漏洞赏金协议，而是采用 Code4rena 作为协议层来举办审计竞赛——奖池通常为 $50,000 以上的 USDC。在 Code4rena 竞技场中，有三类玩家：\n守护者 (Wardens) \n通过审计代码来保护 DeFi；\n赞助商 (Sponsors) \n创建奖池以吸引守护者来审核其代码；\n评委 (Judges) \n决定审计结果的严重性、有效性和质量水平，并对守护者的表现进行评分。\n通过 Code4rena 的联合创始人 Scott Lewis，我认识了@SockDrawerMoney，后者告诉我，审计员通常分为两类：一类是学习者，每场比赛可得 50-500 美元；另一类是专业审计员，每赢得一场比赛可获得 2000 美元到 30000 美元不等。对于其他类型的贡献者（称为 「共济会」(Masons)），Code4rena 则使用 $ARENA 向其支付报酬。\n关于治理，@SockDrawerMoney 告诉我，其治理是在链上进行的，且「高度关注将合适的权力下放于合适的地方」。根据 DAO 章程，DAO 国库的使用、治理的变更以及代币的发行都需要进行投票；而在这些主题之外，DAO 则尽量避免投票，而是组成不同的工作小组，每个小组由 3-5 名具有相关专业知识的社区成员组成。\nRisk DAO\nRisk DAO 是今年早些时候推出的一个服务类 DAO，旨在给企业提供一种创新的风险管理框架。任何在加密货币领域呆过的人都知道，对于糟糕的风险管理，这是非常急需的。\nRisk DAO 提供审计和相关服务，重点针对借贷市场和稳定币协议。\n协议创始人 Yaron Velner 告诉我，Risk DAO 已经与 Aurigami Finance、Vesta Finance、Gearbox 以及更多未披露的协议进行了合作。\nRisk DAO 目前尚未发行代币，但由几个成员控制着一个多签钱包。通常情况下，由多签钱包接收付款后再将其分配给贡献者，但有时会由协议直接支付给贡献者。Velner 说，虽然没有正式的头衔，但团队中各有分工，负责不同业务，比如业务拓展，开发潜在客户等。他们还发表研究论文和开源工具，这使他们获得了一些影响力，也给他们带来了新客户。\nRisk DAO 知道，Web3 领域是由那些有远见的人和创新者所推动的，但也认识到，许多影响成功的因素被忽略了。他们在风险管理方面找到了自己的利基市场。作为服务类 DAO，Risk DAO 使这些梦想家能够为开发者和客户们执行并简化安全第一的策略。\n荣誉提名：Opolis\n我们已经看到零工经济和 DAO 经济的大规模兴起。其中， DAO 工作者的待遇特别高，工作时间也很灵活，只是缺乏传统公司环境内的员工福利。而 Opolis 就像一艘为独立工作者提供员工福利的大船。它是一个为服务类 DAO 提供服务的集体。\nOpolis 分为雇员成员（独立工作者）和联盟成员（非美国自由职业者，想要推荐成员的 DAO，以及投资者）。Opolis 执行管事 Joshua Lapidus 告诉我，「就业 DAO」中大约有 450 名「就业会员」。\n这个生态系统的运作是围绕着一个叫做 $WORK 的代币进行的。是的，它是一个代币。不，这没有什么可激动的。就把它看作是一种激励协调工具。参与 DAO 内活动的所有成员都会得到 $WORK 代币奖励，可以是最基本的使用共享服务，也可以是推荐新成员等等。\n但是，为什么 Opolis 还要构建成 DAO 呢？因为这个由独立工作者组成的社区能够利用他们新成立的集体组织地位，来获得通常只有在传统公司才享有的福利。这意味着成员可以获得法币和加密货币的工资单工具、优惠的团体健康医疗保险，以及其他各种服务。\n成员仅在使用这些服务时需要付费，利润则根据活动在会员之间分享。参与者通过持有 $WORK 代币转换成为此共享网络的所有者。未来的行动会通过该代币的积累以及 DAO 的治理来决定。\n结束语\n大学时，我在一家搜索引擎优化机构工作。规矩非常严格，每 10 秒还要截屏一次，确保你在工作。服务类 DAO 则正好相反。\n自从开始写这篇文章以来，我加入了前面提到的 Myosin ，并参与到了这个社区。参加产品电话会议真的很有趣，我希望能尽快通过他们找到一份自由工作。\n最后总结，去掉花哨的描述词和 DAO 术语，这些框架其实就是让连接更加人性化，同时又能增加个人灵活性。这些 DAO 鼓励一种可以扩展的连接和自我主权。就未来的工作而言，服务类 DAO 正朝着正确的方向迈进。\n原文链接：\nhttps://blog.tally.xyz/at-your-service-a-deep-dive-into-3-service-daos-7e850105305c\n原文作者：Jason Levin｜译者：Rosa｜审校：Hana｜排版：walton\n\nIf you find submirror valuable, please consider donate to wong2.eth to help cover server cost.","guid":"https://mirror.xyz/seedao.eth/735LXx5c5pccBpAeh9LigmCnZW9Z5wXy_r5ntXwyQVw","isoDate":"2022-12-19T05:17:25.000Z","from":"https://submirror.xyz/seedao.eth","hashId":"1f8ae042f02a7dbc3be977d27de2c8e0"},{"title":"OB30讲第4讲，从ETH2.0入门不读不行，聊到上海升级技术细节与深远影响","link":"https://mirror.xyz/0x054a948bD54a17419dF6bfFac05a64beFF62C51B/4NdT7rVwmNXDZY2ZD1SkNxx0GV856UVNnHGPP4suztk","pubDate":"Mon, 19 Dec 2022 06:48:23 GMT","content:encoded":"<p>作者：<a href=\"https://twitter.com/xingzhu4real\">星主</a>，<a href=\"https://twitter.com/maid_crypto\">CryptoMaid</a>,<a href=\"https://twitter.com/Mumu__131\">Mumu</a>,<a href=\"https://twitter.com/JJ23_crypto\">CryptoJJ</a>,<strong><a href=\"https://twitter.com/Crypto_Quinine\">Crypto_Quinine</a>,<a href=\"https://twitter.com/0x30cf\">Bella_research</a></strong></p>\n<p>出品：<a href=\"https://twitter.com/OpenBlockloveu\">OpenBlock运营部</a></p>\n<p> </p>\n<p>为什么上海升级很重要。因为实际上ETH 15年发布的路线图中的四个阶段：前沿、宅基地、大都会、宁静，历<strong>经15次升级</strong>，在上一次巴黎升级中已经全部完成了，有遗憾，但是整体大大超预期。</p>\n<p> </p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/HbA9YRQwyy_JESka45XF9.png?height=1280&width=1158\" alt=\"\"></p>\n<p> ETH2.0新时代路线图的一大特点是更新频繁，在eth1.0阶段。每次大更新间隔在1~2年的测试才能上马。而ETH2.0当中，现在看来每半年就会进行一次大升级。</p>\n<p>而上海升级是新路线图六个阶段的第一次升级，其身上的重担不言而喻。就像四年前看eth路线图觉得贼画饼一样，现在我们看新路线图也是这种有点梦幻的感觉，又要多少年才能梦想照进现实？</p>\n<p> </p>\n<p>说点粗俗的，可以预见的将来，市场马上就会开始热炒，能蹭上这次上海升级概念的代币了。</p>\n<p>那为了解答这个粗俗的问题。我们的文章会分为三个部分。</p>\n<p> </p>\n<p>1. ETH2.0 的新格局</p>\n<p>2. 上海升级的具体内容</p>\n<p>3. 上海升级，潜在的后续影响</p>\n<p><strong>ETH2.0的新格局，这是一个属于MEV的时代</strong></p>\n<p>为什么这次上海升级如此急迫呢？巴黎升级后仅仅2月，就要定案囊括哪些EIP呢？</p>\n<p> </p>\n<p><em><strong>在ETH2.0当中”验证者“替换了从前”矿工“的角色。MEV收益取代了原来GAS费的角色。 Liquid pool，staking pool，cex staking 三类矿池取代了从前pow矿池的角色。</strong></em></p>\n<p><strong>1.验证者取代了矿工</strong></p>\n<p> </p>\n<p>ETH2.0主网合并后以太坊网络上的所有交易将不再由能源密集型的“矿工”验证，而是由已存入或质押大量ETH的个体和组织“验证者”进行验证。任何人只需质押 32ETH以上， 即可满足最低要求，验证节点成为<strong>“验证者”。</strong></p>\n<p> </p>\n<p><strong>2.MEV收入取代了GAS费</strong></p>\n<p> </p>\n<p><em>web3.0从业者必须尽快普及的一个概念：MEV。我们可以这样阐述，ETH1.0 围绕pow展开的gas分配游戏，而ETH2.0 围绕MEV展开的套利gas消耗游戏</em></p>\n<p> </p>\n<p><strong>MEV（Miner Extractable Value），矿工可提取价值，也有译为最大可提取价值（Max Extractable Value），最早由 Phil Daian 在 <a href=\"https://arxiv.org/abs/1904.05234\">Flash Boys 2.0</a> 这篇论文中提出。</strong></p>\n<p> </p>\n<p>我们都知道，链上所有动作都以「交易」形式存在，而所有交易由用户发起后，都会进入「内存池（mempool）」中等待被矿工打包，出于利润最大化原则，矿工会按照 gas 费高低来确定打包顺序，这就是MEV产生的基本条件，也催生了链上机器人的出现，他们通过高gas设置（PGA）来抢跑池子中的交易进行套利。</p>\n<p> </p>\n<p><em>具体来讲，目前已开发的MEV套利，主要是三类：<strong>1.三角套利2.夹子（三明治攻击.）3.借贷清算。</strong></em></p>\n<p><em>而实际套利捕捉，目前仅仅能实现理论套利的20%左右。这一块儿的套利策略开发和套利规模，会随着eth的代码完善，性能增强，行情变化逐渐增大。</em></p>\n<p> </p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/D0Dun4vXvzhKLNBvXIOKZ.png?height=349&width=237\" alt=\"（熊市状态下，最近一周三类套利收益的保守估计）\"></p>\n<p> </p>\n<p>这样放在地上白捡的利润自然被不少人盯上，据统计数据，自2020年至今，全网累计捕获 MEV 金额高达 6.8 亿美金。这同时也造就了一代新星的兴起——Flashbot，帮助节点捕获MEV的工具。以及MEV捕获赛道的一众花式竞争者，包括但是不限于：<strong>KeeperDAO，ArcherDAO，Automata，mistX，BackRunMe</strong> </p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/JyGd2yCQ3jRm-2ws9ekPb.png?height=439&width=1220\" alt=\"数据来源：flashbot\"></p>\n<p>MEV所产生的巨额利润，一直都被圈在矿工和链上机器人的圈子里，最早作为矿池的一种灰色收入被民间戏称”贿赂节点收入“，”最小的51%攻击“。这种情况一直到2022年的伦敦升级和以太坊合并才有所改变。</p>\n<p><strong>伦敦升级中通过的EIP1559大大改变了矿工们的收入结构</strong></p>\n<p> <strong>由从前的收全额 gas 费变成燃烧+收小费的模式</strong>，而以太坊合并也标志着它彻底改变为POS共识机制，<strong>“验证者”</strong>代替原先比较佛系的<strong>“矿工”</strong>参与MEV价值瓜分，ETH2.0的节点网络成为一个竞争更激烈的、生态更丰富的MEV乐园。这也大大增加了Flashbot客户数量，截至目前，近 90%的以太坊验证者都在运行其 MEV-boost 客户端。</p>\n<p> 从此MEV彻底取代了gas费成为了以太坊“验证者”主要收入，从此gas费被用来燃烧，造成了ETH的长期通缩预期。以目前的数据来说因为MEV-boost的引入，以太坊“验证者”的收入从年化3%左右提升到了接近10%的水平。在ETH通缩的前提下，“节点”收入甚至不输于减半之前，为ETH的网络稳定打下了基础，和其他pos链之间形成了天险一般的壁垒。</p>\n<p> </p>\n<p><strong>3.新时代的矿池</strong></p>\n<p> </p>\n<p>虽然如同前文介绍过的，在eth2.0当中只需要30多个eth就能成为验证者，个人验证者成功获得奖励平均要两个月一次还是非常困难的。尤其现在涉及到mev-boostz这样需要频繁维护的技术活，个人验证者总是捉襟见肘。因此对于除了极少数巨鲸，以及孤勇者以外，加入矿池依旧是主流方案，目前的矿池有三类：<strong>Liquid pool，staking pool，cex staking</strong></p>\n<p>市场份额如下：</p>\n<p> </p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/12JyXPHE-qWYXi_8cZSC-.png?height=398&width=610\" alt=\"33%的ETH选择流动性矿池，29%的ETH选择交易所矿池，23%的巨鲸ETH自己组建了团队，10.1%的ETH选择了传统矿池。\"></p>\n<p><strong>1.流动性矿池：</strong></p>\n<p>中心化程度中等，业务模型以市场份额88.67%的Lido为例。矿池收益归属Lido项目方，矿池奖励用户$Lido挖矿奖励，用户存款凭证为stETH，因为stETH具有流动性，因此被称为流动性矿池。维护stETH-ETH交易对的流动性，是该类矿池的主要竞争力壁垒所在。</p>\n<p> </p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/uzfAyxDBo0IYmxMFxOWed.png?height=394&width=622\" alt=\"\"></p>\n<p><strong>2.交易所矿池：</strong></p>\n<p>中心化程度比较高，矿池收益具体分配方案，管理费用，甚至是抵押ETH的来源，都比较不透明。优势是交易所强大的业务背书和商务团队。</p>\n<p> </p>\n<p><strong>3.矿池：</strong></p>\n<p>中心化程度极低，基本是去中心的，模式就是没有什么模式。自由抵押，公平分配，管理费相对透明。</p>\n<p>劣势是，在此次上海升级之前，受限于ETH2.0的阶段性局限，目前锁仓的ETH，都处于坐牢状态，无法赎回。可预见，该类型矿池会成为上海升级之后的主要受益方。</p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p> </p>\n<p>基于以上新经济模型，验证者质押ETH可以生成和收集新的ETH（MEV），这些所谓的“新ETH”就是他们证明验证交易和保护网络的奖励。</p>\n<p>但目前的以太坊，只能存入ETH但不能提取ETH，质押总价值接近 235 亿美元，都被“被困”在以太坊网络上。</p>\n<p> </p>\n<p><strong>如果不尽快开放解除质押功能，则质押ETH的吸引力将大打折扣</strong>，后续也就不会有那么多人进入以太坊网络，这无疑会对以太坊的未来发展和网络安全产生巨大影响。而在POS世界，pos的抵押量就是正义，维护抵押量是维护区块安全的第一共识。</p>\n<p> </p>\n<p>而这一次上海升级将为链上锁定着的230亿美金的POS质押ETH提供解锁能力，还伴随有对GAS优化的诸多EIP融入。</p>\n<p> </p>\n<p><strong>上海升级的具体内容</strong></p>\n<p> </p>\n<p>非常可惜，原定上海升级中非常重要的EIP-4844最终被确认推迟了。它是ETH 分片的第一步，可以极大的降低eth的gas费用。部分操作可以节省gas一百倍。</p>\n<p>最终被确认更新的提案只剩下十二个提案中的九个。其中第八条最为重要。</p>\n<p><strong>1.EIP-3540: EVM Object Format (EOF) v1</strong></p>\n<p> </p>\n<p><strong>EOF优化</strong></p>\n<p> </p>\n<p>此EIP为EVM引入了可扩展和版本化容器的预留格式。此预留格式可以实现代码和数据分离优势，从而可以在未来轻松引入各种变化。这一变化依赖于EIP-3541所引入的预留格式。</p>\n<p> </p>\n<p>目前，链上部署的EVM代码不包含预留格式。代码通常在客户端每次运行前都要进行JUMPDEST分析验证，导致了额外的消耗，且无助于代码的更新迭代。本EIP中描述的革新引入了一个简单的、可扩展的预留格式，对客户端和编码的要求都相对较低。此预留格式提供了识别并分离代码和数据的分离的功能。这种分离功能对于链上的代码验证器（如Optimism等第二层扩展工具所使用的验证器）特别有利。</p>\n<p> </p>\n<p> </p>\n<p><strong>2.EIP- 3651: Warm COINBASE</strong></p>\n<p> </p>\n<p><strong>节省了ERC20相关的无意义gas消耗</strong></p>\n<p> </p>\n<p>EIP-3651 于 2021年 7月 12日由 William Morriss (<a href=\"https://github.com/wjmelements\">wjmelements</a>) 提出。此提案已经通过并会纳入到上海升级中。这是一个影响激励的交易类型的提案。此提案中提到的 COINBASE 并非大型交易所 Coinbase，而是矿工用于在网络上获取新代币的软件名称。这个概念最初来源于比特币，区块中的第一笔交易被称为创币交易或者 COINBASE 交易，这是一笔特殊交易，用于矿工打包收集挖矿的 gas 小费。执行交易前是否有预先加载被定义为“温暖”或“寒冷”。在 EIP-2929 中，目标不在 accessed_addresses 中时将收取冷账户访问成本（COLD_ACCOUNT_ACCESS_COST），此时的首笔交易为未预先加载（寒冷）的，收取的 gas 费用会偏高，而预先加载后（温暖）的交易，gas 费用则会降低。</p>\n<p> </p>\n<p>William Morris 在提案中提出现阶段在平台上的每笔新交易都必须与 COINBASE 软件进行多次交互， 由于软件需要“预热”，第一次 gas 成本会更高，随着交互次数的增加，gas 费用会逐渐降低。 Williams Morriss 在 EIP-3651 中提出可以将 COINBASE 软件从一开始就保持“温暖”的状态（预先加载），并在accessed_addresses 中包含 COINBASE (0x41) 返回的地址，从而改变矿工插入的首笔交易的 gas 费用，并以此鼓励ERC20代币的支付方式。此提案的好处在于 EIP -3651 推出后矿工打包的交易可以用于更多的用途，gas 费用成本会降低。同时在 EIP-3651 推出前更倾向于使用 ETH 支付，而推出后将更鼓励使用 ERC 20的支付方式。上海升级中通过的另一项提案 EIP-3855 也是一个用于降低无意义的 gas 消耗的提案，两项提案的实施都将很大程度上降低以太坊 gas费用的成本。</p>\n<p> </p>\n<p><strong>3.EIP-3670: EOF - Code Validation</strong></p>\n<p><strong>EOF优化</strong></p>\n<p>配合 EIP-3540 合约创建时引入代码验证。拒绝未定义指令的合约。这样在合约创建时，就可引入代码验证。拒绝包含截断的 PUSH-数据或未定义指令的合约。</p>\n<p> </p>\n<p> <strong>4.EIP-3855：新增PUSH0 指令</strong></p>\n<p> </p>\n<p><strong>是一个降低无意义的GAS消耗的提案</strong></p>\n<p> </p>\n<p>对于EVM即以太坊虚拟机（执行合约代码的系统）中，设计有多种指令，但是之前缺少设计了push0即针对0这个数值的压入堆栈的操作指令，而此EIP则新增了PUSH0( 0x5f) 指令，它将常量值 0 压入堆栈，该指令的需要 2 gas</p>\n<p> </p>\n<p>原先没有push0时导致的是，有一些依赖于0做偏移量的操作，比如远程call调用与返回，则有很多参数是0，原先要操作0，只能使用指令PUSH1 0（即压入一个数字，数字为0），这个操作要消耗3个gas，其次push1 和0各占一个初始化代码的字节存储，导致的是部署此合约的成本也高了2*200gas</p>\n<p>该EIP还统计了因此的gas损失：在现有账户户中，有 340,557,331 字节浪费在PUSH1 00指令上，意味着部署损耗达68,111,466,200 gas</p>\n<p> </p>\n<p><strong>5.EIP-3860: Limit and meter initcode</strong></p>\n<p><strong>提高智能合约系统上限以及降低gas</strong></p>\n<p> </p>\n<p>通过引入 initcode 的最大大小限制 (MAX_INITCODE_SIZE = 2 * MAX_CODE_SIZE = 49152)，扩展了 EIP-170。即将 initcode 的最大大小限制从24576提升为 49152，即翻倍。同时为每 32 字节的 initcode chunk 引入2个gas 费用，以表示 jumpdest-analysis 的成本。</p>\n<p> </p>\n<p>目的：在合约创建过程中，客户端必须在执行 initcode 之前对初始化代码执行 jumpdest-analysis。所执行的工作随 initcode 的大小线性扩展。基于 EIP170 是限制了 initcode 大小为 24576，而如今则是将 initcode 的最大大小限制提升为 49152 。原先的临时解决方案都是分多个合约部署，然后互相相互调用，但显然跨合约引用是个高gas成本的事情。显然，更大的代码容量，就意味合约大小可以扩展一倍，合约开发者可以部署更丰富的功能。简言之，EIP-3860 目的是支持更大型的 Dapp。</p>\n<p><strong>6.EIP-4200: EOF - Static relative jumps</strong></p>\n<p><strong>优化EOF，节省gas.</strong></p>\n<p>引入了三个新的 EVM 跳转指令（RJUMP、RJUMPI 和 RJUMPV），它们将目标编码为带符号的立即值。这些在大多数（但不是全部）用例中都很有用，并且可以降低成本。</p>\n<p> </p>\n<p><strong>7.EIP-4750: EOF - Functions</strong></p>\n<p><strong>优化EOF，节省gas.</strong></p>\n<p> </p>\n<p>引入了两个新的操作码 CALLF 和 RETF 来调用这样的函数并从中返回。此外，还引入了 JUMPF 指令来执行到函数的跳转。不允许使用动态跳转指令。</p>\n<p>EIP-4200 引入了静态跳转指令，它消除了大多数动态跳转用例的需要，但并不是所有的事情都可以用它们来解决。</p>\n<p>该 EIP 旨在消除动态跳转的需要并禁止动态跳转，因为它提供了最重要的功能：调用函数和从函数返回。</p>\n<p>此外，它旨在通过对每个给定函数的输入和输出数量进行编码并隔离每个函数的堆栈（即函数无法读取调用者/被调用者的堆栈）来提高分析机会。</p>\n<p> </p>\n<p><strong>8.EIP-4895: Beacon chain push withdrawals as operations</strong></p>\n<p> </p>\n<p><em><strong>本次上海升级的核心: 支持验证者通过新的“系统级”操作类型从信标链提款到 EVM</strong></em></p>\n<p> </p>\n<p>此EIP将引入一个系统级“操作”来支持从信标链“推”到 EVM 取款。目前有约1400万枚 ETH 任被质押在信标链中。此提款操的运行将意味着以太坊信标链质押提款功能将被激活。</p>\n<p> </p>\n<p>目的：这个 EIP 为信标链上的验证者提款提供了一种进入 EVM 的方法, 从而实现质押ETH 的提款操作。实现方式是基于信标链共识信息，系统无条件地直接控制指定地址的 ETH 余额。在此方法下不产生gas费消耗，且无需再用gas来防止dos 攻击<strong>。总而言之，EIP-4895 的目的就是实现质押提款功能。</strong></p>\n<p> </p>\n<p><strong>ETH 上海升级 解锁质押方案</strong></p>\n<p> </p>\n<p><strong>流失限制系数（Churn Limit Quotient）</strong></p>\n<p> </p>\n<p>根据社区的最新提案，验证者可进行部分提款和全部提款，且出于安全性考虑，提款数额和验证者的退出速率会受到限制。提款的每个Epoch最大可提取数量被设定为512笔，按照现有的验证者数量，他们可4天（验证者总数/（512*225）提取一次奖励。按当前验证者近33.9 ETH的平均余额来算，以太坊市场每天<strong>最大</strong>面临的平均抛售压力为23万枚ETH，4天累计数额为92.1万枚。</p>\n<p> </p>\n<p>其中，全部提款中的退出速率则会受到限制，退出机制引入了“流失限制系数”（Churn Limit Quotient），ETH提现的限制为每天X/ETH，其中X为验证者总数量/65536，目前每个Epoch仅能激活7名验证者被允许退出，即每天（225个Epoch）1575名验证者。若按每名验证者均持有32 ETH，则每天流出的ETH超5万枚。当然，提款速率还会根据质押的ETH总量进行调整，以防止大量资金外流及攻击者进行罚没攻击。而部分提款则没有具体的提款次数限制。</p>\n<p> </p>\n<p>需要注意的是，验证者的有效质押余额需在32 ETH以上，如果低于这个数额将无法获得全部质押奖励，或余额低于16 ETH时还将被逐出验证者行列。当前，验证者待定的提款方案分为部分和全部提取质押金，其中部分提款允许验证者提取超过32 ETH的部分，全部提款则提取所有质押金后退出质押行列。</p>\n<p> </p>\n<p><strong>不过，近期开发者Potuz提出新方案称可取消处理提款队列</strong></p>\n<p>即取消在区块内全部和部分提款队列的逻辑，建议使用验证者index来处此问题。原因在于以太坊上的每个验证者在信标链上被激活的时都会被分配到一个号码，在不使用上述排队退出的情况下，信标链可根据一个区块可以处理的提款上限数来扫描验证者，然后按照验证者的index号码的升序排列处理每个验证者的提款请求。目前，开发者们正对此方案作为备选方案进行研究。</p>\n<p><strong>9.EIP-5450: EOF - Stack Validation</strong></p>\n<p><strong>EOF优化</strong></p>\n<p>引入代码段的扩展验证，以保证在执行验证合约期间不会发生堆栈下溢</p>\n<p>当前现有的 EVM 实现对每条执行的指令执行大量有效性检查，例如检查堆栈溢出/下溢、是否有足够的GAS等。此更改旨在通过在部署时验证来最大程度地减少运行时所需的此类检查的数量-没有异常情况发生的时间，并防止在可能发生的地方部署代码。</p>\n<p>特别是，这种扩展的代码验证消除了对每条执行的指令进行 EVM 堆栈下溢检查的需要。它还会阻止部署可静态证明需要超过 1024 个堆栈项的代码，但在某些情况下仍有可能超过该限制，因此无法完全消除溢出检查。</p>\n<p><strong><del>EIP-4844: Shard Blob Transactions</del></strong></p>\n<p><strong><a href=\"https://eips.ethereum.org/EIPS/eip-1153\"><del>EIP-1153: Transient storage opcodes</del></a></strong></p>\n<p><strong><a href=\"https://eips.ethereum.org/EIPS/eip-2537\"><del>EIP-2537：Precompile for BLS12-381 curve operations</del></a></strong></p>\n<p><strong>后续影响：</strong></p>\n<p> </p>\n<p>我们可以看到本次升级的主要目的是做EOF的细节优化，降低gas，以及释放beacon链锁仓的ETH。不在这条主线上的EIP-4844,1153,2537尽管也非常重要，但是都被推迟延后了。</p>\n<p> </p>\n<p>• 那么长期直接收益的还是那些被gas卡脖子类的复杂合约赛道。ETH的pos抵押量最终会长足增长。</p>\n<p> </p>\n<p>• 中期收益的是围绕着验证者规模为中心的一些mev相关整个生态链，尤其是传统矿池。</p>\n<p> </p>\n<p>• 短期收益不知道一些能蹭到“上海”概念的meme能不能有偷鸡的机会。随着ETH抵押的释放，一些坐牢了好几年的ETH可能会对市场产生一些潜在的短期抛压。</p>\n<p> </p>\n<p>OpenBlock 钱包作为面对C端，一直贴合区块链发展趋势的新一代免私钥，高安全的链上mpc钱包赛道领军者。也会持续关注ETH的后续更新，帮助用户寻找能参与到MEV游戏的低门槛渠道，欢迎下载体验。MPC本来就是一个能够解决新时代矿池的潜在问题关键技术，并且区块链是一个愿意奖赏尝鲜用户的行业。如果你期待更多关于区块链行业的思考，请务必加入我们的discord综合社区，进行深度交流。</p>\n<p> </p>\n<p><strong><a href=\"https://discord.gg/xxZPYuRSHR\">https://discord.gg/xxZPYuRSHR</a></strong></p>\n<p> </p>\n<p>参考资料：</p>\n<p><a href=\"https://eips.ethereum.org/EIPS/eip-3860\">EIP-3860: Limit and meter initcode</a>  </p>\n<p><a href=\"https://eips.ethereum.org/EIPS/eip-4895\">EIP-4895: Beacon chain push withdrawals as operations</a> </p>\n<p><a href=\"https://eips.ethereum.org/EIPS/eip-3540\">EIP-3540: EVM Object Format (EOF) v1</a> </p>\n<p><a href=\"https://eips.ethereum.org/EIPS/eip-4844\">EIP-4844: Shard Blob Transactions</a> </p>\n<p><a href=\"https://foresightnews.pro/article/detail/19561\">https://foresightnews.pro/article/detail/19561</a></p>\n<p><a href=\"https://www.freebuf.com/articles/blockchain-articles/348968.html\">https://www.freebuf.com/articles/blockchain-articles/348968.html</a></p>\n<p><a href=\"https://news.marsbit.co/20221212212222266105.html\">https://news.marsbit.co/20221212212222266105.html</a></p>\n<h2 id=\"httpsdunecomhildobbyeth2-deposits\"> <a href=\"https://dune.com/hildobby/ETH2-Deposits\">https://dune.com/hildobby/ETH2-Deposits</a></h2>\n<p><em>If you find submirror valuable, please consider donate to wong2.eth to help cover server cost.</em></p>\n","content:encodedSnippet":"作者：星主，CryptoMaid,Mumu,CryptoJJ,Crypto_Quinine,Bella_research\n出品：OpenBlock运营部\n \n为什么上海升级很重要。因为实际上ETH 15年发布的路线图中的四个阶段：前沿、宅基地、大都会、宁静，历经15次升级，在上一次巴黎升级中已经全部完成了，有遗憾，但是整体大大超预期。\n \n\n ETH2.0新时代路线图的一大特点是更新频繁，在eth1.0阶段。每次大更新间隔在1~2年的测试才能上马。而ETH2.0当中，现在看来每半年就会进行一次大升级。\n而上海升级是新路线图六个阶段的第一次升级，其身上的重担不言而喻。就像四年前看eth路线图觉得贼画饼一样，现在我们看新路线图也是这种有点梦幻的感觉，又要多少年才能梦想照进现实？\n \n说点粗俗的，可以预见的将来，市场马上就会开始热炒，能蹭上这次上海升级概念的代币了。\n那为了解答这个粗俗的问题。我们的文章会分为三个部分。\n \n1. ETH2.0 的新格局\n2. 上海升级的具体内容\n3. 上海升级，潜在的后续影响\nETH2.0的新格局，这是一个属于MEV的时代\n为什么这次上海升级如此急迫呢？巴黎升级后仅仅2月，就要定案囊括哪些EIP呢？\n \n在ETH2.0当中”验证者“替换了从前”矿工“的角色。MEV收益取代了原来GAS费的角色。 Liquid pool，staking pool，cex staking 三类矿池取代了从前pow矿池的角色。\n1.验证者取代了矿工\n \nETH2.0主网合并后以太坊网络上的所有交易将不再由能源密集型的“矿工”验证，而是由已存入或质押大量ETH的个体和组织“验证者”进行验证。任何人只需质押 32ETH以上， 即可满足最低要求，验证节点成为“验证者”。\n \n2.MEV收入取代了GAS费\n \nweb3.0从业者必须尽快普及的一个概念：MEV。我们可以这样阐述，ETH1.0 围绕pow展开的gas分配游戏，而ETH2.0 围绕MEV展开的套利gas消耗游戏\n \nMEV（Miner Extractable Value），矿工可提取价值，也有译为最大可提取价值（Max Extractable Value），最早由 Phil Daian 在 Flash Boys 2.0 这篇论文中提出。\n \n我们都知道，链上所有动作都以「交易」形式存在，而所有交易由用户发起后，都会进入「内存池（mempool）」中等待被矿工打包，出于利润最大化原则，矿工会按照 gas 费高低来确定打包顺序，这就是MEV产生的基本条件，也催生了链上机器人的出现，他们通过高gas设置（PGA）来抢跑池子中的交易进行套利。\n \n具体来讲，目前已开发的MEV套利，主要是三类：1.三角套利2.夹子（三明治攻击.）3.借贷清算。\n而实际套利捕捉，目前仅仅能实现理论套利的20%左右。这一块儿的套利策略开发和套利规模，会随着eth的代码完善，性能增强，行情变化逐渐增大。\n \n\n \n这样放在地上白捡的利润自然被不少人盯上，据统计数据，自2020年至今，全网累计捕获 MEV 金额高达 6.8 亿美金。这同时也造就了一代新星的兴起——Flashbot，帮助节点捕获MEV的工具。以及MEV捕获赛道的一众花式竞争者，包括但是不限于：KeeperDAO，ArcherDAO，Automata，mistX，BackRunMe \n\nMEV所产生的巨额利润，一直都被圈在矿工和链上机器人的圈子里，最早作为矿池的一种灰色收入被民间戏称”贿赂节点收入“，”最小的51%攻击“。这种情况一直到2022年的伦敦升级和以太坊合并才有所改变。\n伦敦升级中通过的EIP1559大大改变了矿工们的收入结构\n 由从前的收全额 gas 费变成燃烧+收小费的模式，而以太坊合并也标志着它彻底改变为POS共识机制，“验证者”代替原先比较佛系的“矿工”参与MEV价值瓜分，ETH2.0的节点网络成为一个竞争更激烈的、生态更丰富的MEV乐园。这也大大增加了Flashbot客户数量，截至目前，近 90%的以太坊验证者都在运行其 MEV-boost 客户端。\n 从此MEV彻底取代了gas费成为了以太坊“验证者”主要收入，从此gas费被用来燃烧，造成了ETH的长期通缩预期。以目前的数据来说因为MEV-boost的引入，以太坊“验证者”的收入从年化3%左右提升到了接近10%的水平。在ETH通缩的前提下，“节点”收入甚至不输于减半之前，为ETH的网络稳定打下了基础，和其他pos链之间形成了天险一般的壁垒。\n \n3.新时代的矿池\n \n虽然如同前文介绍过的，在eth2.0当中只需要30多个eth就能成为验证者，个人验证者成功获得奖励平均要两个月一次还是非常困难的。尤其现在涉及到mev-boostz这样需要频繁维护的技术活，个人验证者总是捉襟见肘。因此对于除了极少数巨鲸，以及孤勇者以外，加入矿池依旧是主流方案，目前的矿池有三类：Liquid pool，staking pool，cex staking\n市场份额如下：\n \n\n1.流动性矿池：\n中心化程度中等，业务模型以市场份额88.67%的Lido为例。矿池收益归属Lido项目方，矿池奖励用户$Lido挖矿奖励，用户存款凭证为stETH，因为stETH具有流动性，因此被称为流动性矿池。维护stETH-ETH交易对的流动性，是该类矿池的主要竞争力壁垒所在。\n \n\n2.交易所矿池：\n中心化程度比较高，矿池收益具体分配方案，管理费用，甚至是抵押ETH的来源，都比较不透明。优势是交易所强大的业务背书和商务团队。\n \n3.矿池：\n中心化程度极低，基本是去中心的，模式就是没有什么模式。自由抵押，公平分配，管理费相对透明。\n劣势是，在此次上海升级之前，受限于ETH2.0的阶段性局限，目前锁仓的ETH，都处于坐牢状态，无法赎回。可预见，该类型矿池会成为上海升级之后的主要受益方。\n \n \n \n \n基于以上新经济模型，验证者质押ETH可以生成和收集新的ETH（MEV），这些所谓的“新ETH”就是他们证明验证交易和保护网络的奖励。\n但目前的以太坊，只能存入ETH但不能提取ETH，质押总价值接近 235 亿美元，都被“被困”在以太坊网络上。\n \n如果不尽快开放解除质押功能，则质押ETH的吸引力将大打折扣，后续也就不会有那么多人进入以太坊网络，这无疑会对以太坊的未来发展和网络安全产生巨大影响。而在POS世界，pos的抵押量就是正义，维护抵押量是维护区块安全的第一共识。\n \n而这一次上海升级将为链上锁定着的230亿美金的POS质押ETH提供解锁能力，还伴随有对GAS优化的诸多EIP融入。\n \n上海升级的具体内容\n \n非常可惜，原定上海升级中非常重要的EIP-4844最终被确认推迟了。它是ETH 分片的第一步，可以极大的降低eth的gas费用。部分操作可以节省gas一百倍。\n最终被确认更新的提案只剩下十二个提案中的九个。其中第八条最为重要。\n1.EIP-3540: EVM Object Format (EOF) v1\n \nEOF优化\n \n此EIP为EVM引入了可扩展和版本化容器的预留格式。此预留格式可以实现代码和数据分离优势，从而可以在未来轻松引入各种变化。这一变化依赖于EIP-3541所引入的预留格式。\n \n目前，链上部署的EVM代码不包含预留格式。代码通常在客户端每次运行前都要进行JUMPDEST分析验证，导致了额外的消耗，且无助于代码的更新迭代。本EIP中描述的革新引入了一个简单的、可扩展的预留格式，对客户端和编码的要求都相对较低。此预留格式提供了识别并分离代码和数据的分离的功能。这种分离功能对于链上的代码验证器（如Optimism等第二层扩展工具所使用的验证器）特别有利。\n \n \n2.EIP- 3651: Warm COINBASE\n \n节省了ERC20相关的无意义gas消耗\n \nEIP-3651 于 2021年 7月 12日由 William Morriss (wjmelements) 提出。此提案已经通过并会纳入到上海升级中。这是一个影响激励的交易类型的提案。此提案中提到的 COINBASE 并非大型交易所 Coinbase，而是矿工用于在网络上获取新代币的软件名称。这个概念最初来源于比特币，区块中的第一笔交易被称为创币交易或者 COINBASE 交易，这是一笔特殊交易，用于矿工打包收集挖矿的 gas 小费。执行交易前是否有预先加载被定义为“温暖”或“寒冷”。在 EIP-2929 中，目标不在 accessed_addresses 中时将收取冷账户访问成本（COLD_ACCOUNT_ACCESS_COST），此时的首笔交易为未预先加载（寒冷）的，收取的 gas 费用会偏高，而预先加载后（温暖）的交易，gas 费用则会降低。\n \nWilliam Morris 在提案中提出现阶段在平台上的每笔新交易都必须与 COINBASE 软件进行多次交互， 由于软件需要“预热”，第一次 gas 成本会更高，随着交互次数的增加，gas 费用会逐渐降低。 Williams Morriss 在 EIP-3651 中提出可以将 COINBASE 软件从一开始就保持“温暖”的状态（预先加载），并在accessed_addresses 中包含 COINBASE (0x41) 返回的地址，从而改变矿工插入的首笔交易的 gas 费用，并以此鼓励ERC20代币的支付方式。此提案的好处在于 EIP -3651 推出后矿工打包的交易可以用于更多的用途，gas 费用成本会降低。同时在 EIP-3651 推出前更倾向于使用 ETH 支付，而推出后将更鼓励使用 ERC 20的支付方式。上海升级中通过的另一项提案 EIP-3855 也是一个用于降低无意义的 gas 消耗的提案，两项提案的实施都将很大程度上降低以太坊 gas费用的成本。\n \n3.EIP-3670: EOF - Code Validation\nEOF优化\n配合 EIP-3540 合约创建时引入代码验证。拒绝未定义指令的合约。这样在合约创建时，就可引入代码验证。拒绝包含截断的 PUSH-数据或未定义指令的合约。\n \n 4.EIP-3855：新增PUSH0 指令\n \n是一个降低无意义的GAS消耗的提案\n \n对于EVM即以太坊虚拟机（执行合约代码的系统）中，设计有多种指令，但是之前缺少设计了push0即针对0这个数值的压入堆栈的操作指令，而此EIP则新增了PUSH0( 0x5f) 指令，它将常量值 0 压入堆栈，该指令的需要 2 gas\n \n原先没有push0时导致的是，有一些依赖于0做偏移量的操作，比如远程call调用与返回，则有很多参数是0，原先要操作0，只能使用指令PUSH1 0（即压入一个数字，数字为0），这个操作要消耗3个gas，其次push1 和0各占一个初始化代码的字节存储，导致的是部署此合约的成本也高了2*200gas\n该EIP还统计了因此的gas损失：在现有账户户中，有 340,557,331 字节浪费在PUSH1 00指令上，意味着部署损耗达68,111,466,200 gas\n \n5.EIP-3860: Limit and meter initcode\n提高智能合约系统上限以及降低gas\n \n通过引入 initcode 的最大大小限制 (MAX_INITCODE_SIZE = 2 * MAX_CODE_SIZE = 49152)，扩展了 EIP-170。即将 initcode 的最大大小限制从24576提升为 49152，即翻倍。同时为每 32 字节的 initcode chunk 引入2个gas 费用，以表示 jumpdest-analysis 的成本。\n \n目的：在合约创建过程中，客户端必须在执行 initcode 之前对初始化代码执行 jumpdest-analysis。所执行的工作随 initcode 的大小线性扩展。基于 EIP170 是限制了 initcode 大小为 24576，而如今则是将 initcode 的最大大小限制提升为 49152 。原先的临时解决方案都是分多个合约部署，然后互相相互调用，但显然跨合约引用是个高gas成本的事情。显然，更大的代码容量，就意味合约大小可以扩展一倍，合约开发者可以部署更丰富的功能。简言之，EIP-3860 目的是支持更大型的 Dapp。\n6.EIP-4200: EOF - Static relative jumps\n优化EOF，节省gas.\n引入了三个新的 EVM 跳转指令（RJUMP、RJUMPI 和 RJUMPV），它们将目标编码为带符号的立即值。这些在大多数（但不是全部）用例中都很有用，并且可以降低成本。\n \n7.EIP-4750: EOF - Functions\n优化EOF，节省gas.\n \n引入了两个新的操作码 CALLF 和 RETF 来调用这样的函数并从中返回。此外，还引入了 JUMPF 指令来执行到函数的跳转。不允许使用动态跳转指令。\nEIP-4200 引入了静态跳转指令，它消除了大多数动态跳转用例的需要，但并不是所有的事情都可以用它们来解决。\n该 EIP 旨在消除动态跳转的需要并禁止动态跳转，因为它提供了最重要的功能：调用函数和从函数返回。\n此外，它旨在通过对每个给定函数的输入和输出数量进行编码并隔离每个函数的堆栈（即函数无法读取调用者/被调用者的堆栈）来提高分析机会。\n \n8.EIP-4895: Beacon chain push withdrawals as operations\n \n本次上海升级的核心: 支持验证者通过新的“系统级”操作类型从信标链提款到 EVM\n \n此EIP将引入一个系统级“操作”来支持从信标链“推”到 EVM 取款。目前有约1400万枚 ETH 任被质押在信标链中。此提款操的运行将意味着以太坊信标链质押提款功能将被激活。\n \n目的：这个 EIP 为信标链上的验证者提款提供了一种进入 EVM 的方法, 从而实现质押ETH 的提款操作。实现方式是基于信标链共识信息，系统无条件地直接控制指定地址的 ETH 余额。在此方法下不产生gas费消耗，且无需再用gas来防止dos 攻击。总而言之，EIP-4895 的目的就是实现质押提款功能。\n \nETH 上海升级 解锁质押方案\n \n流失限制系数（Churn Limit Quotient）\n \n根据社区的最新提案，验证者可进行部分提款和全部提款，且出于安全性考虑，提款数额和验证者的退出速率会受到限制。提款的每个Epoch最大可提取数量被设定为512笔，按照现有的验证者数量，他们可4天（验证者总数/（512*225）提取一次奖励。按当前验证者近33.9 ETH的平均余额来算，以太坊市场每天最大面临的平均抛售压力为23万枚ETH，4天累计数额为92.1万枚。\n \n其中，全部提款中的退出速率则会受到限制，退出机制引入了“流失限制系数”（Churn Limit Quotient），ETH提现的限制为每天X/ETH，其中X为验证者总数量/65536，目前每个Epoch仅能激活7名验证者被允许退出，即每天（225个Epoch）1575名验证者。若按每名验证者均持有32 ETH，则每天流出的ETH超5万枚。当然，提款速率还会根据质押的ETH总量进行调整，以防止大量资金外流及攻击者进行罚没攻击。而部分提款则没有具体的提款次数限制。\n \n需要注意的是，验证者的有效质押余额需在32 ETH以上，如果低于这个数额将无法获得全部质押奖励，或余额低于16 ETH时还将被逐出验证者行列。当前，验证者待定的提款方案分为部分和全部提取质押金，其中部分提款允许验证者提取超过32 ETH的部分，全部提款则提取所有质押金后退出质押行列。\n \n不过，近期开发者Potuz提出新方案称可取消处理提款队列\n即取消在区块内全部和部分提款队列的逻辑，建议使用验证者index来处此问题。原因在于以太坊上的每个验证者在信标链上被激活的时都会被分配到一个号码，在不使用上述排队退出的情况下，信标链可根据一个区块可以处理的提款上限数来扫描验证者，然后按照验证者的index号码的升序排列处理每个验证者的提款请求。目前，开发者们正对此方案作为备选方案进行研究。\n9.EIP-5450: EOF - Stack Validation\nEOF优化\n引入代码段的扩展验证，以保证在执行验证合约期间不会发生堆栈下溢\n当前现有的 EVM 实现对每条执行的指令执行大量有效性检查，例如检查堆栈溢出/下溢、是否有足够的GAS等。此更改旨在通过在部署时验证来最大程度地减少运行时所需的此类检查的数量-没有异常情况发生的时间，并防止在可能发生的地方部署代码。\n特别是，这种扩展的代码验证消除了对每条执行的指令进行 EVM 堆栈下溢检查的需要。它还会阻止部署可静态证明需要超过 1024 个堆栈项的代码，但在某些情况下仍有可能超过该限制，因此无法完全消除溢出检查。\nEIP-4844: Shard Blob Transactions\nEIP-1153: Transient storage opcodes\nEIP-2537：Precompile for BLS12-381 curve operations\n后续影响：\n \n我们可以看到本次升级的主要目的是做EOF的细节优化，降低gas，以及释放beacon链锁仓的ETH。不在这条主线上的EIP-4844,1153,2537尽管也非常重要，但是都被推迟延后了。\n \n• 那么长期直接收益的还是那些被gas卡脖子类的复杂合约赛道。ETH的pos抵押量最终会长足增长。\n \n• 中期收益的是围绕着验证者规模为中心的一些mev相关整个生态链，尤其是传统矿池。\n \n• 短期收益不知道一些能蹭到“上海”概念的meme能不能有偷鸡的机会。随着ETH抵押的释放，一些坐牢了好几年的ETH可能会对市场产生一些潜在的短期抛压。\n \nOpenBlock 钱包作为面对C端，一直贴合区块链发展趋势的新一代免私钥，高安全的链上mpc钱包赛道领军者。也会持续关注ETH的后续更新，帮助用户寻找能参与到MEV游戏的低门槛渠道，欢迎下载体验。MPC本来就是一个能够解决新时代矿池的潜在问题关键技术，并且区块链是一个愿意奖赏尝鲜用户的行业。如果你期待更多关于区块链行业的思考，请务必加入我们的discord综合社区，进行深度交流。\n \nhttps://discord.gg/xxZPYuRSHR\n \n参考资料：\nEIP-3860: Limit and meter initcode  \nEIP-4895: Beacon chain push withdrawals as operations \nEIP-3540: EVM Object Format (EOF) v1 \nEIP-4844: Shard Blob Transactions \nhttps://foresightnews.pro/article/detail/19561\nhttps://www.freebuf.com/articles/blockchain-articles/348968.html\nhttps://news.marsbit.co/20221212212222266105.html\n https://dune.com/hildobby/ETH2-Deposits\nIf you find submirror valuable, please consider donate to wong2.eth to help cover server cost.","guid":"https://mirror.xyz/0x054a948bD54a17419dF6bfFac05a64beFF62C51B/4NdT7rVwmNXDZY2ZD1SkNxx0GV856UVNnHGPP4suztk","isoDate":"2022-12-19T06:48:23.000Z","from":"https://submirror.xyz/0x054a948bD54a17419dF6bfFac05a64beFF62C51B","hashId":"55a1e5cd91d04ac9c593be9b30949db2"}]